components:
  parameters:
    IndividualIds:
      description: The ids of the individuals
      in: query
      name: individual_ids
      required: true
      schema:
        type: array
    IndividualMetricsEndDateParameter:
      description: Ending date for data (max range from start date is 12 months)
      in: query
      name: end
      schema:
        format: date
        type: string
    IndividualMetricsStartDateParameter:
      description: Starting date for data (max range to end date is 12 months)
      in: query
      name: start
      schema:
        format: date
        type: string
    NoteContext:
      description: The contexts to get notes for
      explode: true
      in: query
      name: context[]
      schema:
        items:
          enum:
            - GROUP
            - DEPARTMENT
            - PROCESS_QUEUE
            - GENERAL
          type: string
        type: array
      style: form
    NoteContextId:
      description: The context ids to filte notes for
      in: query
      name: context_id
      schema:
        type: integer
    NoteSharingLevel:
      description: The sharing level to get notes for
      explode: true
      in: query
      name: sharing_level[]
      schema:
        items:
          enum:
            - PRIVATE
            - CONTEXT_LEADERS
            - ALL_LEADERS
          type: string
        type: array
      style: form
    NotesIncludeContext:
      description: Include the context
      in: query
      name: include_context
      schema:
        type: boolean
    NotesIncludeCreator:
      description: Include the creator
      in: query
      name: include_creator
      schema:
        type: boolean
    Page:
      description: The page number to return
      in: query
      name: page
      schema:
        default: 1
        type: integer
    PerPage:
      description: The size of a page
      in: query
      name: per_page
      schema:
        default: 25
        enum:
          - 25
          - 50
          - 75
          - 100
        type: integer
    PerformUnsavedAdvancedSearchRequestDeprecated:
      description: >
        The individuals advanced search __filters__ can be found
        [here](/documentation/documents/search_params_individuals.html)

        The groups advanced search __filters__ can be found
        [here](/documentation/documents/search_params_groups.html)
      in: query
      name: deprecated_unsaved_advanced_search
      required: false
      schema:
        $ref: "#/components/schemas/PerformUnsavedAdvancedSearchRequestDeprecated"
    UsedByGroupsFilter:
      description: Filter groups using the entity, such as public or listed
      in: query
      name: used_by_groups_filter
      schema:
        type: string
  requestBodies:
    AddFormManagerRequest:
      content:
        "*/*":
          schema:
            properties:
              individual_id:
                type: integer
            type: object
      description: The new form manager details
      required: false
    AssignmentAssociatedTimeRequest:
      content:
        "*/*":
          schema:
            properties:
              is_required:
                type: boolean
            type: object
      description: Updates to an assignment associated time
      required: false
    AssignmentRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/AssignmentRequestBody"
      description: The new status for the assignment
      required: false
    AssignmentSwapRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/AssignmentSwapRequestBody"
      description: The new status for the assignment swap
      required: false
    BasicIndividualProfileSerializer:
      content:
        "*/*":
          schema:
            properties:
              active:
                type: boolean
              addresses:
                properties:
                  home:
                    $ref: "#/components/schemas/AddressSerializer"
                  mailing:
                    $ref: "#/components/schemas/AddressSerializer"
                  work:
                    $ref: "#/components/schemas/AddressSerializer"
                title: Addresses
                type: object
              birthday:
                example: 2011-10-27T00:00:00.000Z
                format: date
                type: string
              campus_id:
                type: integer
              created:
                format: date
                type: string
              deceased:
                format: date
                type: string
              email:
                example: hunter.davis@testing.com
                type: string
              email_unsubscribed:
                type: boolean
              email_unsubscribed_reason:
                description: The reason a person was unsubscribed
                enum:
                  - API_UNSUBSCRIBED
                  - DOMAIN_UNSUBSCRIBED
                  - SITE_UNSUBSCRIBED
                type: string
              family_id:
                type: integer
              family_position:
                description: The position of the individual in the family
                enum:
                  - PRIMARY_CONTACT
                  - SPOUSE
                  - CHILD
                  - OTHER
                type: string
              first_name:
                example: Hunter
                type: string
              gender:
                description: The gender of the individual
                enum:
                  - MALE
                  - FEMALE
                type: string
              id:
                type: integer
              images:
                $ref: "#/components/schemas/Images"
              is_child_work_approved:
                type: boolean
              last_name:
                example: Davis
                type: string
              legal_first_name:
                type: string
              marital_status:
                description: The marital status of the individual
                enum:
                  - MARRIED
                  - SINGLE
                  - WIDOWED
                  - DIVORCED
                  - SEPARATED
                type: string
              membership_type_id:
                type: integer
              middle_name:
                type: string
              name:
                example: Hunter Davis
                type: string
              name_prefix:
                example: Dr.
                type: string
              name_suffix:
                example: Sr.
                type: string
              phone:
                properties:
                  fax:
                    type: string
                  home:
                    type: string
                  mobile:
                    type: string
                  mobile_carrier_id:
                    type: string
                  pager:
                    type: string
                  work:
                    type: string
                title: Phone
                type: object
              preferred_number:
                $ref: "#/components/schemas/PreferredNumberTypes"
            type: object
      description: Information related to an individual's profile
      required: false
    CategoryIndividualsRequest:
      content:
        "*/*":
          schema:
            properties:
              has_been_notified:
                description: >-
                  do they have at least one assignment there they have or have
                  not been notified
                type: boolean
              has_email:
                type: boolean
              has_mobile_phone:
                type: boolean
              position_ids:
                description: the position ids to filter individuals by
                items:
                  type: integer
                type: array
              schedule_ids:
                description: the schedule ids to filter individuals by
                items:
                  type: integer
                type: array
              statuses:
                description: the statuses to filter individuals by
                items:
                  enum:
                    - PENDING
                    - ACCEPTED
                    - DECLINED
                    - CHECKED_IN
                  type: string
                type: array
            type: object
      description: filters the individuals serving in a category
      required: false
    CheckinLabelEventPositionsRequest:
      content:
        "*/*":
          schema:
            items:
              properties:
                position_id:
                  type: integer
                should_print_checkin_label:
                  type: boolean
              type: object
            type: array
      description: The positions and their checkin label values
      required: false
    CompleteQueueIndividualParameters:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/CompleteQueueIndividualRequest"
      description: The automations to perform when completing a queue individual
      required: false
    CreateAssignmentSwapRequest:
      content:
        "*/*":
          schema:
            properties:
              individual_ids:
                items:
                  type: integer
                type: array
            type: object
      description: The ids of assignments to create swap requests for
      required: false
    CreateAssignmentsRequest:
      content:
        "*/*":
          schema:
            properties:
              individual_ids:
                items:
                  type: integer
                type: array
              update_existing_status:
                type: boolean
            type: object
      description: The individual ids to create assignments for
      required: false
    CreateEditBackgroundCheckRequest:
      content:
        "*/*":
          schema:
            properties:
              completed_date:
                format: date-time
                type: string
              package_name:
                type: string
              package_slug:
                type: string
              report_status:
                enum:
                  - CLEAR
                  - CONSIDER
                  - DISPUTED
                  - DISPUTED_CONSIDER
                  - ENGAGED
                  - SUSPENDED
                type: string
            type: object
      description: A background check object or array of background check objects
      required: false
    CreateFamilyRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/CreateFamilyRequest"
      description: The family to create
      required: false
    CreateFormAutomationRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/FormAutomationRequest"
      description: the form automation to create
      required: false
    CreateGroupMessageCommentRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/CreateGroupMessageCommentRequest"
      description: The group message comment details
      required: false
    CreateIndividualEventsRequest:
      content:
        "*/*":
          schema:
            properties:
              individual_ids:
                items:
                  type: integer
                type: array
              status:
                enum:
                  - REQUESTING
                  - GOING
                  - NOT_GOING
                  - MAYBE
                  - NOT_RESPONDED
                type: string
            type: object
      description: The event status and individuals to create
      required: false
    CreateIndividualServingPreferenceTimesRequest:
      content:
        "*/*":
          schema:
            properties:
              end:
                format: date-time
                type: string
              position_id:
                type: integer
              start:
                format: date-time
                type: string
            type: object
      description: create a serving time preference for an individual
      required: false
    CreateNeedItemRequest:
      content:
        "*/*":
          schema:
            properties:
              date:
                format: date
                type: string
              name:
                type: string
            type: object
      description: The need item details
      required: false
    CreateNeedRequest:
      content:
        "*/*":
          schema:
            allOf:
              - $ref: "#/components/schemas/UpdateNeedRequestProperties"
              - properties:
                  items:
                    items:
                      properties:
                        date:
                          format: date
                          type: string
                        name:
                          type: string
                      type: object
                    type: array
                type: object
      description: The new need details
      required: false
    CreateNoteRequest:
      content:
        "*/*":
          schema:
            properties:
              context:
                enum:
                  - GROUP
                  - DEPARTMENT
                  - PROCESS_QUEUE
                  - GENERAL
                type: string
              context_id:
                type: integer
              note:
                type: string
              sharing_level:
                enum:
                  - PRIVATE
                  - CONTEXT_LEADERS
                  - ALL_LEADERS
                type: string
            type: object
      description: The new note
      required: false
    CreateQueueIndividualParameters:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/CreateQueueIndividualRequest"
      description: The individual queue
      required: false
    CreateSacramentRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/SacramentSerializer"
      description: A sacrament object or array of sacrament objects
      required: false
    CreateSchedulesRequest:
      content:
        "*/*":
          schema:
            properties:
              count:
                description: the count of new schedules to create
                type: integer
              schedule_dates:
                items:
                  format: date
                  type: string
                type: array
            type: object
      description: The new schedules options
      required: false
    CreateTemplateRequest:
      content:
        application/json:
          schema:
            properties:
              campus_id:
                type: integer
              description:
                type: string
              entity_type:
                $ref: "#/components/schemas/TemplateEntityType"
              name:
                type: string
              originating_entity_id:
                type: integer
              shared_campus_ids:
                items:
                  type: integer
                type: array
              sharing_level:
                $ref: "#/components/schemas/TemplateSharingLevel"
            type: object
      description: Create a new template
    CreateVolunteersFromPositionsRequest:
      content:
        "*/*":
          schema:
            properties:
              positions_ids:
                items:
                  type: integer
                type: array
            type: object
      description: The position ids to create volunteer records for
      required: false
    CreateVolunteersRequest:
      content:
        "*/*":
          schema:
            properties:
              individual_ids:
                items:
                  type: integer
                type: array
            type: object
      description: The individual ids to create volunteers for
      required: false
    EventCreateRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/EventCreate"
      description: The Event to create
      required: false
    EventPositionAssociatedTimeRequest:
      content:
        "*/*":
          schema:
            items:
              properties:
                associated_time_id:
                  type: integer
                event_position_id:
                  type: integer
                is_required:
                  type: boolean
              type: object
            type: array
      description: Updates to an event positions associated time
      required: false
    EventPositionRequest:
      content:
        "*/*":
          schema:
            properties:
              quantity:
                type: integer
            type: object
      description: Quantity needed for the event position
      required: false
    EventUpdateRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/EventUpdate"
      description: The Event to update
      required: false
    FamilyAssignmentsRequest:
      content:
        "*/*":
          schema:
            properties:
              end_date:
                format: date
                type: string
              exclude_individuals:
                items:
                  type: integer
                type: array
              start_date:
                format: date
                type: string
              statuses:
                items:
                  $ref: "#/components/schemas/AssignmentStatus"
                type: array
            type: object
      description: Request a family's assignments
      required: false
    FormResponseRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/FormResponseRequest"
      description: the form response to create / edit
      required: false
    GetCategoriesRequest:
      content:
        "*/*":
          schema:
            properties:
              search_term:
                description: Search team used to search categories by name
                type: string
              status:
                enum:
                  - ACTIVE
                  - ARCHIVED
                  - ACTIVE_AND_ARCHIVED
                type: string
            type: object
      description: filters the categories
      required: false
    GetSacramentRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/SacramentSerializer"
      description: A sacrament object or array of sacrament objects
      required: false
    GroupAttendanceGroupingSyncRequest:
      content:
        "*/*":
          schema:
            properties:
              adds:
                items:
                  example: 123
                  type: integer
                type: array
              removes:
                items:
                  example: 321
                  type: integer
                type: array
            type: object
      description: Attendance Groupings to add/remove
      required: false
    GroupMessageRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/GroupMessageRequestSerializer"
      description: The group message to create
      required: false
    GroupTextMessageRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/GroupTextMessageRequestSerializer"
      description: The group text message to send
      required: false
    IndividualBlockoutDateRequest:
      content:
        "*/*":
          schema:
            properties:
              end:
                format: date-time
                type: string
              reason:
                type: string
              start:
                format: date-time
                type: string
            type: object
      description: The individual's blockout date range
      required: false
    IndividualContactInfoRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/IndividualContactInfoRequestSerializer"
      description: The individual contact info to edit
      required: false
    IndividualMessageReplyRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/IndividualMessageReplyRequestSerializer"
      description: The reply to send to an individual
      required: false
    IndividualMessageRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/IndividualMessageRequestSerializer"
      description: The message to send an individual
      required: false
    IndividualPrivacySettingsRequest:
      content:
        "*/*":
          schema:
            properties:
              address_privacy_level:
                enum:
                  - LEADERSHIP_ONLY
                  - GROUP_MEMBERS
                  - EVERYONE
                type: string
              anniversary_privacy_level:
                enum:
                  - LEADERSHIP_ONLY
                  - GROUP_MEMBERS
                  - EVERYONE
                type: string
              birthday_privacy_level:
                enum:
                  - LEADERSHIP_ONLY
                  - GROUP_MEMBERS
                  - EVERYONE
                type: string
              email_privacy_level:
                enum:
                  - LEADERSHIP_ONLY
                  - GROUP_MEMBERS
                  - EVERYONE
                type: string
              listed:
                type: boolean
              phone_privacy_level:
                enum:
                  - LEADERSHIP_ONLY
                  - GROUP_MEMBERS
                  - EVERYONE
                type: string
            type: object
      description: The individual's privacy settings
      required: false
    IndividualRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/IndividualDetailsRequestSerializer"
      description: The individual to create/edit
      required: false
    IndividualSavedSearchParams:
      content:
        "*/*":
          schema:
            properties:
              can_edit:
                description: >-
                  Whether or not the individual will be allowed to edit the
                  saved search
                type: boolean
              is_owner:
                description: Whether the individual is the owner of the saved search
                type: boolean
              is_starred:
                description: Whether the individual has starred the saved search
                type: boolean
              remove:
                description: Remove the individual's association with this saved search
                type: boolean
            type: object
      description: Individual saved search fields
      required: false
    IndividualSearchRequest:
      content:
        "*/*":
          schema:
            properties:
              configuration:
                $ref: "#/components/schemas/IndividualSearchConfiguration"
              filters:
                description: >
                  You can see the individual params
                  [here](/documentation/documents/search_params_individuals.html).

                  You can see an overview of search filters
                  [here](/documentation/documents/search_overview.html)
                properties: {}
                type: object
            type: object
      description: search filters and configuration
      required: true
    IndividualServingPreferencesRequest:
      content:
        "*/*":
          schema:
            properties:
              preference:
                items:
                  type: integer
                type: array
              preference_type:
                enum:
                  - UNLIMITED
                  - WEEKS_PER_MONTH
                  - WEEKS_OF_MONTH
                type: string
              serve_with_family:
                type: boolean
            type: object
      description: The individual's serving preferences
      required: false
    IndividualsAssignmentsRequest:
      content:
        "*/*":
          schema:
            properties:
              end_date:
                format: date
                type: string
              start_date:
                format: date
                type: string
              statuses:
                items:
                  $ref: "#/components/schemas/AssignmentStatus"
                type: array
            type: object
      description: Request an individuals assignments
      required: false
    IndividualsSocialNetworkRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/IndividualsSocialNetworkRequest"
      description: Update an individuals social networks
      required: false
    InformNeedRequest:
      content:
        "*/*":
          schema:
            properties:
              message:
                type: string
              send_to:
                description: Individual ids to send the email to
                items:
                  type: integer
                type: array
            type: object
      description: The need inform message
      required: false
    MergeMultipleIndividualsRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/MergeMultipleIndividualsRequestSerializer"
      description: The losers and override params for the merge
      required: false
    MessageSchedulersRequest:
      content:
        "*/*":
          schema:
            properties:
              assignment_id:
                type: string
              event_position_id:
                type: string
              message:
                type: string
            type: object
      description: message the schedulers for a schedule
      required: false
    MigrateVolunteersRequest:
      content:
        "*/*":
          schema:
            properties:
              from_group_id:
                type: integer
              from_position_ids:
                items:
                  type: integer
                type: array
            type: object
      description: The group and optionally some positions to migrate group members from
      required: false
    OpenEventPositionsRequest:
      content:
        "*/*":
          schema:
            items:
              properties:
                is_open:
                  type: boolean
                position_id:
                  type: integer
              type: object
            type: array
      description: The positions and their open values
      required: false
    OpenScheduleNotificationRequest:
      content:
        "*/*":
          schema:
            properties:
              dry_run:
                type: boolean
            type: object
      description: whether the message should actually be sent or not
      required: false
    PermissionIndividualsSearchRequest:
      content:
        "*/*":
          schema:
            properties:
              configuration:
                $ref: "#/components/schemas/SearchConfiguration"
              filters:
                properties:
                  admin_role:
                    description: Filter by admin role id assigned to the individual
                    items:
                      type: integer
                    type: array
                  campus:
                    description: Filter by campus id of the individual
                    items:
                      type: integer
                    type: array
                  name:
                    description: Partial first and last name and primary email search
                    type: string
                  permission:
                    description: >-
                      Filter by permission id assigned to the individual; it can
                      be assigned directly or via an admin role that includes
                      this permission
                    items:
                      type: integer
                    type: array
                  permission_campus:
                    description: >-
                      Filter by campus id where the individual has any
                      permissions or admin roles assigned
                    items:
                      type: integer
                    type: array
                type: object
            type: object
      description: search filters and configuration
      required: true
    PrivacyDefaultsRequest:
      content:
        "*/*":
          schema:
            properties:
              default_address_privacy_level:
                enum:
                  - LEADERSHIP_ONLY
                  - GROUP_MEMBERS
                  - EVERYONE
                type: string
              default_admin_created_profile:
                enum:
                  - LIMITED
                  - BASIC
                type: string
              default_anniversary_privacy_level:
                enum:
                  - LEADERSHIP_ONLY
                  - GROUP_MEMBERS
                  - EVERYONE
                type: string
              default_approved_profile:
                enum:
                  - LIMITED
                  - BASIC
                type: string
              default_birthday_privacy_level:
                enum:
                  - LEADERSHIP_ONLY
                  - GROUP_MEMBERS
                  - EVERYONE
                type: string
              default_congregant_created_profile:
                enum:
                  - PENDING
                  - LIMITED
                  - BASIC
                type: string
              default_email_privacy_level:
                enum:
                  - LEADERSHIP_ONLY
                  - GROUP_MEMBERS
                  - EVERYONE
                type: string
              default_listed:
                type: boolean
              default_phone_privacy_level:
                enum:
                  - LEADERSHIP_ONLY
                  - GROUP_MEMBERS
                  - EVERYONE
                type: string
            type: object
      description: The privacy defaults
      required: false
    QueueIndividualParameters:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/UpdateQueueIndividualRequest"
      description: The individual queue updates
      required: false
    ReassignNeedCoordinatorRequest:
      content:
        "*/*":
          schema:
            properties:
              coordinator_id:
                type: integer
            type: object
      description: The new need coordinator
      required: false
    RemoveGroupMemberStatusRequest:
      content:
        "*/*":
          schema:
            properties:
              ids:
                items:
                  type: integer
                type: array
            type: object
      description: The individual ids and status to update
      required: false
    SavedSearchParams:
      content:
        "*/*":
          schema:
            properties:
              can_edit:
                description: Whether or not the current user can edit the saved search
                type: boolean
              columns:
                description: Information related to the columns visible on the search Page
                properties:
                  age:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  allergies:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  anniversary:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  avatar:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  baptized:
                    description: >-
                      If you are using the Sacraments feature, then the
                      Sacraments API would be more effective and up-to-date
                      alternative for surfacing baptism data
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  baptized_date:
                    description: >-
                      If you are using the Sacraments feature, then the
                      Sacraments API would be more effective and up-to-date
                      alternative for surfacing baptism data
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  baptized_note:
                    description: >-
                      If you are using the Sacraments feature, then the
                      Sacraments API would be more effective and up-to-date
                      alternative for surfacing baptism data
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  barcode:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  birthday:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  campus_name:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  commitment_date:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  commitment_story:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  created:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  current_story:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  date_anyone_run_giving_statement:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  date_child_work_start:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  date_child_work_stop:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  date_family_run_giving_statement:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  deceased:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  email:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  emergency_contact_name:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  emergency_phone_number:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  family_id:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  family_position:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  fax_phone_number:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  floating_action_button:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  gender:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  giving_number:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  home_city:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  home_country_iso:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  home_phone_number:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  home_state:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  home_street:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  home_zip:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  how_they_heard:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  how_they_joined:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  id:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  last_attended_date:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  last_giving_date:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  last_login:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  legal_first_name:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  mailing_carrier_route:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  mailing_city:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  mailing_country_iso:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  mailing_state:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  mailing_zip:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  marital_status:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  membership_date:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  membership_date_stop:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  membership_type_name:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  middle_name:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  military:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  mobile_carrier:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  mobile_phone_number:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  modified:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  name:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  name_prefix:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  name_suffix:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  other_city:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  other_country_iso:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  other_state:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  other_zip:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  preferred_number:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  school_grade:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  work_city:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  work_country_iso:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  work_phone_number:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  work_state:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  work_title:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                  work_zip:
                    properties:
                      index:
                        type: integer
                      visible:
                        type: boolean
                    type: object
                type: object
              domain:
                description: Domain of where the search exists
                enum:
                  - individuals
                type: string
              filters:
                description: Information related to the search conditions
                properties:
                  conditions:
                    items:
                      description: Information for the filters applied
                      properties:
                        conditions:
                          properties:
                            id:
                              type: string
                            include_value:
                              properties:
                                include_value:
                                  items:
                                    type: string
                                  type: array
                              type: object
                            is_complete:
                              type: boolean
                            is_initialized:
                              type: boolean
                            is_saved:
                              type: boolean
                            operator:
                              type: string
                            type:
                              type: string
                            uid:
                              type: string
                            value:
                              type: string
                          type: object
                      type: object
                    type: array
                  formula:
                    description: >-
                      The formula defines how multiple filter sets should be
                      used in constructing the search.
                    type: string
                  operator:
                    description: Operator to use for the filter
                    enum:
                      - contains
                      - does_not_contain
                      - ends_with
                      - equal
                      - greater_than
                      - in
                      - not_in
                      - not_equal
                      - is_not_set
                      - is_set
                      - less_than
                      - greater_than_or_equal
                      - in_the_last
                      - in_the_next
                      - in_the_previous
                      - in_the_current
                      - in_the_upcoming
                      - between
                      - not_between
                      - less_than_or_equal
                      - not_in_the_last
                      - not_in_the_next
                      - not_in_the_previous
                      - not_in_the_current
                      - not_in_the_upcoming
                      - starts_with
                    type: string
                  type:
                    description: >-
                      Determines whether the filter is a single filter or a
                      group of filters
                    enum:
                      - group
                      - single
                    type: string
                type: object
              id:
                description: ID for the saved search
                type: integer
              insight_id:
                description: ID for the insight for this saved search
                enum:
                  - individuals:search
                type: string
              is_editor:
                description: Whether or not the current user is the editor the saved search
                type: boolean
              is_owner:
                description: >-
                  Whether or not the current user is the owner of the search
                  being saved
                type: boolean
              name:
                description: Name of the saved search
                type: string
              settings:
                description: Information related to settings for the search configuration
                properties:
                  exclude_children:
                    type: boolean
                  filter_profile_type:
                    items:
                      enum:
                        - active
                        - inactive
                        - deceased
                      type: string
                    type: array
                  group_by:
                    items:
                      type: string
                    type: array
                  include_campuses:
                    items:
                      type: integer
                    type: array
                  include_unlisted:
                    type: boolean
                  only_search_when_filtered:
                    type: boolean
                  order_by:
                    items:
                      properties:
                        column:
                          type: string
                        direction:
                          type: string
                      type: object
                    type: array
                  return_family_positions:
                    items:
                      type: string
                    type: array
                  return_search_results:
                    type: boolean
                type: object
            type: object
      description: The search parameters
      required: false
    ScheduleCategoryPutRequest:
      content:
        "*/*":
          schema:
            properties:
              allowed_replacement_type:
                enum:
                  - NONE
                  - CATEGORY
                  - TEAM
                  - POSITION
                type: string
              archived:
                type: boolean
              child_work_approved_required:
                type: boolean
              default_assignment_status:
                enum:
                  - PENDING
                  - ASSIGNED
                type: string
              name:
                type: string
              week_starts_on_day:
                enum:
                  - SUNDAY
                  - MONDAY
                  - TUESDAY
                  - WEDNESDAY
                  - THURSDAY
                  - FRIDAY
                  - SATURDAY
                type: string
            type: object
      description: The category
      required: false
    ScheduleCategoryRequest:
      content:
        "*/*":
          schema:
            properties:
              associated_times:
                items:
                  $ref: "#/components/schemas/ScheduleEventRequestBody"
                type: array
              campus_id:
                type: integer
              default_assignment_status:
                enum:
                  - PENDING
                  - ASSIGNED
                type: string
              events:
                items:
                  $ref: "#/components/schemas/ScheduleEventRequestBody"
                type: array
              name:
                type: string
              recurrence_pattern:
                enum:
                  - DAILY
                  - WEEKLY
                  - DOES_NOT_REPEAT
                type: string
              teams:
                items:
                  $ref: "#/components/schemas/TeamRequestBody"
                type: array
            type: object
      description: The category
      required: false
    ScheduleRequest:
      content:
        "*/*":
          schema:
            properties:
              associated_times:
                items:
                  $ref: "#/components/schemas/ScheduleEventRequestBody"
                type: array
              events:
                items:
                  $ref: "#/components/schemas/ScheduleEventRequestBody"
                type: array
              same_people_serve_all_times:
                type: boolean
              serving_reminder_message:
                type: string
              serving_reminder_times:
                items:
                  $ref: "#/components/schemas/ScheduleServingReminderTimesRequestBody"
                type: array
            type: object
      description: Schedule details
      required: false
    SchedulingNotificationRequest:
      content:
        "*/*":
          schema:
            properties:
              dry_run:
                type: boolean
              message:
                type: string
              notified_status:
                enum:
                  - NOTIFIED
                  - NOT_NOTIFIED
                  - NOTIFIED_AND_NOT_NOTIFIED
                type: string
              schedule_ids:
                items:
                  type: integer
                type: array
            type: object
      description: Schedule ids to notify
      required: false
    SchedulingPlanOrganizer:
      content:
        "*/*":
          schema:
            properties:
              individual_id:
                type: integer
            type: object
      description: the plan organizer
      required: false
    SchedulingScheduleOrganizer:
      content:
        "*/*":
          schema:
            properties:
              individual_id:
                type: integer
              schedule_id:
                type: integer
            type: object
      description: the schedule organizers
      required: false
    SchedulingServicePlanItemRequest:
      content:
        "*/*":
          schema:
            properties:
              description:
                type: string
              duration:
                type: integer
              fileIds:
                items:
                  type: integer
                type: array
              item_type:
                enum:
                  - ITEM
                  - SECTION_HEADER
                type: string
              links:
                items:
                  $ref: "#/components/schemas/ServicePlanItemLinkRequest"
                type: array
              name:
                type: string
            type: object
      description: The service plan item
      required: false
    SchedulingServicePlanRequest:
      content:
        "*/*":
          schema:
            properties:
              category_id:
                type: integer
              event_starttime_offset:
                type: integer
              name:
                type: string
            type: object
      description: The service plan
      required: false
    SchedulingServicePlanUpdateRequest:
      content:
        "*/*":
          schema:
            properties:
              name:
                type: string
            type: object
      description: The service plan
      required: false
    SchedulingTeamOrganizer:
      content:
        "*/*":
          schema:
            properties:
              individual_id:
                type: integer
            type: object
      description: the team organizer
      required: false
    SchedulingUpdateBulkServicePlanItemsRequest:
      content:
        "*/*":
          schema:
            properties:
              count_before:
                type: integer
              order:
                items:
                  type: integer
                type: array
            type: object
      description: The bulk service plan item request
      required: false
    SearchRequest:
      content:
        "*/*":
          schema:
            properties:
              configuration:
                $ref: "#/components/schemas/SearchConfiguration"
              filters:
                properties: {}
                type: object
            type: object
      description: search filters and configuration
      required: true
    SendOpenScheduleNotificationRequest:
      content:
        "*/*":
          schema:
            properties:
              dry_run:
                type: boolean
              excluded_individual_ids:
                items:
                  type: integer
                type: array
              message:
                type: string
            type: object
      description: Send Open Schedule Notifications Request
      required: false
    ServingReminderTimeRequest:
      content:
        "*/*":
          schema:
            properties:
              days_before:
                description: An integer from 1 to 7
                type: integer
              time_of_day:
                description: The time of day in HH:MM format
                type: string
            type: object
      description: The serving reminder time
      required: false
    ServingRotationPositionRequest:
      content:
        "*/*":
          schema:
            properties:
              quantity:
                type: integer
            type: object
      description: Quantity needed for the serving rotation position
      required: false
    ServingRotationRequest:
      content:
        "*/*":
          schema:
            properties:
              name:
                type: string
            type: object
      description: The serving rotation
      required: false
    UpdateAllAssignmentsRequest:
      content:
        "*/*":
          schema:
            properties:
              status:
                enum:
                  - ACCEPTED
                  - DECLINED
                type: string
            type: object
      description: update all pending assignments to status
      required: false
    UpdateAllFamilyAssignmentsRequest:
      content:
        "*/*":
          schema:
            properties:
              excluded_individual_ids:
                items:
                  type: integer
                type: array
              status:
                enum:
                  - ACCEPTED
                  - DECLINED
                type: string
            type: object
      description: update all of a family's pending assignments to status
      required: false
    UpdateCampusRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/UpdateCampusRequestSerializer"
      description: The campus to edit
      required: false
    UpdateEventGuestRequest:
      content:
        "*/*":
          schema:
            allOf:
              - $ref: "#/components/schemas/AdminIndividualEventStatuses"
              - $ref: "#/components/schemas/BaseIndividualEvent"
      description: The new event guest status
      required: false
    UpdateEventInvitationSettingsRequest:
      content:
        "*/*":
          schema:
            properties:
              allow_additional_guests:
                type: boolean
              attend_max_quantity:
                type: integer
              notify_owner_of_status_changes:
                type: boolean
              show_guest_list:
                type: boolean
            type: object
      description: The new event invitation settings
      required: false
    UpdateEventSummaryRequest:
      content:
        "*/*":
          schema:
            properties:
              notes:
                type: string
              people_information:
                type: string
              prayer_requests:
                type: string
              send_to:
                enum:
                  - LEADERS
                  - MEMBERS
                  - NONE
                type: string
              status:
                enum:
                  - DID_NOT_MEET
                  - MET
                type: string
              topic:
                type: string
              visitors:
                type: integer
            type: object
      description: The new event summary
      required: false
    UpdateFamilyRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/UpdateFamilyRequest"
      description: The family details to update
      required: false
    UpdateFinancialSettingsRequest:
      content:
        "*/*":
          schema:
            properties:
              allow_credit_card:
                type: boolean
              allow_public_giving:
                type: boolean
              system_wide_financials:
                enum:
                  - ADMIN
                type: string
            type: object
      description: Financial settings that can be updated
      required: false
    UpdateGroupMemberStatusRequest:
      content:
        "*/*":
          schema:
            properties:
              individual_ids:
                items:
                  type: integer
                type: array
              status:
                enum:
                  - INVITED
                  - REQUESTING
                  - MEMBER
                  - LEADER
                type: string
            type: object
      description: The individual ids and status to update
      required: false
    UpdateGroupMessageCommentRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/UpdateGroupMessageCommentRequest"
      description: The group message comment details
      required: false
    UpdateGroupMessageRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/UpdateGroupMessageRequest"
      description: The group message details
      required: false
    UpdateGroupRequest:
      content:
        "*/*":
          schema:
            properties:
              main_leader_id:
                type: integer
            type: object
      description: The updated group properties
      required: false
    UpdateIndividualEventsRequest:
      content:
        "*/*":
          schema:
            allOf:
              - $ref: "#/components/schemas/BaseIndividualEventStatuses"
              - $ref: "#/components/schemas/BaseIndividualEvent"
      description: The new individual event status
      required: false
    UpdateIndividualGroupsRequest:
      content:
        "*/*":
          schema:
            items:
              properties:
                action:
                  enum:
                    - REMOVE
                  type: string
                groupId:
                  example: 42
                  type: number
              type: object
            type: array
      description: >-
        The list of group ids to remove the individual from. Each group change
        request is validated one by one, independently of others, and the
        response contains each result. For example, the user may be allowed to
        remove one requested group, but not another — in this case, only the
        allowed group is removed.
    UpdateIndividualSacramentRequest:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/SacramentSerializer"
      description: Update a sacrament object or array of sacrament objects
      required: false
    UpdateIndividualServingPreferenceTimesRequest:
      content:
        "*/*":
          schema:
            properties:
              end:
                format: date-time
                type: string
              start:
                format: date-time
                type: string
            type: object
      description: update an existing serving preference time
      required: false
    UpdateIndividualsGroupRequest:
      content:
        "*/*":
          schema:
            properties:
              receive_sms:
                type: boolean
            type: object
      description: The individuals communication preferences
      required: false
    UpdateNeedItemAssigneeRequest:
      content:
        "*/*":
          schema:
            properties:
              individual_id:
                type: integer
            type: object
      description: The need item's new assignee
      required: false
    UpdateNeedItemRequest:
      content:
        "*/*":
          schema:
            properties:
              assignee_id:
                type: integer
              date:
                format: date
                type: string
              name:
                type: string
              order_by:
                type: integer
            type: object
      description: The need item details
      required: false
    UpdateNeedRequest:
      content:
        "*/*":
          schema:
            allOf:
              - $ref: "#/components/schemas/UpdateNeedRequestProperties"
      description: The updated need details
      required: false
    UpdateNoteRequest:
      content:
        "*/*":
          schema:
            properties:
              note:
                type: string
              sharing_level:
                enum:
                  - PRIVATE
                  - CONTEXT_LEADERS
                  - ALL_LEADERS
                type: string
            type: object
      description: The updated note
      required: false
    UpdateScheduledGiftRequest:
      content:
        "*/*":
          schema:
            properties:
              merchant_status:
                enum:
                  - CANCELLED
                type: string
            type: object
      description: The updated scheduled gift
      required: false
    UpdateTemplateRequest:
      content:
        application/json:
          schema:
            properties:
              description:
                type: string
              name:
                type: string
              shared_campus_ids:
                items:
                  type: integer
                type: array
              template_sharing_level:
                $ref: "#/components/schemas/TemplateSharingLevel"
            type: object
      description: The updated template properties
    UseTemplateRequest:
      content:
        application/json:
          schema:
            properties:
              campus_id:
                type: integer
              title:
                type: string
            type: object
      description: Create a new form or mail merge using a template.
  responses:
    AutoScheduleSuccessResponse:
      content:
        application/json:
          schema:
            properties:
              events:
                items:
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    needed:
                      type: integer
                    scheduled:
                      type: integer
                    start:
                      format: date-time
                      type: string
                  type: object
                type: array
              needed:
                type: integer
              scheduled:
                type: integer
            type: object
      description: >-
        Map of event position ids and how many are still needed for each
        position
    EventUnableToCreateError:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/EventUnableToCreate"
      description: Event unable to to be created due to missing parameters or another issue
    EventUnableToUpdateError:
      content:
        "*/*":
          schema:
            $ref: "#/components/schemas/EventUnableToUpdate"
      description: Event unable to update due to a conflict or issue
    GetScheduleNotificationMetricsResponse:
      content:
        application/json:
          schema:
            properties:
              email_recipients_count:
                type: integer
              missing_or_unsubscribed_count:
                type: integer
              text_recipients_count:
                type: integer
              total_recipients_count:
                type: integer
            type: object
      description: The schedule notification metrics
    NotAuthenticated:
      content: {}
      description: You are not authenticated
    NotAuthorized:
      content: {}
      description: Do not have the permission to access
    NotFound:
      content: {}
      description: Not found
    NotValid:
      content: {}
      description: Invalid
    TemplateDetailsResponse:
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Template"
      description: A template
  schemas:
    AccessTokenSerializer:
      properties:
        access_token:
          type: string
        expires_in:
          example: 7200
          type: integer
        refresh_token:
          type: string
        scope:
          example: read:individuals read:groups
          type: string
        token_type:
          example: bearer
          type: string
      title: Access Token
      type: object
    Action:
      properties:
        allowed:
          type: boolean
        reasons:
          items:
            type: string
          type: array
      type: object
    AddressSerializer:
      properties:
        city:
          type: string
        country_iso:
          type: string
        latitude:
          format: float
          type: number
        longitude:
          format: float
          type: number
        name:
          type: string
        state:
          type: string
        street:
          type: string
        zip:
          type: string
      type: object
    AdminIndividualEventStatuses:
      properties:
        status:
          description: The individual's status for the event
          enum:
            - GOING
            - MAYBE
            - NOT_GOING
            - NOT_RESPONDED
            - REQUESTING
          type: string
      type: object
    AlertSerializer:
      properties:
        alert_type:
          enum:
            - SCHEDULING_CONFLICT
            - BLOCKOUT_DATE
            - SPECIFIC_WEEKS_SERVING_PREFERENCE
            - FREQUENCY_SERVING_PREFERENCE
            - BACKGROUND_CHECK_EXPIRATION
          type: string
        assignment_id:
          type: integer
        id:
          type: integer
        message:
          type: string
        volunteer_id:
          type: integer
      type: object
    AssignmentAdvanceSearchSerializer:
      properties:
        campus:
          properties:
            id:
              type: integer
            name:
              type: string
          type: object
        category:
          properties:
            id:
              type: integer
            name:
              type: string
            organizers:
              items:
                $ref: "#/components/schemas/Organizer"
              type: array
          type: object
        date_modified:
          format: date-time
          type: string
        event:
          properties:
            campus_timezone:
              format: date-time
              type: string
            datetime_end:
              format: date-time
              type: string
            datetime_start:
              format: date-time
              type: string
            id:
              type: integer
            name:
              type: string
          type: object
        id:
          type: integer
        individual:
          properties:
            email_primary:
              type: string
            first_name:
              type: string
            id:
              type: integer
            last_name:
              type: string
            name:
              type: string
          type: object
        is_public:
          type: integer
        position:
          properties:
            id:
              type: integer
            name:
              type: string
          type: object
        schedule:
          properties:
            events:
              items:
                $ref: "#/components/schemas/SchedulingEventSerializer"
              type: array
            id:
              type: integer
            name:
              type: string
          type: object
        status:
          properties:
            date_modified:
              format: date-time
              type: string
            name:
              type: string
            reason:
              type: string
          type: object
        team:
          properties:
            id:
              type: integer
            name:
              type: string
            organizers:
              items:
                $ref: "#/components/schemas/Organizer"
              type: array
          type: object
        volunteer:
          properties:
            id:
              type: integer
          type: object
      type: object
    AssignmentAssociatedTimeSerializer:
      properties:
        assignment_id:
          type: integer
        associated_time_id:
          type: integer
        category_id:
          type: integer
        event_id:
          type: integer
        event_position_id:
          type: integer
        event_team_id:
          type: integer
        is_required:
          type: boolean
        schedule_id:
          type: integer
      type: object
    AssignmentRequestBody:
      properties:
        status:
          enum:
            - PENDING
            - ACCEPTED
            - DECLINED
            - CHECKED_IN
          type: string
      type: object
    AssignmentSerializer:
      properties:
        alerts:
          items:
            $ref: "#/components/schemas/AlertSerializer"
          type: array
        assignment_associated_times:
          items:
            $ref: "#/components/schemas/AssignmentAssociatedTimeSerializer"
          type: array
        category_id:
          type: integer
        date_notified:
          format: date-time
          type: string
        event_id:
          type: integer
        event_position_id:
          type: integer
        event_team_id:
          type: integer
        id:
          type: integer
        notifier_id:
          type: integer
        schedule_id:
          type: integer
        status:
          enum:
            - PENDING
            - ACCEPTED
            - DECLINED
            - CHECKED_IN
          type: string
        status_date_modified:
          format: date-time
          type: string
        status_reason:
          type: string
        volunteer:
          $ref: "#/components/schemas/VolunteerSerializer"
      type: object
    AssignmentStatus:
      enum:
        - PENDING
        - ACCEPTED
        - DECLINED
        - CHECKED_IN
      type: string
    AssignmentSwapRequestBody:
      properties:
        status:
          enum:
            - PENDING
            - ACCEPTED
            - DECLINED
          type: string
      type: object
    AssignmentSwapSerializer:
      properties:
        context_data:
          properties:
            destination_assignment:
              $ref: "#/components/schemas/AssignmentSerializer"
            source_assignment:
              $ref: "#/components/schemas/AssignmentSerializer"
          type: object
        id:
          type: integer
        status:
          type: string
      type: object
    AssociatedTimeSerializer:
      properties:
        end:
          format: date-time
          type: string
        id:
          type: integer
        name:
          type: string
        start:
          format: date-time
          type: string
      type: object
    AttendanceSummarySerializer:
      allOf:
        - $ref: "#/components/schemas/BasicEventOccurrenceSerializer"
        - properties:
            email_to:
              enum:
                - LEADERS
                - MEMBERS
                - NONE
              type: string
            notes:
              type: string
            people_information:
              type: string
            prayer_requests:
              type: string
            status:
              enum:
                - MET
                - DID_NOT_MEET
                - NOT_REPORTED
              type: string
            topic:
              type: string
            total_attendance:
              type: integer
            visitors:
              type: integer
          type: object
    AvailableAssignmentSwapSerializer:
      properties:
        category_id:
          type: integer
        context_data:
          properties:
            event:
              $ref: "#/components/schemas/BasicSchedulingEventSerializer"
            individual:
              properties:
                id:
                  type: integer
                name:
                  type: string
              type: object
            position:
              properties:
                id:
                  type: integer
                name:
                  type: string
              type: object
            team:
              properties:
                id:
                  type: integer
                name:
                  type: string
              type: object
          type: object
        date_notified:
          format: date-time
          type: string
        event_id:
          type: integer
        event_position_id:
          type: integer
        id:
          type: integer
        notifier_id:
          type: integer
        schedule_id:
          type: integer
        status:
          enum:
            - PENDING
            - ACCEPTED
            - DECLINED
            - CHECKED_IN
          type: string
        status_date_modified:
          format: date-time
          type: string
        status_reason:
          type: string
      type: object
    AvailableScheduleDateSerializer:
      properties:
        end:
          format: date-time
          type: string
        start:
          format: date-time
          type: string
      type: object
    BackgroundCheckSerializer:
      properties:
        expiration_date:
          format: date-time
          type: string
        expired:
          type: boolean
        id:
          description: Internal ID for the background check
          example: 1
          type: integer
        individual_id:
          description: ID for the person who is the subject of the background check
          example: 1
          type: integer
        package_name:
          description: Public display name for background check
          example: Commercial Driver
          type: string
        package_slug:
          description: Internal key for background check package
          example: commercial_driver
          type: string
        status:
          enum:
            - ACTIVE
            - EXPIRED
            - PENDING
          type: string
        status_date_modified:
          description: Day of last
          format: date-time
          type: string
        vendor_id:
          example: 1
          type: integer
      type: object
    Baptism:
      properties:
        date_performed:
          type: string
        godparents:
          items:
            $ref: "#/components/schemas/GodParents"
          type: array
        is_performed_here:
          type: boolean
        notes:
          type: string
        parish:
          items:
            $ref: "#/components/schemas/Parish"
          type: array
        status:
          enum:
            - COMPLETED
            - IN_PROGRESS
            - PENDING
          type: string
        type:
          example: BAPTISM
          type: string
      type: object
    BaseIndividualEvent:
      properties:
        comment:
          type: string
        quantity:
          description: The quantity of people included in the rsvp
          type: integer
      type: object
    BaseIndividualEventSerializer:
      allOf:
        - $ref: "#/components/schemas/BaseIndividualEvent"
        - properties:
            event_id:
              type: integer
            individual_id:
              type: integer
          type: object
    BaseIndividualEventStatuses:
      properties:
        status:
          description: The individual's status for the event
          enum:
            - GOING
            - MAYBE
            - NOT_GOING
          type: string
      type: object
    BaseResourceSerializer:
      properties:
        campuse_id:
          type: integer
        description:
          type: string
        grouping:
          properties:
            id:
              type: integer
            name:
              type: string
          type: object
        id:
          type: integer
        listed:
          type: boolean
        name:
          type: string
        notify_leaders_of_approval_groups:
          type: boolean
      type: object
    BasicCOASerializer:
      properties:
        amount:
          description: in cents
          type: integer
        id:
          type: integer
        name:
          type: string
      type: object
    BasicCampusSerializer:
      properties:
        actions:
          properties:
            can_create_individuals:
              $ref: "#/components/schemas/Action"
            can_edit_schedules:
              $ref: "#/components/schemas/Action"
            can_give:
              $ref: "#/components/schemas/Action"
            can_perform_volunteer_checkin:
              $ref: "#/components/schemas/Action"
            can_split_gifts:
              $ref: "#/components/schemas/Action"
            can_view_all_events_admin_calendar:
              $ref: "#/components/schemas/Action"
            can_view_campus_wide_calendar:
              $ref: "#/components/schemas/Action"
            can_view_draft_events_calendar:
              $ref: "#/components/schemas/Action"
            can_view_facilities_calendar:
              $ref: "#/components/schemas/Action"
          type: object
        country:
          type: string
        distance:
          format: float
          type: number
        id:
          type: integer
        locale:
          type: string
        name:
          type: string
        public_gift_message:
          type: string
        timezone:
          type: string
      type: object
    BasicChurchSerializer:
      properties:
        api_base_url:
          type: string
        base_url:
          type: string
        features:
          items:
            type: string
          type: array
        id:
          type: integer
        is_fake:
          type: boolean
        master_ecg_id:
          type: string
        name:
          example: Church Partner
          type: string
        public_find_group_name:
          type: string
        subdomain:
          type: string
        urls:
          example:
            api_base: https://...
            base: https://...
            calendar_ical: https://...
            events: https://...
            events_public: https://...
            forgot_password: https://...
            forms: https://...
            forms_public: https://...
            giving: https://...
            giving_public: https://...
            groups: https://...
            groups_public: https://...
            login: https://...
            needs: https://...
            needs_public: https://...
            sign_up: https://...
          properties: {}
          type: object
        welcomeText:
          type: string
      type: object
    BasicChurchUrls:
      properties:
        api_base:
          type: string
        base:
          type: string
        calendar_ical:
          type: string
        events:
          type: string
        events_public:
          type: string
        forgot_password:
          type: string
        forms:
          type: string
        forms_public:
          type: string
        giving:
          type: string
        giving_public:
          type: string
        groups:
          type: string
        groups_public:
          type: string
        login:
          type: string
        needs:
          type: string
        needs_public:
          type: string
        sign_up:
          type: string
      type: object
    BasicCountrySerializer:
      properties:
        display_name:
          type: string
        iso:
          type: string
        iso3:
          type: string
        name:
          type: string
      type: object
    BasicCriteriaSerializer:
      properties:
        id:
          type: string
        type:
          type: string
      type: object
    BasicCustomFieldSerializer:
      properties:
        admin_only:
          type: boolean
        choices:
          items:
            allOf:
              - $ref: "#/components/schemas/BasicListSerializer"
            type: object
          type: array
        domain:
          enum:
            - INDIVIDUAL
          type: string
        id:
          type: string
        label:
          type: string
        type:
          enum:
            - DATE
            - TEXT
            - PULLDOWN
          type: string
      type: object
    BasicDepartmentSerializer:
      properties:
        coach_term:
          type: string
        coach_term_plural:
          type: string
        director_term:
          type: string
        director_term_plural:
          type: string
        id:
          type: integer
        name:
          type: string
        owner_id:
          type: integer
      type: object
    BasicEventAttendanceSerializer:
      properties:
        active:
          type: integer
        allergies:
          type: string
        campus_id:
          type: integer
        checkin:
          format: date-time
          type: string
        checkin_id:
          type: integer
        checkout:
          format: date-time
          type: string
        checkout_guardian_name:
          type: string
        confirmed_no_allergies:
          type: integer
        event_id:
          type: integer
        event_name:
          type: string
        first_name:
          type: string
        group_id:
          type: integer
        group_name:
          type: string
        images:
          items:
            type: string
          type: array
        individual_id:
          type: integer
        is_leader:
          type: integer
        last_name:
          type: string
        name:
          type: string
        occurrence:
          format: date-time
          type: string
        pager:
          type: string
        primary_contact_first_name:
          type: string
        primary_contact_id:
          type: integer
        primary_contact_last_name:
          type: string
        primary_contact_name:
          type: string
        primary_contact_phone_mobile:
          type: string
        room_description:
          type: string
        room_name:
          type: string
        school_grade_id:
          type: integer
        security_code:
          type: string
        spouse_first_name:
          type: string
        spouse_id:
          type: integer
        spouse_last_name:
          type: string
        spouse_name:
          type: string
        spouse_phone_mobile:
          type: string
        temporary_contact_name:
          type: string
        temporary_contact_phone_mobile:
          type: string
        time:
          type: string
      type: object
    BasicEventOccurrenceSerializer:
      properties:
        end:
          format: date-time
          type: string
        event:
          $ref: "#/components/schemas/BasicEventWithGroupSerializer"
        event_id:
          example: 123
          type: integer
        occurrence:
          pattern: /\d{8}/gm
          type: string
        start:
          format: date-time
          type: string
      type: object
    BasicEventPositionSerializer:
      properties:
        assignments:
          items:
            $ref: "#/components/schemas/AssignmentSerializer"
          type: array
        category_id:
          type: integer
        event_position_associated_times:
          items:
            $ref: "#/components/schemas/EventPositionAssociatedTimeSerializer"
          type: array
        event_team_id:
          type: integer
        id:
          type: integer
        is_open:
          type: boolean
        needed:
          type: integer
        position:
          $ref: "#/components/schemas/BasicSchedulingPositionSerializer"
        position_id:
          type: integer
        quanitity:
          type: integer
        schedule_id:
          type: integer
        should_print_checkin_label:
          type: boolean
      type: object
    BasicEventSerializer:
      properties:
        address:
          $ref: "#/components/schemas/AddressSerializer"
        attend_max_quantity:
          type: string
        campus_id:
          example: 1
          type: integer
        checkin:
          $ref: "#/components/schemas/CheckinObject"
        checkin_label_quantity:
          type: integer
        checkin_label_type:
          enum:
            - NONE
            - NAME
            - SECURE
          type: string
        cleanup:
          format: date-time
          type: string
        description:
          type: string
        end:
          format: date-time
          type: string
        guest_counts:
          properties:
            going:
              type: integer
            maybe:
              type: integer
            not_going:
              type: integer
            not_responded:
              type: integer
            requesting:
              type: integer
          type: object
        id:
          example: 123
          type: integer
        images:
          $ref: "#/components/schemas/Images"
        name:
          example: Guy Fawkes Day
          type: string
        phone:
          type: string
        recur_end_date:
          format: date-time
          type: string
        recurs:
          type: boolean
        room_description:
          type: string
        room_ratio:
          type: string
        setup:
          format: date-time
          type: string
        start:
          format: date-time
          type: string
      type: object
    BasicEventSummarySerializer:
      properties:
        email_sent:
          format: date
          type: string
        email_to:
          type: string
        end:
          format: date
          type: string
        event_id:
          type: integer
        notes:
          type: string
        occurrence:
          type: string
        people_information:
          type: string
        prayer_requests:
          type: string
        start:
          format: date
          type: string
        status:
          type: string
        topic:
          type: string
        total_attendance:
          type: integer
        visitors:
          type: integer
      type: object
    BasicEventWithGroupSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicEventSerializer"
        - properties:
            group:
              properties:
                id:
                  example: "123"
                  type: string
                name:
                  example: My Group
                  type: string
              type: object
          type: object
    BasicFamilyProfileSerializer:
      properties:
        address:
          $ref: "#/components/schemas/AddressSerializer"
        id:
          type: integer
        images:
          $ref: "#/components/schemas/Images"
        last_name:
          type: string
        message:
          description: visible only when can_edit_checkin_message is TRUE
          type: string
      type: object
    BasicFinancialSettingsSerializer:
      properties:
        allow_credit_card:
          type: boolean
        allow_public_giving:
          type: boolean
        organization_id:
          type: integer
        system_wide_financials:
          enum:
            - ADMIN
          type: string
      type: object
    BasicFormManagerSerializer:
      properties:
        form:
          $ref: "#/components/schemas/BasicFormSerializer"
        form_id:
          type: integer
        manager:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        manager_id:
          type: integer
      type: object
    BasicFormResponseSerializer:
      properties:
        created:
          format: date-time
          type: string
        form:
          $ref: "#/components/schemas/BasicFormSerializer"
        form_id:
          type: integer
        id:
          type: integer
        individual_id:
          type: integer
        payment_status:
          enum:
            - PAID
            - NOT_PAID
            - NA
          type: string
      type: object
    BasicFormSerializer:
      properties:
        actions:
          properties:
            can_edit_form:
              $ref: "#/components/schemas/Action"
            can_respond_to_form:
              $ref: "#/components/schemas/Action"
            can_view_form:
              $ref: "#/components/schemas/Action"
          type: object
        campus_id:
          type: integer
        description:
          type: string
        end:
          format: date-time
          type: string
        id:
          type: integer
        manager_count:
          type: integer
        public:
          type: boolean
        start:
          format: date-time
          type: string
        status:
          $ref: "#/components/schemas/FormStatus"
        title:
          type: string
        url:
          example: https://stable.cchchurch.com/goto/forms/1/responses/new
          type: string
      type: object
    BasicGroupEventOccurrenceSerializer:
      properties:
        end:
          format: date-time
          type: string
        event:
          $ref: "#/components/schemas/BasicEventSerializer"
        event_id:
          example: 123
          type: integer
        occurrence:
          pattern: /\d{8}/gm
          type: string
        start:
          format: date-time
          type: string
      type: object
    BasicGroupSerializer:
      properties:
        campus_id:
          type: integer
        coach_id:
          type: integer
        department:
          properties:
            id:
              type: integer
          type: object
        director_id:
          type: integer
        group_type:
          $ref: "#/components/schemas/idName"
        id:
          type: integer
        images:
          $ref: "#/components/schemas/Images"
        inactive:
          example: false
          type: boolean
        interaction_type:
          $ref: "#/components/schemas/GroupInteractionType"
        main_leader:
          $ref: "#/components/schemas/MainLeaderSerializer"
        membership_type:
          enum:
            - OPEN_TO_ALL
            - REQUEST_REQUIRED
          type: string
        name:
          example: Small Group
          type: string
        owner_id:
          type: integer
        public_signup_form:
          $ref: "#/components/schemas/BasicFormSerializer"
      type: object
    BasicIndividualEventPositionSerializer:
      properties:
        alerts:
          items:
            type: string
          type: array
        event_position:
          allOf:
            - $ref: "#/components/schemas/BasicEventPositionSerializer"
            - properties:
                end:
                  type: string
                start:
                  type: string
              type: object
          type: object
        individual_id:
          type: integer
      type: object
    BasicIndividualEventsProfileWithEventSerializer:
      properties:
        comment:
          type: string
        event:
          $ref: "#/components/schemas/BasicEventSerializer"
        event_id:
          type: integer
        individual_id:
          type: integer
        quantity:
          type: integer
        status:
          enum:
            - REQUESTING
            - GOING
            - NOT_GOING
            - MAYBE
            - NOT_RESPONDED
          type: string
      type: object
    BasicIndividualEventsProfileWithIndividualSerializer:
      properties:
        comment:
          type: string
        event_id:
          type: integer
        individual:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        individual_id:
          type: integer
        quantity:
          type: integer
        status:
          enum:
            - REQUESTING
            - GOING
            - NOT_GOING
            - MAYBE
            - NOT_RESPONDED
          type: string
      type: object
    BasicIndividualGroupsProfileSerializer:
      properties:
        date_added:
          format: date-time
          type: string
        group_id:
          type: integer
        individual:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        individual_id:
          type: integer
        receive_sms:
          type: boolean
        status:
          $ref: "#/components/schemas/IndividualGroupStatus"
      type: object
    BasicIndividualGroupsProfileWithGroupSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicIndividualGroupsProfileSerializer"
        - properties:
            actions:
              properties:
                can_edit_individual_group_communication_settings:
                  $ref: "#/components/schemas/Action"
                can_join_group:
                  $ref: "#/components/schemas/Action"
                can_leave_group:
                  $ref: "#/components/schemas/Action"
              type: object
            group:
              $ref: "#/components/schemas/BasicGroupSerializer"
          title: BasicIndividualGroupsProfileWithGroupSerializer
          type: object
    BasicIndividualMetricSerializer:
      properties:
        count:
          type: integer
        id:
          type: integer
        start:
          format: date
          type: string
      type: object
    BasicIndividualMetricSummarySerializer:
      properties:
        first:
          format: date
          type: string
        latest:
          format: date
          type: string
      type: object
    BasicIndividualProfileSerializer:
      properties:
        active:
          type: boolean
        addresses:
          properties:
            home:
              $ref: "#/components/schemas/AddressSerializer"
            mailing:
              $ref: "#/components/schemas/AddressSerializer"
            work:
              $ref: "#/components/schemas/AddressSerializer"
          title: Addresses
          type: object
        approval_status_modifier_id:
          type: string
        birthday:
          example: 2011-10-27T00:00:00.000Z
          format: date
          type: string
        campus_id:
          type: integer
        created:
          format: date
          type: string
        date_child_work_start:
          format: date
          type: string
        date_child_work_stop:
          format: date
          type: string
        deceased:
          format: date
          type: string
        denied_status_reason:
          type: string
        email:
          example: hunter.davis@testing.com
          type: string
        email_unsubscribed:
          type: boolean
        email_unsubscribed_reason:
          description: The reason a person was unsubscribed
          enum:
            - API_UNSUBSCRIBED
            - DOMAIN_UNSUBSCRIBED
            - SITE_UNSUBSCRIBED
          type: string
        family_id:
          type: integer
        family_position:
          description: The position of the individual in the family
          enum:
            - PRIMARY_CONTACT
            - SPOUSE
            - CHILD
            - OTHER
          type: string
        first_name:
          example: Hunter
          type: string
        gender:
          description: The gender of the individual
          enum:
            - MALE
            - FEMALE
          type: string
        id:
          type: integer
        images:
          $ref: "#/components/schemas/Images"
        is_child_work_approved:
          type: boolean
        last_name:
          example: Davis
          type: string
        legal_first_name:
          type: string
        marital_status:
          description: The marital status of the individual
          enum:
            - MARRIED
            - SINGLE
            - WIDOWED
            - DIVORCED
            - SEPARATED
          type: string
        membership_type_id:
          type: integer
        middle_name:
          type: string
        name:
          example: Hunter Davis
          type: string
        name_prefix:
          example: Dr.
          type: string
        name_suffix:
          example: Sr.
          type: string
        phone:
          properties:
            fax:
              type: string
            home:
              type: string
            mobile:
              type: string
            mobile_carrier_id:
              type: string
            pager:
              type: string
            work:
              type: string
          title: Phone
          type: object
        preferred_number:
          $ref: "#/components/schemas/PreferredNumberTypes"
      type: object
    BasicIndividualsChangeSetSerializer:
      properties:
        category:
          enum:
            - ADMIN
            - CONTACT
            - CUSTOM
            - FAMILY
            - MEMBERSHIP
            - NAME
            - PERSONAL
            - SYSTEM
          type: string
        field:
          type: string
        previous:
          type: string
        updated:
          type: string
      type: object
    BasicIndividualsCustomFieldsSerializer:
      description: >
        The id field will be of the form "TYPE_ID" where TYPE is one of the
        following and determines the accepted format for the value property:

          | id                                  | value               |
          |-------------------------------------|---------------------|
          | text:individual/{id:0-9+}           | string              |
          | date:individual/{id:0-9+}           | ISO8601 date string |
          | option:individual/{id:0-9+}         | integer             |
      properties:
        id:
          type: string
        value:
          type: string
      type: object
    BasicLeadershipRoleSerializer:
      properties:
        assignees:
          items:
            $ref: "#/components/schemas/BasicIndividualProfileSerializer"
          type: array
        description:
          type: string
        id:
          type: integer
        identifier:
          type: string
        name:
          type: string
        status:
          enum:
            - ENABLED
            - DISABLED
          type: string
      type: object
    BasicListSerializer:
      $ref: "#/components/schemas/idName"
    BasicMobileCarrierSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicListSerializer"
        - properties:
            major:
              type: boolean
          type: object
    BasicNeedDetailsSerializer:
      properties:
        address:
          $ref: "#/components/schemas/AddressSerializer"
        coordinator:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        description:
          type: string
        end_Date:
          format: date-time
          type: string
        group_id:
          type: integer
        id:
          type: integer
        items_taken:
          type: integer
        name:
          type: string
        total_items:
          type: integer
      type: object
    BasicNeedSerializer:
      properties:
        coordinator:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        coordinator_id:
          type: integer
        external_listed:
          type: boolean
        group:
          $ref: "#/components/schemas/BasicGroupSerializer"
        group_id:
          type: integer
        id:
          type: integer
        items_count:
          type: integer
        items_taken:
          type: integer
        listed:
          type: boolean
        name:
          type: string
      type: object
    BasicNoteSerializer:
      properties:
        can_delete_note:
          $ref: "#/components/schemas/Action"
        can_edit_note:
          $ref: "#/components/schemas/Action"
        context:
          enum:
            - GROUP
            - DEPARTMENT
            - PROCESS_QUEUE
            - GENERAL
          type: string
        context_id:
          type: integer
        context_object:
          description: >-
            The type property will be present, and the other keys will be
            present depending on the value of the type
          properties:
            department:
              $ref: "#/components/schemas/BasicDepartmentSerializer"
            group:
              $ref: "#/components/schemas/BasicGroupSerializer"
            individual_queue:
              $ref: "#/components/schemas/BasicQueueSerializer"
            type:
              enum:
                - GROUP
                - DEPARTMENT
                - PROCESS_QUEUE
                - GENERAL
              type: string
          type: object
        creator:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        date:
          format: date
          type: string
        hidden_process:
          type: boolean
        id:
          type: integer
        individual_id:
          type: integer
        note:
          type: string
        sharing_level:
          enum:
            - PRIVATE
            - CONTEXT_LEADERS
            - HIDDEN_CONTEXT_LEADERS
            - ALL_LEADERS
          type: string
      type: object
    BasicNoteWithIndividualSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicNoteSerializer"
        - properties:
            individual:
              $ref: "#/components/schemas/BasicIndividualProfileSerializer"
          type: object
    BasicPledgeSerializer:
      properties:
        campus_id:
          type: integer
        coa:
          $ref: "#/components/schemas/BasicCOASerializer"
        created:
          format: date
          type: string
        expected:
          description: in cents
          type: integer
        id:
          type: integer
        paid:
          description: in cents
          type: integer
        pledged:
          description: in cents
          type: integer
        recurrence:
          properties:
            end:
              format: date
              type: string
            frequency:
              type: string
          type: object
        start:
          format: date
          type: string
        total:
          description: in cents
          type: integer
      type: object
    BasicProcessSerializer:
      properties:
        archived:
          type: boolean
        campus_id:
          type: integer
        hidden:
          type: boolean
        id:
          type: integer
        managers:
          items:
            type: string
          type: array
        name:
          type: string
        owner_id:
          type: integer
        process_managers:
          items:
            $ref: "#/components/schemas/ProcessManagerDetail"
          type: array
        status:
          $ref: "#/components/schemas/ProcessStatusType"
      type: object
    BasicQueueSerializer:
      properties:
        automations:
          $ref: "#/components/schemas/ProcessQueueAutomationDetail"
        children:
          type: boolean
        description:
          type: string
        id:
          type: integer
        instructions:
          type: string
        name:
          type: string
        order_by:
          type: integer
        process:
          $ref: "#/components/schemas/BasicProcessSerializer"
        process_id:
          type: integer
      type: object
    BasicResultsActionSerializer:
      properties:
        result_data:
          properties: {}
          type: object
        result_message:
          properties: {}
          type: object
        send_completion_message:
          type: boolean
        status:
          type: string
      type: object
    BasicScheduleSerializer:
      properties:
        allowed_signup_type:
          type: boolean
        category_id:
          type: integer
        end:
          format: date-time
          type: string
        id:
          type: integer
        name:
          type: string
        needed:
          type: integer
        same_people_serve_all_times:
          type: boolean
        start:
          format: date-time
          type: string
      type: object
    BasicScheduledGiftSerializer:
      properties:
        campus_id:
          type: integer
        created:
          format: date
          type: string
        id:
          type: integer
        inactive:
          example: false
          type: boolean
        merchant:
          properties:
            notes:
              type: string
            schedule_id:
              type: string
            status:
              type: string
            transaction_id:
              type: string
          type: object
        next:
          format: date
          type: string
        payment_method_type:
          description: The type of card used, if available
          enum:
            - VISA
            - MASTERCARD
            - DISCOVER
            - AMERICAN_EXPRESS
            - OTHER
          type: string
        payment_type:
          description: The type of the transaction
          enum:
            - CREDIT
            - ACH
          type: string
        recurrence:
          properties:
            end:
              format: date
              type: string
            frequency:
              type: string
            interval:
              type: integer
            month_days:
              description: array of integers
              example: ""
              type: array
            times:
              type: integer
            week_days:
              description: array of weekdays
              example: ""
              type: array
          type: object
        remaining:
          type: integer
        splits:
          items:
            allOf:
              - properties:
                  coa:
                    $ref: "#/components/schemas/BasicCOASerializer"
                type: object
            type: object
          type: array
        start:
          format: date
          type: string
        stopped:
          format: date
          type: string
        total:
          description: in cents
          type: integer
      type: object
    BasicSchedulingEventSerializer:
      properties:
        end:
          format: date-time
          type: string
        id:
          type: integer
        name:
          type: string
        recurrence_rule:
          type: string
        service_plan_id:
          type: integer
        serving_rotation_id:
          type: integer
        start:
          format: date-time
          type: string
      type: object
    BasicSchedulingPositionSerializer:
      properties:
        id:
          type: integer
        name:
          type: string
        team_id:
          type: integer
      type: object
    BasicSocialNetworkSerializer:
      properties:
        id:
          type: integer
        type:
          example: Facebook
          type: string
        url:
          example: http://www.facebook.com/%s
          type: string
      type: object
    CampusIdSerializer:
      properties:
        id:
          type: integer
      type: object
    CampusServiceSerializer:
      properties:
        campus_id:
          type: integer
        day_of_week:
          enum:
            - SUNDAY
            - MONDAY
            - TUESDAY
            - WEDNESDAY
            - THURSDAY
            - FRIDAY
            - SATURDAY
          type: string
        end:
          format: time
          type: string
        id:
          type: integer
        start:
          format: time
          type: string
      type: object
    CategorySerializer:
      properties:
        actions:
          properties:
            can_delete_category:
              $ref: "#/components/schemas/Action"
            can_edit_category:
              $ref: "#/components/schemas/Action"
          type: object
        allowed_replacement_type:
          enum:
            - NONE
            - CATEGORY
            - TEAM
            - POSITION
          type: string
        archived:
          type: boolean
        campus:
          $ref: "#/components/schemas/BasicCampusSerializer"
        child_work_approved_required:
          type: boolean
        default_assignment_status:
          enum:
            - PENDING
            - ASSIGNED
          type: string
        end:
          format: date-time
          type: string
        has_service_plans:
          type: boolean
        has_serving_rotations:
          type: boolean
        id:
          type: integer
        name:
          type: string
        organizer:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
          deprecated: true
        start:
          format: date-time
          type: string
        teams:
          items:
            $ref: "#/components/schemas/TeamSerializer"
          type: array
      type: object
    CheckinAnnouncementObject:
      properties:
        body:
          example: <p>This is the body</p>
          format: html
          type: string
        source:
          enum:
            - EVENT
            - SETUP
          type: string
        source_id:
          example: 123
          type: integer
        title:
          example: Announcement
          type: string
      type: object
    CheckinObject:
      properties:
        announcement:
          $ref: "#/components/schemas/CheckinAnnouncementObject"
        attend_max_quantity:
          type: integer
        checkin_label_quantity:
          type: integer
        checkin_label_type:
          enum:
            - NONE
            - NAME
            - SECURE
          type: string
        checkin_type:
          enum:
            - NONE
            - CHECKIN
            - PRECHECK
            - INSTANT
          type: string
        grouping_id:
          example: 1
          type: integer
        room_description:
          type: string
        room_ratio:
          type: integer
      type: object
    CheckrOrganizationSerializer:
      properties:
        expiration_policy:
          type: integer
        integrations:
          items:
            type: string
          type: array
      type: object
    ColumnOrder:
      properties:
        column:
          type: string
        direction:
          enum:
            - asc
            - desc
          type: string
      type: object
    CompleteQueueIndividualRequest:
      properties:
        automations:
          items:
            $ref: "#/components/schemas/ProcessQueueAutomationRequestTypes"
          type: array
        completed:
          format: date
          type: string
      type: object
    CreateFamilyRequest:
      properties:
        address:
          properties:
            city:
              type: string
            country_iso:
              type: string
            state:
              type: string
            street:
              type: string
            zip:
              type: string
          type: object
        campus_id:
          type: integer
        individual_id:
          description: >-
            When provided, will create a new family with this individual as the
            primary contact (all other fields ignored)
          type: integer
        last_name:
          type: string
        members:
          items:
            $ref: "#/components/schemas/IndividualDetailsRequestSerializer"
          type: array
        message:
          description: valid only when can_edit_checkin_message is TRUE
          type: string
        phone:
          type: string
      type: object
    CreateGroupMessageCommentRequest:
      properties:
        body:
          type: string
        subject:
          type: string
      type: object
    CreateIndividualEventsSerializer:
      properties:
        assignments:
          description: Map individual_id to 'CREATED'/'UPDATED'
          properties: {}
          type: object
        assignments_count:
          type: integer
      type: object
    CreateQueueIndividualRequest:
      properties:
        assignee_id:
          type: integer
        individual_id:
          type: integer
        note:
          type: string
        status:
          enum:
            - NOT_STARTED
            - WAITING
            - IN_PROCESS
          type: string
      required:
        - individual_id
      type: object
    DepartmentDetailsSerializer:
      properties:
        campus_id:
          type: integer
        campus_name:
          type: string
        coach_id:
          type: integer
        coach_name:
          type: string
        coach_term:
          type: string
        department_name:
          type: string
        director_id:
          type: integer
        director_name:
          type: string
        director_term:
          type: string
        group_id:
          type: integer
        group_name:
          type: string
        id:
          type: integer
        owner_id:
          type: integer
        owner_name:
          type: string
      type: object
    DuplicateIndividualProfileSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        - properties:
            campus:
              properties:
                id:
                  type: integer
                name:
                  type: string
              type: object
            match_score:
              type: integer
            matches:
              description: >-
                matches to an individual have source and match keys, matches to
                params just have the matches
              properties:
                match:
                  description: The fields that match this user
                  items:
                    type: string
                  type: array
                source:
                  description: The fields that match the user being compared to
                  items:
                    type: string
                  type: array
              type: object
            spouse:
              $ref: "#/components/schemas/BasicIndividualProfileSerializer"
          type: object
    EventAttendanceMetricsSerializer:
      properties:
        total_attendees:
          type: integer
        unique_attendees:
          type: integer
        unique_leaders:
          type: integer
        unique_members:
          type: integer
        unique_non_members:
          type: integer
      type: object
    EventAttendanceSummarySerializer:
      properties:
        children:
          type: integer
        id:
          type: integer
        leaders:
          type: integer
        members:
          type: integer
        name:
          type: string
        total_leaders:
          type: integer
        total_members:
          type: integer
        type:
          type: string
        visitors:
          type: integer
      type: object
    EventAttendeesIndividualSerializer:
      properties:
        event_id:
          type: integer
        individual:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        individual_id:
          type: integer
        occurrence_date:
          format: date
          type: string
      type: object
    EventCandidateIndividualSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        - properties:
            attended:
              type: integer
          type: object
    EventCreate:
      allOf:
        - $ref: "#/components/schemas/EventCreateUpdate"
    EventCreateUpdate:
      properties:
        all_day:
          type: boolean
        apply_changes_to:
          enum:
            - ONLY_THIS_DATE
            - THIS_AND_FUTURE_DATES
            - ALL_DATES
          type: string
        approval_status_id:
          type: integer
        attend_max_quantity:
          example: 100
          type: integer
        checkin_announcement:
          properties:
            body:
              example: <p>This is the body</p>
              format: html
              type: string
            title:
              example: Announcement
              type: string
          type: object
        checkin_label_quantity:
          type: integer
        checkin_label_type:
          enum:
            - NONE
            - NAME
            - SECURE
          type: string
        checkin_type:
          enum:
            - NONE
            - CHECKIN
            - PRECHECK
            - INSTANT
          type: string
        cleanup:
          format: date-time
          type: string
        confirm_change:
          description: >-
            To confirm if a change is being "forced" (overiding any warnding)
            set to true.
          type: boolean
        description:
          format: html
          type: string
        end:
          format: date-time
          type: string
        group_id:
          example: 123
          type: integer
        grouping_id:
          example: 1
          type: integer
        location_city:
          type: string
        location_name:
          type: string
        location_state:
          type: string
        location_street:
          type: string
        location_zip:
          type: string
        name:
          example: Guy Fawkes Day (Updated)
          type: string
        occurrence:
          example: "20210101"
          pattern: /\d{8}/gm
          type: string
        owner_id:
          example: 1
          type: integer
        phone:
          example: 19495551234
          pattern: ^\+[1-9]\d{1,14}$
          type: string
        recur_end_date:
          format: date-time
          type: string
        recur_freq_modifier:
          enum:
            - SU
            - MO
            - TU
            - WE
            - TH
            - FR
            - SA
          type: string
        recur_frequency:
          description: Daily = D | Weekly = W | Monthly by Day = MO | Monthly by Date = MP
          enum:
            - D
            - W
            - MO
            - MP
          type: string
        recur_interval:
          type: integer
        recurs:
          type: boolean
        room_description:
          example: The Escape Room
          type: string
        room_ratio:
          example: 1
          type: integer
        setup:
          format: date-time
          type: string
        start:
          format: date-time
          type: string
        type_id:
          description: Require leader approval or form response to get on the guest list
          type: integer
        uses_resources:
          type: boolean
      type: object
    EventFileSerializer:
      properties:
        created:
          format: date-time
          type: string
        description:
          type: string
        doc_id:
          type: integer
        file_name:
          type: string
        file_size:
          type: integer
        id:
          type: integer
        label:
          type: string
        mime_type:
          type: string
        updated:
          format: date-time
          type: string
        url:
          type: string
      type: object
    EventGuestSerializer:
      allOf:
        - $ref: "#/components/schemas/AdminIndividualEventStatuses"
        - $ref: "#/components/schemas/BaseIndividualEventSerializer"
        - properties:
            individual:
              $ref: "#/components/schemas/BasicIndividualProfileSerializer"
          type: object
    EventPositionAssociatedTimeSerializer:
      properties:
        associated_time_id:
          type: integer
        category_id:
          type: integer
        event_id:
          type: integer
        event_position_id:
          type: integer
        event_team_id:
          type: integer
        is_required:
          type: boolean
        position_id:
          type: integer
        schedule_id:
          type: integer
      type: object
    EventPositionSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicEventPositionSerializer"
        - properties:
            assignments:
              items:
                $ref: "#/components/schemas/AssignmentSerializer"
              type: array
          type: object
    EventRangeTypeFilter:
      enum:
        - ALL
        - PAST
        - CURRENT
        - FUTURE
      type: string
    EventResourceSerializer:
      properties:
        event_id:
          type: integer
        quantity:
          type: integer
        resource:
          $ref: "#/components/schemas/ResourceSerializer"
        resource_id:
          type: integer
        setup_notes:
          type: string
        status:
          enum:
            - PENDING
            - APPROVED
          type: string
      type: object
    EventRoomSerializer:
      properties:
        event_id:
          type: integer
        include_head_table:
          type: boolean
        layout:
          enum:
            - BANQUET_RECTANGLES
            - BANQUET_ROUNDS
            - BOARDROOM
            - CHAIRS_CIRCLE
            - CHAIRS_SQUARE
            - CHAIRS_THEATER
            - CHAIRS_U_SHAPE
            - CLASSROOM_RECTANGLES
            - CLASSROOM_ROUNDS
            - HOLLOW_SQUARE
            - U_SHAPE
            - OTHER
          type: string
        primary_room:
          type: boolean
        resources:
          items:
            allOf:
              - $ref: "#/components/schemas/EventResourceSerializer"
            type: object
          type: array
        room:
          $ref: "#/components/schemas/RoomSerializer"
        room_id:
          type: integer
        setup_notes:
          type: string
        status:
          enum:
            - PENDING
            - APPROVED
          type: string
      type: object
    EventTeamSerializer:
      properties:
        event_id:
          type: integer
        event_positions:
          items:
            $ref: "#/components/schemas/EventPositionSerializer"
          type: array
        id:
          type: integer
        needed:
          type: integer
        quantity:
          type: integer
        team:
          $ref: "#/components/schemas/TeamSerializer"
        team_id:
          type: integer
      type: object
    EventUnableToCreate:
      properties:
        errors:
          items:
            example: ""
            type: string
          type: array
        status_type:
          example: null
          type: string
      type: object
    EventUnableToUpdate:
      properties:
        errors:
          items:
            example: >-
              re-request, for this date only, available rooms & resources that
              require approval
            type: string
          type: array
        status_type:
          example: NOT_ACCEPTED
          type: string
      type: object
    EventUpdate:
      allOf:
        - $ref: "#/components/schemas/EventCreateUpdate"
    FamilyGivingMetricSerializer:
      properties:
        count:
          description: family total gifts
          type: integer
        date:
          format: date
          type: string
        family_id:
          type: integer
        members:
          items:
            $ref: "#/components/schemas/BasicIndividualMetricSerializer"
          type: array
      type: object
    FamilyProfileSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicFamilyProfileSerializer"
        - properties:
            members:
              items:
                $ref: "#/components/schemas/IndividualDetailsSerializer"
              type: array
          type: object
    FileSerializer:
      properties:
        created:
          format: date-time
          type: string
        description:
          type: string
        file_name:
          type: string
        file_size:
          type: integer
        id:
          type: integer
        label:
          type: string
        mime_type:
          type: string
        updated:
          format: date-time
          type: string
        url:
          type: string
      type: object
    FirstCommunion:
      properties:
        date_performed:
          type: string
        is_performed_here:
          type: boolean
        notes:
          type: string
        parish:
          items:
            $ref: "#/components/schemas/Parish"
          type: array
        status:
          enum:
            - COMPLETED
            - IN_PROGRESS
            - PENDING
          type: string
        type:
          example: FIRST COMMUNION
          type: string
      type: object
    FormAutomationRequest:
      properties:
        automation_type_id:
          type: integer
        automation_type_name:
          enum:
            - group
            - event
            - queue
            - new pos.
          type: string
        choice_id:
          type: integer
        condition_id:
          type: integer
        form_id:
          type: integer
        question_id:
          type: integer
        target_id:
          type: integer
      type: object
    FormAutomationSerializer:
      properties:
        choice_id:
          type: integer
        condition_id:
          type: integer
        form_id:
          type: integer
        id:
          type: integer
        question_id:
          type: integer
        target_id:
          type: integer
        type_id:
          type: integer
        type_name:
          enum:
            - group
            - event
            - queue
            - new pos.
          type: string
      type: object
    FormPaymentNeededSerializer:
      description: >
        The invoice_id, payment_status, and payment_url will be returned when
        payment is needed for a form response.


        Make sure you redirect to the payment_url in order to finish the payment
        process to save the form response.
      properties:
        invoice_id:
          type: integer
        payment_status:
          enum:
            - NEEDS_PAYMENT
          type: string
        payment_url:
          type: string
      type: object
    FormProfile:
      properties:
        explaination:
          type: string
        fields:
          items:
            $ref: "#/components/schemas/FormProfileField"
          type: array
        id:
          type: integer
        title:
          type: string
      type: object
    FormProfileField:
      properties:
        id:
          type: integer
        name:
          enum:
            - FIRST_NAME
            - LAST_NAME
            - EMAIL
            - MAILING_ADDRESS
            - MOBILE_PHONE
            - HOME_PHONE
            - WORK_PHONE
            - BIRTHDAY
            - GENDER
            - MARITAL_STATUS
          type: string
        required:
          type: boolean
      type: object
    FormQuestionSerializer:
      properties:
        admin_only:
          type: boolean
        choices:
          description: >-
            only for CHECKBOXES, DONATION_AMOUNT, PRIORITIZE, PRODUCT,
            PULLDOWN_MENU, RADIO_BUTTONS, SCALE
          items:
            properties:
              coa_id:
                description: only for DONATION_AMOUNT, PRODUCT
                type: integer
              disabled:
                type: boolean
              disabled_reasons:
                description: array of messages explaining why question choice is disabled
                items:
                  type: string
                type: array
              discountable:
                description: only for PRODUCT
                type: boolean
              id:
                description: choice id
                type: integer
              max_value:
                description: only for DONATION_AMOUNT, PRODUCT
                type: integer
              min_value:
                description: only for DONATION_AMOUNT, PRODUCT
                type: integer
              price:
                description: only for DONATION_AMOUNT, PRODUCT
                type: integer
              quantity_sold:
                description: only for DONATION_AMOUNT, PRODUCT
                type: integer
              tax_deductible:
                description: only for DONATION_AMOUNT, PRODUCT
                type: boolean
              total_available:
                description: only for DONATION_AMOUNT, PRODUCT
                type: integer
              value:
                type: string
            type: object
          type: array
        explaination:
          type: string
        form_id:
          description: the id of the form the question belongs to
          type: integer
        id:
          description: question id
          type: integer
        max_value:
          description: max_value will only exist for NUMBER question type
          type: integer
        min_value:
          description: min_value will only exist for NUMBER question type
          type: integer
        question:
          description: question header
          type: string
        range:
          description: only for SCALE
          items:
            properties:
              id:
                description: range id
                type: integer
              value:
                type: string
            type: object
          type: array
        required:
          type: boolean
        single_choice:
          type: boolean
        type:
          description: question type
          enum:
            - CHECKBOXES
            - DATE
            - DONATION_AMOUNT
            - FILE_UPLOAD
            - NUMBER
            - PAGE_BREAK
            - PARAGRAPH_TEXT
            - PRIORITIZE
            - PRODUCT
            - PULLDOWN_MENU
            - RADIO_BUTTONS
            - SCALE
            - SECTION_BREAK
            - SINGLE_LINE_TEXT
          type: string
      title: FormQuestionSerializer
      type: object
    FormRespondentSerializer:
      properties:
        actions:
          properties:
            can_edit_profile:
              $ref: "#/components/schemas/Action"
          type: object
        addresses:
          properties:
            mailing:
              $ref: "#/components/schemas/AddressSerializer"
          title: Addresses
          type: object
        campus_id:
          type: integer
        email:
          example: hunter.davis@testing.com
          type: string
        family_id:
          type: integer
        first_name:
          example: Hunter
          type: string
        gender:
          description: The gender of the individual
          enum:
            - MALE
            - FEMALE
          type: string
        id:
          type: integer
        last_name:
          example: Davis
          type: string
        marital_status:
          description: The marital status of the individual
          enum:
            - MARRIED
            - SINGLE
            - WIDOWED
            - DIVORCED
            - SEPARATED
          type: string
        name:
          example: Hunter Davis
          type: string
        phone:
          properties:
            home:
              type: string
            mobile:
              type: string
            mobile_carrier_id:
              type: string
            work:
              type: string
          title: Phone
          type: object
      type: object
    FormResponseRequest:
      properties:
        answers:
          items:
            properties:
              answer:
                description: >
                  The answer will equal one of the following based on the
                  question type:

                  * SINGLE_LINE_TEXT, PARAGRAPH_TEXT: `string`

                  * DATE: `ISO8601 date string`

                  * NUMBER: `integer`

                  * RADIO_BUTTONS, PULLDOWN_MENU: `integer` choice_id from the
                  question choices

                  * CHECKBOXES, PRIORITIZE: `[integer]` Array of choice_ids

                  * SCALE: `[{ choice_id: integer, scale_id: integer }]` Array
                  of choice_id, scale_id objects

                  * FILE_UPLOAD: `integer` file id (Upload to the POST /files
                  endpoint first and use the id returned)

                  * PRODUCT: `[{ choice_id: integer, quantity: integer }]`

                  * DONATION_AMOUNT: `{ choice_id: integer, amount: integer }`
                type: string
              question_id:
                type: integer
            type: object
          type: array
        individual_id:
          type: integer
        profile:
          properties:
            fields:
              items:
                properties:
                  answer:
                    description: >-
                      This property is an object for a mailing_address type
                      field
                    type: string
                  field_id:
                    type: integer
                type: object
              type: array
            update_individual:
              type: boolean
          type: object
      type: object
    FormSortBy:
      enum:
        - TITLE
        - DATE_CREATED
        - DAT_END
        - DATE_START
        - LAST_RESPONSE
        - MATCHED_RESPONSES
        - STATUS
        - TITLE
        - TOTAL_RESPONSES
        - UNMATCHED_RESPONSES
      type: string
    FormStatus:
      enum:
        - ACTIVE
        - SCHEDULED
        - UNPUBLISHED
        - EXPIRED
        - ARCHIVED
      type: string
    FullEventOccurrenceType:
      properties:
        checkin_label_quantity:
          type: integer
        checkin_label_type:
          type: string
        end:
          format: date-time
          type: string
        event:
          $ref: "#/components/schemas/FullEventSerializer"
        event_id:
          type: integer
        group_id:
          type: integer
        occurrence:
          pattern: /\d{8}/gm
          type: string
        start:
          format: date-time
          type: string
      type: object
    FullEventSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicEventSerializer"
        - properties:
            actions:
              properties:
                can_edit:
                  properties:
                    allowed:
                      type: boolean
                    reasons:
                      items:
                        example: ""
                        type: string
                      type: array
                  type: object
                can_view_guest_list:
                  properties:
                    allowed:
                      type: boolean
                    reasons:
                      items:
                        example: ""
                        type: string
                      type: array
                  type: object
              type: object
            all_day:
              type: boolean
            approval_status:
              example: APPROVED
              type: string
            approval_status_id:
              type: integer
            attendance:
              properties:
                occurrence_has:
                  type: boolean
                occurrence_has_after:
                  type: boolean
                occurrence_has_before:
                  type: boolean
                occurrence_last_with:
                  format: date-time
                  type: string
              type: object
            creator:
              $ref: "#/components/schemas/BasicIndividualProfileSerializer"
            date_created:
              format: date-time
              type: string
            date_modified:
              format: date-time
              type: string
            description:
              format: html
              type: string
            estimated_attendance:
              example: "0"
              type: string
            group:
              $ref: "#/components/schemas/BasicGroupSerializer"
            invitation_settings:
              properties:
                allow_additional_guests:
                  type: boolean
                attend_max_quantity:
                  type: integer
                notify_owner_of_status_changes:
                  type: boolean
                show_guest_list:
                  type: boolean
              type: object
            modifier:
              $ref: "#/components/schemas/BasicIndividualProfileSerializer"
            next_occurrence:
              nullable: true
              properties:
                end:
                  format: date-time
                  type: string
                occurrence:
                  type: string
                start:
                  format: date-time
                  type: string
              type: object
            owner:
              $ref: "#/components/schemas/BasicIndividualProfileSerializer"
            recurrence:
              properties:
                end:
                  format: date
                  type: string
                frequency:
                  type: string
                frequency_modifier:
                  type: string
                interval:
                  type: integer
              type: object
            registration:
              properties:
                closed:
                  type: boolean
                form_id:
                  type: integer
                url:
                  type: string
              type: object
            setup_notes:
              type: string
            type_id:
              type: integer
            use_campus_address:
              type: boolean
            uses_resources:
              type: boolean
          type: object
    FullFormResponseSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicFormResponseSerializer"
        - properties:
            answers:
              items:
                properties:
                  answer:
                    description: >
                      The answer will equal one of the following based on the
                      question type:

                      * SINGLE_LINE_TEXT, PARAGRAPH_TEXT: `string`

                      * DATE: `ISO8601 date string`

                      * NUMBER: `integer`

                      * RADIO_BUTTONS, PULLDOWN_MENU: `integer` choice_id from
                      the question choices

                      * CHECKBOXES, PRIORITIZE: `[integer]` Array of choice_ids

                      * SCALE: `[{ choice_id: integer, scale_id: integer }]`
                      Array of choice_id, scale_id objects

                      * FILE_UPLOAD: `integer` file id

                      * PRODUCT: `[{ choice_id: integer, quantity: integer }]`

                      * DONATION_AMOUNT: `{ choice_id: integer, amount: integer
                      }`
                    type: string
                  question_id:
                    type: integer
                type: object
              type: array
            confirmation_code:
              type: string
            confirmation_code_on:
              type: boolean
            confirmation_text:
              type: string
            payment:
              properties:
                discount:
                  properties:
                    amount:
                      type: integer
                    is_percentage:
                      type: boolean
                    value:
                      type: integer
                  type: object
                method:
                  enum:
                    - CREDIT_CARD
                    - CASH
                    - CHECK
                    - OTHER
                  type: string
                total:
                  type: integer
              type: object
            profile:
              properties:
                fields:
                  items:
                    properties:
                      answer:
                        description: >-
                          This property is an object for a mailing_address type
                          field
                        type: string
                      field_id:
                        type: integer
                    type: object
                  type: array
                update_individual:
                  type: boolean
              type: object
          title: FullFormResponseSerializer
          type: object
    FullFormSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicFormSerializer"
        - properties:
            authentication_required:
              type: boolean
            confirmation_text:
              type: string
            disabled:
              description: not implemented yet
              type: boolean
            files:
              items:
                $ref: "#/components/schemas/FileSerializer"
              type: array
            is_template:
              type: boolean
            profile:
              $ref: "#/components/schemas/FormProfile"
            show_confirmation_code:
              type: boolean
            total_form_pages:
              type: integer
            unavailable_message_description:
              type: string
            unavailable_message_title:
              type: string
          title: FullFormSerializer
          type: object
    FullGroupSerializer:
      properties:
        address:
          $ref: "#/components/schemas/AddressSerializer"
        area:
          $ref: "#/components/schemas/idName"
        campus_id:
          type: integer
        childcare:
          example: true
          type: boolean
        description:
          type: string
        full:
          example: false
          type: boolean
        group_type:
          $ref: "#/components/schemas/idName"
        id:
          type: integer
        images:
          $ref: "#/components/schemas/Images"
        inactive:
          example: false
          type: boolean
        interaction_type:
          $ref: "#/components/schemas/GroupInteractionType"
        listed:
          example: true
          type: boolean
        main_leader:
          $ref: "#/components/schemas/MainLeaderSerializer"
        meet_day:
          $ref: "#/components/schemas/idName"
        meet_time:
          $ref: "#/components/schemas/idName"
        member_count:
          example: 54
          type: integer
        membership_type:
          enum:
            - OPEN_TO_ALL
            - REQUEST_REQUIRED
          type: string
        name:
          example: Small Group
          type: string
      type: object
    GodParents:
      properties:
        isTrained:
          type: boolean
        name:
          type: string
      type: object
    GroupAttendanceGroupingsSerializer:
      properties:
        group_id:
          example: 1
          type: integer
        id:
          example: 123
          type: integer
        name:
          type: string
      type: object
    GroupInteractionType:
      enum:
        - MEMBERS_INTERACT
        - ANNOUNCE_ONLY
        - ADMINISTRATIVE
      type: string
    GroupMessageCommentSerializer:
      properties:
        body:
          type: string
        created:
          format: date-time
          type: string
        files:
          $ref: "#/components/schemas/FileSerializer"
        id:
          type: integer
        message_id:
          type: integer
      type: object
    GroupMessageRequestSerializer:
      properties:
        body:
          description: contents of message
          type: string
        from:
          items:
            type: string
          type: array
        locked:
          description: default false
          type: boolean
        pinned:
          description: default false
          type: boolean
        send_to:
          enum:
            - ALL_PARTICIPANTS
            - LEADERS_ONLY
          type: string
        subject:
          description: title of message
          type: string
      type: object
    GroupMessageSerializer:
      properties:
        actions:
          properties:
            can_comment:
              $ref: "#/components/schemas/Action"
            can_delete:
              $ref: "#/components/schemas/Action"
            can_edit:
              $ref: "#/components/schemas/Action"
          type: object
        body:
          type: string
        created:
          format: date-time
          type: string
        creator:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        files:
          $ref: "#/components/schemas/FileSerializer"
        id:
          type: integer
        leaders_only:
          type: boolean
        locked:
          type: boolean
        pinned:
          type: boolean
        recent_comments:
          $ref: "#/components/schemas/GroupMessageCommentSerializer"
        subject:
          type: string
        total_comments:
          type: integer
        view_count:
          type: integer
      type: object
    GroupMetricSerializer:
      properties:
        coach:
          description: Count of the groups where the individual is a coach
          type: integer
        director:
          description: Count of the groups where the individual is a director
          type: integer
        invited:
          description: Count of the groups that the individual has been invited
          type: integer
        leader:
          description: Count of the groups where the individual is a leader
          type: integer
        member:
          description: >-
            Count of the groups where the individual is a member.  Does not
            include other membership types.
          type: integer
        requesting:
          description: Count of the groups where the individual has requested to join
          type: integer
      type: object
    GroupSpecialDaysSerializer:
      properties:
        date:
          format: date
          type: string
        individuals:
          items:
            $ref: "#/components/schemas/BasicIndividualProfileSerializer"
          type: array
        type:
          enum:
            - birthday
            - anniversary
          type: string
      type: object
    GroupTextMessageRequestSerializer:
      properties:
        body:
          description: contents of text message
          type: string
      type: object
    GroupsHistoryMetricSerializer:
      properties:
        date:
          description: ISO 8601 year-month date
          format: date
          type: string
        leader:
          description: Count of the groups where the individual is a leader
          example: 3
          type: integer
        member:
          description: >-
            Count of the groups where the individual is a member.  Does not
            include other membership types.
          example: 7
          type: integer
      type: object
    Images:
      properties:
        large:
          type: string
        medium:
          type: string
        thumbnail:
          type: string
      type: object
    ImportError:
      properties:
        message:
          type: string
        row:
          type: integer
      type: object
    ImportSerializer:
      properties:
        errors:
          items:
            $ref: "#/components/schemas/ImportError"
          type: array
        rows:
          type: integer
        success:
          type: boolean
      type: object
    IndividualBlockoutDateSerializer:
      properties:
        end:
          format: date-time
          type: string
        id:
          type: integer
        individual_id:
          type: integer
        reason:
          type: string
        start:
          format: date-time
          type: string
      type: object
    IndividualContactInfoRequestSerializer:
      properties:
        email:
          example: hunter.davis@testing.com
          type: string
        first_name:
          example: Hunter
          type: string
        last_name:
          example: Davis
          type: string
        phone:
          properties:
            mobile:
              type: string
            mobile_carrier_id:
              type: string
          title: Phone
          type: object
      type: object
    IndividualDetailsRequestSerializer:
      properties:
        active:
          type: boolean
        addresses:
          properties:
            home:
              $ref: "#/components/schemas/AddressSerializer"
            mailing:
              $ref: "#/components/schemas/AddressSerializer"
            work:
              $ref: "#/components/schemas/AddressSerializer"
          title: Addresses
          type: object
        allergies:
          description: The allergies of the individual
          type: string
        baptized:
          description: >-
            If you are using the Sacraments feature, then the Sacraments API
            would be more effective and up-to-date alternative for surfacing
            baptism data
          type: boolean
        baptized_date:
          description: >-
            If you are using the Sacraments feature, then the Sacraments API
            would be more effective and up-to-date alternative for surfacing
            baptism data
          format: date
          type: string
        barcode:
          description: Individual's barcode for quick access
          type: string
        birthday:
          format: date
          type: string
        campus_id:
          type: integer
        church_service:
          items:
            type: integer
          type: array
        cid:
          type: string
        confirmed_no_allergies:
          description: Does this individual have allergies?
          enum:
            - NOT_SPECIFIED
          type: string
        custom_fields:
          items:
            $ref: "#/components/schemas/BasicIndividualsCustomFieldsSerializer"
          type: array
        deceased:
          format: date
          type: string
        email:
          example: hunter.davis@testing.com
          type: string
        email_unsubscribed:
          type: boolean
        email_unsubscribed_reason:
          description: The reason a person was unsubscribed
          enum:
            - BLOCKED
            - BOUNCED
            - DISENGAGED
            - DOMAIN_UNSUBSCRIBED
            - SITE_UNSUBSCRIBED
          type: string
        family_position:
          description: The position of the individual in the family
          enum:
            - PRIMARY_CONTACT
            - SPOUSE
            - CHILD
            - OTHER
          type: string
        first_name:
          example: Hunter
          type: string
        gender:
          description: The gender of the individual
          enum:
            - MALE
            - FEMALE
          type: string
        last_name:
          example: Davis
          type: string
        legal_first_name:
          type: string
        limited_access_user:
          type: boolean
        listed:
          type: boolean
        marital_status:
          description: The marital status of the individual
          enum:
            - MARRIED
            - SINGLE
            - WIDOWED
            - DIVORCED
            - SEPARATED
          type: string
        membership_start_date:
          format: date
          type: string
        membership_type_id:
          type: integer
        middle_name:
          example: Lee
          type: string
        phone:
          properties:
            fax:
              type: string
            home:
              type: string
            mobile:
              type: string
            mobile_carrier_id:
              type: string
            pager:
              type: string
            work:
              type: string
          title: Phone
          type: object
        preferred_number:
          $ref: "#/components/schemas/PreferredNumberTypes"
        prefix:
          example: Dr
          type: string
        reason_left_id:
          type: integer
        school_grade_id:
          type: integer
        school_id:
          type: integer
        suffix:
          example: Jr
          type: string
      type: object
    IndividualDetailsSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        - $ref: "#/components/schemas/ModifiedMetadata"
        - properties:
            actions:
              properties:
                can_add_individual_to_positions:
                  $ref: "#/components/schemas/Action"
                can_add_individual_to_process_queues:
                  $ref: "#/components/schemas/Action"
                can_change_limited_access_user:
                  $ref: "#/components/schemas/Action"
                can_create_form_response:
                  $ref: "#/components/schemas/Action"
                can_create_general_notes:
                  $ref: "#/components/schemas/Action"
                can_create_gift:
                  $ref: "#/components/schemas/Action"
                can_create_individual_message:
                  $ref: "#/components/schemas/Action"
                can_create_pledge:
                  $ref: "#/components/schemas/Action"
                can_create_transaction:
                  $ref: "#/components/schemas/Action"
                can_deny_pending_profiles:
                  $ref: "#/components/schemas/Action"
                can_edit_communication_preferences:
                  $ref: "#/components/schemas/Action"
                can_edit_deceased:
                  $ref: "#/components/schemas/Action"
                can_edit_full_profile:
                  $ref: "#/components/schemas/Action"
                can_edit_inactive:
                  $ref: "#/components/schemas/Action"
                can_edit_individual_file:
                  $ref: "#/components/schemas/Action"
                can_edit_login:
                  $ref: "#/components/schemas/Action"
                can_edit_pending_profiles:
                  $ref: "#/components/schemas/Action"
                can_edit_privacy_settings:
                  $ref: "#/components/schemas/Action"
                can_edit_profile:
                  $ref: "#/components/schemas/Action"
                can_edit_profile_admin:
                  $ref: "#/components/schemas/Action"
                can_manage_individual_serving:
                  $ref: "#/components/schemas/Action"
                can_mass_join_groups:
                  $ref: "#/components/schemas/Action"
                can_mass_leave_groups:
                  $ref: "#/components/schemas/Action"
                can_merge_as_loser:
                  $ref: "#/components/schemas/Action"
                can_merge_as_winner:
                  $ref: "#/components/schemas/Action"
                can_move_individual_transactions:
                  $ref: "#/components/schemas/Action"
                can_order_background_check:
                  $ref: "#/components/schemas/Action"
                can_read_individual_sacrament:
                  $ref: "#/components/schemas/Action"
                can_save_individual_sacrament:
                  $ref: "#/components/schemas/Action"
                can_view_background_checks:
                  $ref: "#/components/schemas/Action"
                can_view_contact_card:
                  $ref: "#/components/schemas/Action"
                can_view_individual:
                  $ref: "#/components/schemas/Action"
                can_view_individual_attendance:
                  $ref: "#/components/schemas/Action"
                can_view_individual_files:
                  $ref: "#/components/schemas/Action"
                can_view_individual_forms:
                  $ref: "#/components/schemas/Action"
                can_view_individual_gifts:
                  $ref: "#/components/schemas/Action"
                can_view_individual_giving_statement:
                  $ref: "#/components/schemas/Action"
                can_view_individual_groups:
                  $ref: "#/components/schemas/Action"
                can_view_individual_history:
                  $ref: "#/components/schemas/Action"
                can_view_individual_involvement:
                  $ref: "#/components/schemas/Action"
                can_view_individual_messages:
                  $ref: "#/components/schemas/Action"
                can_view_individual_needs:
                  $ref: "#/components/schemas/Action"
                can_view_individual_notes:
                  $ref: "#/components/schemas/Action"
                can_view_individual_pledge_statement:
                  $ref: "#/components/schemas/Action"
                can_view_individual_pledges:
                  $ref: "#/components/schemas/Action"
                can_view_individual_processes:
                  $ref: "#/components/schemas/Action"
                can_view_individual_scheduled_gifts:
                  $ref: "#/components/schemas/Action"
                can_view_individual_serving:
                  $ref: "#/components/schemas/Action"
                can_view_individuals_my_fit:
                  $ref: "#/components/schemas/Action"
                can_view_profile_admin:
                  $ref: "#/components/schemas/Action"
                can_view_scheduling_entities_organized:
                  $ref: "#/components/schemas/Action"
              type: object
            age:
              type: string
            allergies:
              description: The allergies of the individual
              type: string
            alternate_name:
              type: string
            baptized:
              description: >-
                If you are using the Sacraments feature, then the Sacraments API
                would be more effective and up-to-date alternative for surfacing
                baptism data
              type: boolean
            baptized_date:
              description: >-
                If you are using the Sacraments feature, then the Sacraments API
                would be more effective and up-to-date alternative for surfacing
                baptism data
              format: date
              type: string
            baptized_note:
              description: >-
                If you are using the Sacraments feature, then the Sacraments API
                would be more effective and up-to-date alternative for surfacing
                baptism data
              type: string
            barcode:
              description: Individual's barcode for quick access
              type: string
            campus_name:
              type: string
            cid:
              type: string
            commitment_date:
              format: date
              type: string
            commitment_story:
              type: string
            confirmed_no_allergies:
              description: Does this individual have allergies?
              enum:
                - NOT_SPECIFIED
              type: string
            creator:
              $ref: "#/components/schemas/BasicIndividualProfileSerializer"
            current_story:
              type: string
            date_anyone_run_giving_statement:
              format: date
              type: string
            date_family_run_giving_statement:
              format: date
              type: string
            emergency_contact_name:
              type: string
            envelope_user_id:
              description: >-
                Use the
                [`/church/envelope_user_options`](#/church/readEnvelopeUserOptions)
                API to get the envelope user options in order to look up the
                value by id.
              example: 1
              type: integer
            ethnicity_id:
              description: >-
                Use the [`/church/ethnicities`](#/church/readEthnicities) API to
                get the ethnicity options in order to look up the value by id.
              example: 8
              type: string
            external_diocesan_id:
              example: "5678"
              type: string
            external_fundraising_id:
              example: "1223"
              type: string
            external_safe_environment_id:
              example: "1234"
              type: string
            family_household_mailing_name:
              description: Family/Household Mailing Name
              example: Smith
              type: string
            giving_number:
              example: "987"
              type: string
            homebound_ministry_id:
              description: >-
                Use the
                [`/church/homebound_ministries`](#/church/readHomeboundMinistryOptions)
                API to get the homebound ministry options in order to look up
                the value by id.
              example: 1
              type: integer
            last_attended_date:
              format: date
              type: string
            last_giving_date:
              format: date
              type: string
            last_login:
              format: date
              type: string
            legal_first_name:
              type: string
            limited_access_user:
              type: boolean
            listed:
              type: boolean
            maiden_name:
              type: string
            membership_date:
              format: date
              type: string
            membership_date_stop:
              format: date
              type: string
            membership_start_date:
              format: date
              type: string
            membership_type_name:
              type: string
            middle_name:
              type: string
            military:
              type: string
            name_prefix:
              type: string
            name_suffix:
              type: string
            preferred_language_id:
              description: >-
                Use the
                [`/church/preferred_languages`](#/church/readPreferredLanguages)
                API to get the preferred language options in order to look up
                the value by id.
              example: "1"
              type: string
            preferred_service:
              properties:
                id:
                  type: integer
                name:
                  type: string
              type: object
            protected_fields:
              items:
                type: string
              type: array
            reason_left:
              type: string
            reason_left_id:
              type: integer
            religion_id:
              description: >-
                Use the [`/church/religions`](#/church/readReligions) API to get
                the religion options in order to look up the value by id.
              example: 2
              type: integer
            school_grade:
              type: string
            school_grade_id:
              type: integer
            school_id:
              type: integer
            style:
              properties:
                id:
                  type: integer
                name:
                  type: string
              type: object
            work_title:
              type: string
          type: object
    IndividualDetailsWithCustomFieldsSerializer:
      allOf:
        - $ref: "#/components/schemas/IndividualDetailsSerializer"
        - properties:
            custom_fields:
              items:
                $ref: "#/components/schemas/BasicIndividualsCustomFieldsSerializer"
              type: array
          type: object
    IndividualEventPositionSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicIndividualEventPositionSerializer"
        - properties:
            schedule:
              $ref: "#/components/schemas/ScheduleSerializer"
          type: object
    IndividualEventSerializer:
      allOf:
        - $ref: "#/components/schemas/BaseIndividualEventStatuses"
        - $ref: "#/components/schemas/BaseIndividualEventSerializer"
        - properties:
            event:
              $ref: "#/components/schemas/BasicEventSerializer"
          type: object
    IndividualFavoriteCampusSerializer:
      properties:
        campus_id:
          type: integer
        date_created:
          format: date-time
          type: string
        individual_id:
          type: integer
      type: object
    IndividualFileSerializer:
      properties:
        file:
          $ref: "#/components/schemas/FileSerializer"
        file_id:
          description: The file's id
          type: integer
        individual_id:
          description: The individual's id
          type: integer
      type: object
    IndividualGroupStatus:
      enum:
        - INVITED
        - REQUESTING
        - MEMBER
        - LEADER
        - MAIN_LEADER
        - COACH
        - DIRECTOR
      type: string
    IndividualGroupsHistorySerializer:
      properties:
        created:
          format: date-time
          type: string
        group_id:
          type: integer
        group_name:
          type: string
        status:
          $ref: "#/components/schemas/IndividualGroupStatus"
        type:
          enum:
            - START
            - END
          type: string
      type: object
    IndividualHistorySerializer:
      properties:
        changeset:
          items:
            $ref: "#/components/schemas/BasicIndividualsChangeSetSerializer"
          type: array
        id:
          type: integer
        modified:
          format: date-time
          type: string
        modifier:
          $ref: "#/components/schemas/MinimalIndividualProfileSerializer"
        modifier_id:
          type: integer
        source:
          properties:
            name:
              description: The api user name if APIv1, or the application name if APIv2
              type: string
            type:
              enum:
                - WEB
                - APIv1
                - APIv2
              type: string
          type: object
      type: object
    IndividualMessageReplyRequestSerializer:
      properties:
        body:
          type: string
      type: object
    IndividualMessageReplySerializer:
      properties:
        body:
          type: string
        created:
          format: date-time
          type: string
        creator:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        id:
          type: integer
        message:
          $ref: "#/components/schemas/IndividualMessageSerializer"
      type: object
    IndividualMessageRequestSerializer:
      properties:
        body:
          type: string
        subject:
          type: string
      type: object
    IndividualMessageSerializer:
      properties:
        body:
          type: string
        created:
          format: date-time
          type: string
        id:
          type: integer
        recipient:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        sender:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        subject:
          type: string
      type: object
    IndividualMessageWithRecentRepliesSerializer:
      allOf:
        - $ref: "#/components/schemas/IndividualMessageSerializer"
        - properties:
            recent_replies:
              $ref: "#/components/schemas/IndividualMessageReplySerializer"
            reply_count:
              type: integer
          title: IndividualMessageWithRecentRepliesSerializer
          type: object
    IndividualPositionSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicSchedulingPositionSerializer"
        - properties:
            category:
              properties:
                id:
                  type: integer
                name:
                  type: string
              type: object
            team:
              properties:
                id:
                  type: integer
                name:
                  type: string
              type: object
          type: object
    IndividualPrivacySettingsSerializer:
      properties:
        address_privacy_level:
          enum:
            - LEADERSHIP_ONLY
            - GROUP_MEMBERS
            - EVERYONE
          type: string
        anniversary_privacy_level:
          enum:
            - LEADERSHIP_ONLY
            - GROUP_MEMBERS
            - EVERYONE
          type: string
        birthday_privacy_level:
          enum:
            - LEADERSHIP_ONLY
            - GROUP_MEMBERS
            - EVERYONE
          type: string
        email_privacy_level:
          enum:
            - LEADERSHIP_ONLY
            - GROUP_MEMBERS
            - EVERYONE
          type: string
        listed:
          type: boolean
        phone_privacy_level:
          enum:
            - LEADERSHIP_ONLY
            - GROUP_MEMBERS
            - EVERYONE
          type: string
      type: object
    IndividualSavedSearchDetails:
      properties:
        can_edit:
          description: >-
            Whether the individual has authorization to edit a saved search
            based on system permission level
          type: boolean
        id:
          description: Id of the saved search
          type: integer
        invited_by_individual_id:
          description: Id of the individual that shared the saved search
          type: integer
        is_editor:
          description: >-
            Whether the individual was given edit access to the saved search by
            another individual
          type: boolean
        is_owner:
          description: Whether the individual is the owner of the saved search
          type: boolean
        is_starred:
          description: Whether the individual has starred the saved search
          type: boolean
        name:
          description: Name of the saved search
          type: string
      type: object
    IndividualSearchConfiguration:
      allOf:
        - $ref: "#/components/schemas/SearchConfiguration"
        - properties:
            filter_profile_type:
              description: >-
                Specify which profile types to include in the search results.
                The default is [‘active’] if no values are provided.
              items:
                enum:
                  - active
                  - inactive
                  - deceased
                type: string
              type: array
            include_lau:
              description: >-
                Whether or not to include limited access users in the search
                results. Not available to all users
              type: boolean
            include_pending:
              description: >-
                Whether or not to include pending profiles in the search
                results. Not available to all users
              type: boolean
            include_unlisted:
              description: >-
                Whether or not to include unlisted in the search results. Not
                available to all users
              type: boolean
            return_family_positions:
              description: family members related to search results to return
              items:
                enum:
                  - PRIMARY_CONTACT
                  - SPOUSE
                  - CHILD
                  - OTHER
                type: string
              type: array
            return_search_results:
              description: >
                Whether or not the results of the search should be returned.
                This may be set to false

                when return_family_positions has a value. Defaults to true
              type: boolean
          type: object
    IndividualServingPreferenceTimeSerializer:
      properties:
        category_id:
          type: integer
        end:
          format: date-time
          type: string
        id:
          type: integer
        individual_id:
          type: integer
        position_id:
          type: integer
        start:
          format: date-time
          type: string
      type: object
    IndividualServingPreferencesSerializer:
      properties:
        individual_id:
          type: integer
        type:
          enum:
            - UNLIMITED
            - WEEKS_PER_MONTH
            - WEEKS_OF_MONTH
          type: string
        value:
          items:
            type: integer
          type: array
      type: object
    IndividualTimelineSerializer:
      properties:
        campus_id:
          description: The ID of the campus where the timeline event took place
          type: integer
        category:
          $ref: "#/components/schemas/TimelineCategories"
        context:
          description: Information about the context of the timeline entry
          properties:
            id:
              type: number
            type:
              $ref: "#/components/schemas/TimelineContextTypes"
          type: object
        date:
          format: date
          type: string
        description:
          description: Additional information about the activity
          type: string
        grouping:
          description: Information about how the contexts are grouped
          properties:
            id:
              type: number
            type:
              $ref: "#/components/schemas/TimelineGroupingTypes"
          type: object
        has_peers:
          description: >-
            If true, this context and id can be used to get peer records from
            the contextual timeline endpoint
          type: boolean
        image:
          description: The image URL for the activity, where applicable. E.G. group image.
          type: string
        name:
          description: The name of the activity's context object
          type: string
        subtext:
          description: >-
            Further information about the activity, such as paid amount for
            forms, etc.
          type: string
        type:
          $ref: "#/components/schemas/TimelineTypes"
      type: object
    IndividualsDepartmentSerializer:
      properties:
        campus_id:
          type: integer
        created:
          format: date-time
          type: string
        department:
          $ref: "#/components/schemas/BasicDepartmentSerializer"
        department_id:
          type: integer
        individual_id:
          type: integer
      type: object
    IndividualsSocialNetworkRequest:
      properties:
        type:
          type: string
        value:
          type: string
      type: object
    IndividualsSocialNetworkSerializer:
      properties:
        type:
          type: string
        url:
          type: string
        value:
          type: string
      type: object
    MainLeaderSerializer:
      properties:
        actions:
          properties:
            can_view_profile:
              $ref: "#/components/schemas/Action"
          type: object
        email:
          example: example@pushpay.com
          type: string
        first_name:
          example: Ted
          type: string
        id:
          example: 1
          type: integer
        last_name:
          example: Lasso
          type: string
        name:
          example: Ted Lasso
          type: string
      type: object
    MeDetailsSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        - properties:
            analytics_user_types:
              description: Deprecated
              items:
                type: string
              type: array
            user_types:
              items:
                type: string
              type: array
            username:
              type: string
          type: object
    MergeMultipleIndividualsRequestSerializer:
      properties:
        loser_ids:
          items:
            type: integer
          type: array
        profile_overrides:
          $ref: "#/components/schemas/IndividualDetailsRequestSerializer"
      type: object
    MergedIndividualOutputType:
      properties:
        creatorId:
          type: integer
        dateCreated:
          format: date-time
          type: string
        dateModified:
          format: date-time
          type: string
        loserId:
          type: integer
        modifierId:
          type: integer
        winnerId:
          type: integer
      type: object
    MinimalIndividualProfileSerializer:
      properties:
        first_name:
          type: string
        id:
          type: integer
        last_name:
          type: string
        name:
          type: string
      type: object
    ModifiedMetadata:
      properties:
        created:
          format: date-time
          type: string
        creator:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        modified:
          format: date-time
          type: string
        modifier:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
      type: object
    NeedDetailsSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicNeedDetailsSerializer"
        - title: NeedDetailsSerializer
          type: object
        - properties:
            items:
              items:
                $ref: "#/components/schemas/NeedItemDetailsSerializer"
              type: array
          type: object
    NeedItemDetailsSerializer:
      properties:
        assignee:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        date:
          format: date-time
          type: string
        id:
          type: integer
        name:
          type: string
        need_id:
          type: integer
        order_by:
          type: integer
      type: object
    NoteDetailsSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicNoteWithIndividualSerializer"
    Organizer:
      properties:
        id:
          type: integer
        name:
          type: string
      type: object
    OrganizerAdvanceSearchSerializer:
      properties:
        campus:
          properties:
            id:
              type: integer
            name:
              type: string
          type: object
        category:
          properties:
            id:
              type: integer
            name:
              type: string
          type: object
        id:
          type: integer
        organizer:
          properties:
            first_name:
              type: string
            id:
              type: integer
            last_name:
              type: string
            name:
              type: string
          type: object
        schedule:
          properties:
            events:
              items:
                $ref: "#/components/schemas/SchedulingEventSerializer"
              type: array
            id:
              type: integer
          type: object
        team:
          properties:
            id:
              type: integer
            name:
              type: string
          type: object
        type:
          type: string
      type: object
    Parish:
      properties:
        city:
          type: string
        diocese:
          type: string
        diocese_email:
          type: string
        email:
          type: string
        name:
          type: string
        state:
          type: string
        street:
          type: string
        street2:
          type: string
        zip:
          type: string
      type: object
    PerformUnsavedAdvancedSearchRequestDeprecated:
      properties:
        domain:
          $ref: "#/components/schemas/SearchDomains"
        filters:
          description: >-
            A search filter tree as described
            [here](/documentation/documents/search_overview.html)
          properties: {}
          type: object
        settings:
          properties: {}
          type: object
      type: object
    PositionAdvanceSearchSerializer:
      properties:
        campus:
          properties:
            id:
              type: integer
            name:
              type: string
          type: object
        category:
          properties:
            id:
              type: integer
            name:
              type: string
            organizers:
              items:
                $ref: "#/components/schemas/Organizer"
              type: array
          type: object
        description:
          type: string
        filling:
          type: integer
        id:
          type: integer
        name:
          type: string
        needed:
          type: integer
        percentage:
          type: number
        status:
          type: string
        status_date:
          format: date-time
          type: string
        team:
          properties:
            id:
              type: integer
            name:
              type: string
            organizers:
              items:
                $ref: "#/components/schemas/Organizer"
              type: array
          type: object
      type: object
    PositionRequestBody:
      properties:
        name:
          type: string
      type: object
    PositionSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicSchedulingPositionSerializer"
        - properties:
            volunteers:
              items:
                $ref: "#/components/schemas/VolunteerSerializer"
              type: array
          type: object
    PreferredNumberTypes:
      enum:
        - HOME
        - MOBILE
        - WORK
        - NONE
      type: string
    PrivacyDefaultsSerializer:
      properties:
        default_address_privacy_level:
          enum:
            - LEADERSHIP_ONLY
            - GROUP_MEMBERS
            - EVERYONE
          type: string
        default_admin_created_profile:
          enum:
            - LIMITED
            - BASIC
          type: string
        default_anniversary_privacy_level:
          enum:
            - LEADERSHIP_ONLY
            - GROUP_MEMBERS
            - EVERYONE
          type: string
        default_approved_profile:
          enum:
            - LIMITED
            - BASIC
          type: string
        default_birthday_privacy_level:
          enum:
            - LEADERSHIP_ONLY
            - GROUP_MEMBERS
            - EVERYONE
          type: string
        default_congregant_created_profile:
          enum:
            - PENDING
            - LIMITED
            - BASIC
          type: string
        default_email_privacy_level:
          enum:
            - LEADERSHIP_ONLY
            - GROUP_MEMBERS
            - EVERYONE
          type: string
        default_listed:
          type: boolean
        default_phone_privacy_level:
          enum:
            - LEADERSHIP_ONLY
            - GROUP_MEMBERS
            - EVERYONE
          type: string
      type: object
    ProcessManagerDetail:
      properties:
        email_primary:
          type: string
        first_name:
          type: string
        id:
          type: integer
        last_name:
          type: string
        name:
          type: string
        process_id:
          type: integer
        status_id:
          type: integer
      type: object
    ProcessQueueAutomationDefaults:
      enum:
        - MANDATORY
        - CHECKED
        - UNCHECKED
      type: string
    ProcessQueueAutomationDetail:
      properties:
        default:
          $ref: "#/components/schemas/ProcessQueueAutomationDefaults"
        id:
          type: integer
        name:
          type: string
        parent_name:
          type: string
        type:
          $ref: "#/components/schemas/ProcessQueueAutomationTypes"
      type: object
    ProcessQueueAutomationRequestTypes:
      properties:
        assignee_id:
          type: string
        next_queue_id:
          type: integer
        type:
          $ref: "#/components/schemas/ProcessQueueAutomationTypes"
      required:
        - type
      type: object
    ProcessQueueAutomationTypes:
      enum:
        - GROUP
        - POSITION
        - EVENT
        - MEMBERSHIP
        - BAPTIZED
        - MAIL_MERGE
        - NEXT_QUEUE
      type: string
    ProcessQueueIndividualDetail:
      properties:
        assignee:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        completed:
          format: date-time
          type: string
        created:
          format: date-time
          type: string
        due:
          format: date-time
          type: string
        individual:
          $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        individual_id:
          type: integer
        process:
          $ref: "#/components/schemas/BasicProcessSerializer"
        queue:
          $ref: "#/components/schemas/BasicQueueSerializer"
        queue_id:
          type: integer
        queue_individual_id:
          type: integer
        status:
          $ref: "#/components/schemas/ProcessQueueStatuses"
      type: object
    ProcessQueueMetricSerializer:
      properties:
        done:
          type: integer
        in_process:
          type: integer
        not_started:
          type: integer
        overdue:
          type: integer
        waiting:
          type: integer
      type: object
    ProcessQueueStatuses:
      enum:
        - NOT_STARTED
        - WAITING
        - IN_PROCESS
        - DONE
      type: string
    ProcessSortBy:
      enum:
        - NAME
        - STATUS
        - CAMPUS
        - MANAGER
      type: string
    ProcessStatusType:
      enum:
        - HIDDEN
        - ACTIVE
        - ARCHIVED
      type: string
    RemoveBasicIndividualGroupsProfileSerializer:
      properties:
        group_id:
          type: integer
        individual_id:
          type: integer
        status:
          enum:
            - REMOVED
          type: string
      type: object
    ResourceSerializer:
      allOf:
        - $ref: "#/components/schemas/BaseResourceSerializer"
        - properties:
            quantity:
              type: integer
          type: object
    RoomSerializer:
      allOf:
        - $ref: "#/components/schemas/BaseResourceSerializer"
        - properties:
            allow_conflicts:
              type: boolean
            allow_layout:
              type: boolean
          type: object
    SacramentSerializer:
      properties:
        id:
          type: integer
        individual_id:
          type: integer
        sacrament:
          $ref: "#/components/schemas/Baptism"
      type: object
    SavedSearchDetails:
      properties:
        can_edit:
          description: Whether or not the current user can edit the saved search
          type: boolean
        columns:
          description: Information related to the columns visible on the search Page
          properties:
            age:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            allergies:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            anniversary:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            avatar:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            baptized:
              description: >-
                If you are using the Sacraments feature, then the Sacraments API
                would be more effective and up-to-date alternative for surfacing
                baptism data
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            baptized_date:
              description: >-
                If you are using the Sacraments feature, then the Sacraments API
                would be more effective and up-to-date alternative for surfacing
                baptism data
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            baptized_note:
              description: >-
                If you are using the Sacraments feature, then the Sacraments API
                would be more effective and up-to-date alternative for surfacing
                baptism data
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            barcode:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            birthday:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            campus_name:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            commitment_date:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            commitment_story:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            created:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            current_story:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            date_anyone_run_giving_statement:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            date_child_work_start:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            date_child_work_stop:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            date_family_run_giving_statement:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            deceased:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            email:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            emergency_contact_name:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            emergency_phone_number:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            family_id:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            family_position:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            fax_phone_number:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            floating_action_button:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            gender:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            giving_number:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            home_city:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            home_country_iso:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            home_phone_number:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            home_state:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            home_street:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            home_zip:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            how_they_heard:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            how_they_joined:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            id:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            last_attended_date:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            last_giving_date:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            last_login:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            legal_first_name:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            mailing_carrier_route:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            mailing_city:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            mailing_country_iso:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            mailing_state:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            mailing_zip:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            marital_status:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            membership_date:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            membership_date_stop:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            membership_type_name:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            middle_name:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            military:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            mobile_carrier:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            mobile_phone_number:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            modified:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            name:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            name_prefix:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            name_suffix:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            other_city:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            other_country_iso:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            other_state:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            other_zip:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            preferred_number:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            school_grade:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            work_city:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            work_country_iso:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            work_phone_number:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            work_state:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            work_title:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
            work_zip:
              properties:
                index:
                  type: integer
                visible:
                  type: boolean
              type: object
          type: object
        description:
          description: The saved search description
          type: string
        domain:
          description: Domain of where the search exists
          enum:
            - individuals
          type: string
        filters:
          description: Information related to the search conditions
          properties:
            conditions:
              items:
                description: Information for the filters applied
                properties:
                  conditions:
                    properties:
                      id:
                        type: string
                      include_value:
                        properties:
                          include_value:
                            items:
                              type: string
                            type: array
                        type: object
                      is_complete:
                        type: boolean
                      is_initialized:
                        type: boolean
                      is_saved:
                        type: boolean
                      operator:
                        type: string
                      type:
                        type: string
                      uid:
                        type: string
                      value:
                        type: string
                    type: object
                type: object
              type: array
            formula:
              description: >-
                The formula defines how multiple filter sets should be used in
                constructing the search.
              type: string
            operator:
              description: Operator to use for the filter
              enum:
                - contains
                - does_not_contain
                - ends_with
                - equal
                - greater_than
                - in
                - not_in
                - not_equal
                - is_not_set
                - is_set
                - less_than
                - greater_than_or_equal
                - in_the_last
                - in_the_next
                - in_the_previous
                - in_the_current
                - in_the_upcoming
                - between
                - not_between
                - less_than_or_equal
                - not_in_the_last
                - not_in_the_next
                - not_in_the_previous
                - not_in_the_current
                - not_in_the_upcoming
                - starts_with
              type: string
            type:
              description: >-
                Determines whether the filter is a single filter or a group of
                filters
              enum:
                - group
                - single
              type: string
          type: object
        id:
          description: ID for the saved search
          type: integer
        insight_id:
          description: ID for the insight for this saved search
          enum:
            - individuals:search
          type: string
        is_editor:
          description: Whether or not the current user is the editor the saved search
          type: boolean
        is_owner:
          description: >-
            Whether or not the current user is the owner of the search being
            saved
          type: boolean
        name:
          description: Name of the saved search
          type: string
        settings:
          description: Information related to settings for the search configuration
          properties:
            exclude_children:
              type: boolean
            filter_profile_type:
              items:
                enum:
                  - active
                  - inactive
                  - deceased
                type: string
              type: array
            group_by:
              items:
                type: string
              type: array
            include_campuses:
              items:
                type: integer
              type: array
            include_unlisted:
              type: boolean
            only_search_when_filtered:
              type: boolean
            order_by:
              items:
                properties:
                  column:
                    type: string
                  direction:
                    type: string
                type: object
              type: array
            return_family_positions:
              items:
                type: string
              type: array
            return_search_results:
              type: boolean
          type: object
      type: object
    ScheduleAdvanceSearchSerializer:
      properties:
        accepted:
          type: integer
        campus:
          properties:
            id:
              type: integer
            name:
              type: string
          type: object
        category:
          properties:
            id:
              type: integer
            name:
              type: string
            organizers:
              items:
                $ref: "#/components/schemas/Organizer"
              type: array
          type: object
        checked_in:
          type: integer
        events:
          items:
            $ref: "#/components/schemas/SchedulingEventSerializer"
          type: array
        id:
          type: integer
        pending:
          type: integer
        still_needed:
          type: integer
      type: object
    ScheduleAssignmentMetric:
      properties:
        not_notified_count:
          type: integer
        notified_count:
          type: integer
        status:
          enum:
            - PENDING
            - ACCEPTED
            - DECLINED
            - CHECKED_IN
          type: string
        total:
          type: integer
      type: object
    ScheduleEventRequestBody:
      properties:
        end:
          format: date-time
          type: string
        name:
          type: string
        start:
          format: date-time
          type: string
      type: object
    ScheduleSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicScheduleSerializer"
        - properties:
            associated_times:
              items:
                $ref: "#/components/schemas/AssociatedTimeSerializer"
              type: array
            events:
              items:
                $ref: "#/components/schemas/SchedulingEventSerializer"
              type: array
            metrics:
              items:
                $ref: "#/components/schemas/SchedulingAssignmentMetricsSerializer"
              type: object
          type: object
    ScheduleServingReminderTimesRequestBody:
      properties:
        days_before:
          type: integer
        time_of_day:
          description: hh:mm:ss
          type: string
      type: object
    ScheduleTotalsAdvanceSearchSerializer:
      properties:
        accepted:
          type: integer
        checked_in:
          type: integer
        declined:
          type: integer
        needed:
          type: integer
        pending:
          type: integer
        still_needed:
          type: integer
      type: object
    SchedulesSerializer:
      items:
        $ref: "#/components/schemas/ScheduleSerializer"
      type: array
    SchedulingAssignmentMetricsSerializer:
      properties:
        accepted_assignments:
          type: integer
        checked_in_assignments:
          type: integer
        declined_assignments:
          type: integer
        not_notified_assignments:
          type: integer
        pending_assignments:
          type: integer
        pending_replacements:
          type: integer
        pending_swaps:
          type: integer
        total_assignments:
          type: integer
      type: object
    SchedulingEventSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicSchedulingEventSerializer"
        - properties:
            event_files:
              items:
                $ref: "#/components/schemas/EventFileSerializer"
              type: array
            event_teams:
              items:
                $ref: "#/components/schemas/EventTeamSerializer"
              type: array
            has_associated_times:
              type: boolean
            metrics:
              items:
                $ref: "#/components/schemas/SchedulingAssignmentMetricsSerializer"
              type: object
          type: object
    SchedulingIndividualSerializer:
      allOf:
        - $ref: "#/components/schemas/BasicIndividualProfileSerializer"
        - properties:
            alerts:
              items:
                $ref: "#/components/schemas/AlertSerializer"
              type: array
            last_served_date:
              format: date-time
              type: string
          type: object
    SearchAction:
      enum:
        - add_to_event
        - add_to_group
        - add_to_process_queue
        - assign_roles
        - export_to_file
        - mass_edit_profiles
        - mass_edit_sacraments
        - remove_roles
        - send_a_message
      type: string
    SearchConfiguration:
      properties:
        columns:
          description: >-
            The columns to be returned in the output. Currently only used by the
            export action
          items:
            type: string
          type: array
        order_by:
          description: Ordering for the search results
          items:
            $ref: "#/components/schemas/ColumnOrder"
          type: array
      type: object
    SearchDomains:
      enum:
        - assignments
        - categories
        - department_detail
        - groups
        - individual_event_attendance
        - individual_groups
        - individuals
        - organizers
        - permission_individuals
        - positions
        - schedules
        - schedules_totals
        - scheduling_files
        - scheduling_individuals
        - songs
        - volunteers
      type: string
    SearchFileDetailSerializer:
      properties:
        actual_name:
          type: string
        attached_to:
          type: string
        attachment_id:
          type: integer
        attachment_type:
          type: string
        category_id:
          type: integer
        category_name:
          type: string
        creator_id:
          type: integer
        creator_name:
          type: string
        date_last_used:
          format: date-time
          type: string
        doc_id:
          type: integer
        file_type:
          type: string
        label:
          type: string
        service_plan_id:
          type: integer
        size:
          type: integer
        url:
          type: string
      type: object
    SearchResultsSerializer:
      description: >
        The search result object will be different for each domain.

        When the domain is 'assignment', refer to the
        AssignmentAdvanceSearchSerializer definition.

        When the domain is 'categories', refer to the CategorySerializer
        definition.

        When the domain is 'department_detail', refer to the
        DepartmentDetailsSearchDomainSerializer definition.

        When the domain is 'groups', refer to the BasicGroupSerializer
        definition.

        When the domain is 'individual_event_attendance', refer to the
        EventAttendanceSummarySerializer definition.

        When the domain is 'individual_groups', refer to the
        BasicIndividualGroupsProfileWithGroupSerializer definition.

        When the domain is 'individuals', refer to the
        IndividualDetailsSerializer definition.

        When the domain is 'permission_individuals', refer to the
        PermissionIndividualDetailsSerializer definition.

        When the domain is 'organizers', refer to the
        OrganizerAdvanceSearchSerializer definition.

        When the domain is 'positions', refer to the
        PositionAdvancedSearchSerializer definition.

        When the domain is 'schedules', refer to the
        ScheduleAdvanceSearchSerializer definition.

        When the domain is 'schedules_totals', refer to the
        ScheduleTotalsAdvanceSearchSerializer definition.

        When the domain is 'scheduling_files', refer to the
        SearchFileDetailSerializer definition.

        When the domain is 'scheduling_individuals', refer to the
        SchedulingIndividualSerializer definition.

        When the domain is 'songs', refer to the SongSearchSerializer
        definition.

        When the domain is 'volunteers', refer to the
        VolunteerAdvanceSearchSerializer definition.
      type: object
    ServicePlanItemFileSerializer:
      properties:
        category_id:
          type: integer
        description:
          type: string
        doc_id:
          type: integer
        file_name:
          type: string
        file_size:
          type: integer
        id:
          type: integer
        label:
          type: string
        mime_type:
          type: string
        service_plan_id:
          type: integer
        service_plan_item_id:
          type: integer
        url:
          type: string
      type: object
    ServicePlanItemLinkRequest:
      properties:
        label:
          type: string
        url:
          type: string
      type: object
    ServicePlanItemLinkSerializer:
      properties:
        category_id:
          type: integer
        id:
          type: integer
        label:
          type: string
        service_plan_id:
          type: integer
        service_plan_item_id:
          type: integer
        url:
          type: string
      type: object
    ServicePlanItemSerializer:
      properties:
        category_id:
          type: integer
        description:
          type: string
        duration:
          type: integer
        files:
          items:
            $ref: "#/components/schemas/ServicePlanItemFileSerializer"
          type: array
        id:
          type: integer
        item_type:
          enum:
            - ITEM
            - SECTION_HEADER
          type: string
        links:
          items:
            $ref: "#/components/schemas/ServicePlanItemLinkSerializer"
          type: array
        name:
          type: string
        order_by:
          type: integer
        service_plan_id:
          type: integer
      type: object
    ServicePlanSerializer:
      properties:
        category_id:
          type: integer
        duration:
          type: integer
        event_starttime_offset:
          type: integer
        id:
          type: integer
        items:
          items:
            $ref: "#/components/schemas/ServicePlanItemSerializer"
          type: array
        name:
          type: string
      type: object
    ServingReminderTimeSerializer:
      properties:
        category_id:
          type: integer
        days_before:
          type: integer
        id:
          type: integer
        schedule_id:
          type: integer
        time_of_day:
          type: string
      type: object
    ServingRotationAssignmentSerializer:
      properties:
        alerts:
          items:
            $ref: "#/components/schemas/AlertSerializer"
          type: array
        category_id:
          type: integer
        id:
          type: integer
        serving_rotation_id:
          type: integer
        serving_rotation_position_id:
          type: integer
        serving_rotation_team_id:
          type: integer
        volunteer:
          $ref: "#/components/schemas/VolunteerSerializer"
        volunteer_id:
          type: integer
      type: object
    ServingRotationPositionSerializer:
      properties:
        category_id:
          type: integer
        id:
          type: integer
        position:
          $ref: "#/components/schemas/PositionSerializer"
        position_id:
          type: integer
        quantity:
          type: integer
        serving_rotation_id:
          type: integer
        serving_rotation_team_id:
          type: integer
      type: object
    ServingRotationSerializer:
      properties:
        category_id:
          type: integer
        id:
          type: integer
        name:
          type: string
        serving_rotation_teams:
          items:
            $ref: "#/components/schemas/ServingRotationTeamSerializer"
          type: array
      type: object
    ServingRotationTeamSerializer:
      properties:
        category_id:
          type: integer
        id:
          type: integer
        serving_rotation_id:
          type: integer
        serving_rotation_positions:
          items:
            $ref: "#/components/schemas/ServingRotationPositionSerializer"
          type: array
        team:
          $ref: "#/components/schemas/TeamSerializer"
        team_id:
          type: integer
      type: object
    SharedEventSerializer:
      properties:
        campus:
          $ref: "#/components/schemas/BasicCampusSerializer"
        campus_id:
          type: integer
        creator_id:
          type: integer
        date_created:
          format: date-time
          type: string
        date_modified:
          format: date-time
          type: string
        event_id:
          type: integer
        event_occurrence:
          $ref: "#/components/schemas/BasicEventOccurrenceSerializer"
        modifier_id:
          type: integer
        status:
          $ref: "#/components/schemas/SharedEventStatus"
      type: object
    SharedEventStatus:
      enum:
        - ACCEPTED
        - DECLINED
        - INVITED
        - REVOKED
      type: string
    SongKey:
      enum:
        - A
        - A#
        - Bb
        - B
        - C
        - C#
        - Db
        - D
        - D#
        - Eb
        - E
        - F
        - F#
        - Gb
        - G
        - G#
        - Ab
        - Am
        - A#m
        - Bbm
        - Bm
        - Cm
        - C#m
        - Dbm
        - Dm
        - D#m
        - Ebm
        - Em
        - Fm
        - F#m
        - Gbm
        - Gm
        - G#m
        - Abm
      type: string
    SongSearchSerializer:
      properties:
        archived:
          type: integer
        authors:
          type: string
        ccli_number:
          type: string
        creator_id:
          type: integer
        date_created:
          format: date-time
          type: string
        date_last_used:
          format: date-time
          type: string
        date_modified:
          format: date-time
          type: string
        duration:
          type: integer
        key_file_count:
          type: integer
        modifier_id:
          type: integer
        primary_version:
          type: integer
        song_id:
          type: integer
        song_keys:
          type: string
        song_select_id:
          type: string
        tempo:
          type: string
        time_signature:
          type: string
        title:
          type: string
        version_file_count:
          type: integer
        version_id:
          type: integer
        version_title:
          type: string
      type: object
    SongSerializer:
      properties:
        authors:
          type: string
        ccli_number:
          type: integer
        duration:
          type: integer
        id:
          type: integer
        key_name:
          $ref: "#/components/schemas/SongKey"
        song_select_id:
          type: integer
        tempo:
          type: integer
        time_signature:
          type: string
        title:
          type: string
      type: object
    SongVersionLinkSerializer:
      properties:
        id:
          type: integer
        label:
          type: string
        url:
          type: string
        version_id:
          type: integer
      type: object
    TeamRequestBody:
      properties:
        name:
          type: string
        positions:
          items:
            $ref: "#/components/schemas/PositionRequestBody"
          type: array
      type: object
    TeamSerializer:
      properties:
        id:
          type: integer
        name:
          type: string
        positions:
          items:
            $ref: "#/components/schemas/PositionSerializer"
          type: array
      type: object
    TeamStatusFilter:
      enum:
        - ACTIVE
        - ARCHIVED
        - ACTIVE_AND_ARCHIVED
      type: string
    Template:
      properties:
        actions:
          properties:
            can_delete:
              $ref: "#/components/schemas/Action"
            can_duplicate:
              $ref: "#/components/schemas/Action"
            can_edit:
              $ref: "#/components/schemas/Action"
            can_share:
              $ref: "#/components/schemas/Action"
          type: object
        backing_entity_id:
          type: integer
        campus_id:
          type: integer
        creator:
          $ref: "#/components/schemas/MinimalIndividualProfileSerializer"
        date_created:
          format: date-time
          type: string
        date_modified:
          format: date-time
          type: string
        description:
          type: string
        entity_type:
          $ref: "#/components/schemas/TemplateEntityType"
        id:
          type: integer
        is_system_defined:
          type: boolean
        last_used_date:
          format: date-time
          type: string
        name:
          type: string
        originating_entity_id:
          type: integer
        shared_campus_ids:
          items:
            type: integer
          type: array
        sharing_level:
          $ref: "#/components/schemas/TemplateSharingLevel"
        usage_count:
          type: integer
      type: object
    TemplateEntityType:
      format: enum - FORM - MAIL_MERGE
      type: string
    TemplateSharingLevel:
      format: enum - ORGANIZATION - CAMPUSES
      type: string
    TimelineCategories:
      enum:
        - FORMS
        - GROUPS
        - GIVING
        - ATTENDANCE
        - SERVING
        - PROCESSES
        - INDIVIDUAL
      type: string
    TimelineContextTypes:
      enum:
        - FORM
        - FORM_RESPONSE
        - GROUP
        - INDIVIDUAL
        - POSITION
        - TRANSACTION
        - PROCESSES
      type: string
    TimelineGroupingTypes:
      enum:
        - FORM
        - FORM_RESPONSE
        - GROUP
        - INDIVIDUAL
        - POSITION
        - TRANSACTION
        - PROCESSES
      type: string
    TimelineTypes:
      enum:
        - LEFT_GROUP
        - JOINED_GROUP
        - FIRST_SERVED_IN_POSITION
        - INDIVIDUAL_CREATED
        - INDIVIDUAL_BAPTIZED
        - FIRST_GIFT
        - COMMITMENT
        - BECAME_GROUP_MEMBER
        - BECAME_GROUP_LEADER
        - BECAME_GROUP_COACH
        - BECAME_GROUP_DIRECTOR
        - FILLED_OUT_FORM
        - BECAME_FORM_MANAGER
        - IN_PROCESS_QUEUE
        - BECAME_PROCESS_MANAGER
        - BECAME_QUEUE_MANAGER
      type: string
    UpdateCampusRequestSerializer:
      properties:
        online_gift_message:
          type: string
      type: object
    UpdateFamilyRequest:
      properties:
        active:
          type: boolean
        address:
          properties:
            city:
              type: string
            country_iso:
              type: string
            state:
              type: string
            street:
              type: string
            zip:
              type: string
          type: object
        campus_id:
          type: integer
        deceased:
          format: date
          type: string
        last_name:
          type: string
        membership_start_date:
          format: date
          type: string
        membership_type_id:
          type: integer
        message:
          description: valid only when can_edit_checkin_message is TRUE
          type: string
        phone:
          type: string
        reason_left_id:
          type: integer
      type: object
    UpdateGroupMessageCommentRequest:
      properties:
        body:
          type: string
      type: object
    UpdateGroupMessageRequest:
      properties:
        body:
          type: string
        locked:
          type: boolean
        pinned:
          type: boolean
        subject:
          type: string
      type: object
    UpdateIndividualGroupsOutputSerializer:
      items:
        properties:
          errors:
            description: >-
              This array is always present, but has values only when `result` is
              `ERROR`
            example: []
            items:
              example: NOT_A_MEMBER
              type: string
            type: array
          group_id:
            example: 42
            type: integer
          result:
            enum:
              - REMOVED
              - ERROR
            type: string
        type: object
      type: array
    UpdateNeedRequestProperties:
      properties:
        address:
          properties:
            city:
              type: string
            country_iso:
              type: string
            name:
              type: string
            state:
              type: string
            street:
              type: string
            zip:
              type: string
          type: object
        coordinator_id:
          type: integer
        description:
          type: string
        group_id:
          type: integer
        name:
          type: string
      type: object
    UpdateQueueIndividualRequest:
      properties:
        assignee_id:
          type: integer
        due:
          format: date
          type: string
        status:
          enum:
            - NOT_STARTED
            - WAITING
            - IN_PROCESS
          type: string
      type: object
    VolunteerAdvanceSearchSerializer:
      properties:
        assignment:
          properties:
            assignment:
              properties:
                name:
                  type: string
              type: object
          type: object
        blockout_dates:
          items:
            $ref: "#/components/schemas/IndividualBlockoutDateSerializer"
          type: array
        campus:
          properties:
            id:
              type: integer
            name:
              type: string
          type: object
        category:
          properties:
            id:
              type: integer
            name:
              type: string
          type: object
        id:
          type: integer
        individual:
          properties:
            email_primary:
              type: string
            first_name:
              type: string
            id:
              type: integer
            last_name:
              type: string
            mailing_city:
              type: string
            mailing_state:
              type: string
            mailing_street:
              type: string
            mailing_zip:
              type: string
            name:
              type: string
            phone_mobile:
              type: string
          type: object
        position:
          properties:
            history:
              items:
                properties:
                  date_created:
                    format: date-time
                    type: string
                  position_id:
                    type: integer
                  status:
                    type: string
                type: object
              type: array
            id:
              type: integer
            name:
              type: string
          type: object
        serving_preference_times:
          items:
            properties:
              category_id:
                type: integer
              end:
                format: date-time
                type: string
              id:
                type: integer
              individual_id:
                type: integer
              position_id:
                type: integer
              start:
                format: date-time
                type: string
            type: object
          type: array
        serving_preferences:
          properties:
            individual_id:
              type: integer
            preference:
              items:
                type: number
              type: array
            preference_type:
              type: string
          type: object
        serving_rotations:
          items:
            type: string
          type: array
        status:
          properties:
            name:
              type: string
          type: object
        team:
          properties:
            id:
              type: integer
            name:
              type: string
            organizers:
              items:
                $ref: "#/components/schemas/Organizer"
              type: array
          type: object
        volunteer:
          properties:
            id:
              type: integer
          type: object
      type: object
    VolunteerMessageSerializer:
      properties:
        missing_email_count:
          type: integer
        recipient_count:
          type: integer
      type: object
    VolunteerMigrationSerializer:
      properties:
        migration_count:
          type: integer
      type: object
    VolunteerSerializer:
      properties:
        alerts:
          items:
            $ref: "#/components/schemas/AlertSerializer"
          type: array
        id:
          type: integer
        individual:
          $ref: "#/components/schemas/SchedulingIndividualSerializer"
        position_id:
          type: integer
      type: object
    idName:
      properties:
        id:
          type: integer
        name:
          type: string
      type: object
  securitySchemes:
    BearerTokenHeader:
      scheme: bearer
      type: http
    OAuth2:
      flows:
        authorizationCode:
          authorizationUrl: /oauth/authorize
          scopes: {}
          tokenUrl: /oauth/token
      type: oauth2
info:
  contact:
    email: api@churchcommunitybuilder.com
    name: Church Community Builder
    url: https://www.churchcommunitybuilder.com/
  description: >
    ## Overview


    We use OAuth 2.0 to secure our endpoints so you will need to talk with
    Church Community Builder to get an application created.


    For more information about becoming a value added partner fill out this
    [form](https://vendor.ccbchurch.com/goto/forms/12/responses/new).


    ### API Base URL


    All api calls must be made against `https://api.ccbchurch.com` and *not*
    `https://[subdomain].ccbchurch.com`.


    ### Authentication


    The authentication mechanism offered to Vendors and Churches to authorize
    the use of a given church's data is the three-legged OAuth flow. We offer
    two different auth types to authorize the church (System Auth) or authorize
    an individual in the church (Identity Auth).


    #### System Auth


    This will be the first step to gain access to a church's data. The Master
    Administrator or a person with the ability to Edit System Wide Settings for
    a church can authorize a vendor to use their data. Without this
    authorization the vendor will not be able to access the church's data.


    * Authorization URL: https://oauth.ccbchurch.com/oauth/authorize

    * Token URL: https://api.ccbchurch.com/oauth/token (Make sure to provide the
    Accept header set to application/vnd.ccbchurch.v2+json)

    * Query String Parameters
      * subdomain
        * Optional
        * If provided will bypass the church's subdomain step in the flow
      * client_id
        * Required
        * OAuth Client Id provided by Church Community Builder, Inc
      * response_type
        * Required
        * Will always equal `code`
      * state
        * Optional
        * Unique identifier to protect against CSRF
      * scope
        * Optional
        * This is what data your application can access
        * A subset of requested scopes when you setup your OAuth Application with Church Community Builder
        * By default if you do not provide this parameter it will default to the scopes you requested
      * redirect_uri
        * Required
        * Must match the domain provided to Church Community Builder when the OAuth Application was created

    ##### Steps to get an Access Token


    * Redirect to the Authorization URL with the required parameters

    * Master Administrator or Edit System Wide Settings will
      * Provide the subdomain if not provided in the original redirect
      * Login to their Church Community Builder site if not already logged in
      * Review the list of requested scopes and authorize the vendor to use them on their site
    * Church Community Builder will redirect to the redirect_uri parameter
    provided when the OAuth application was created

    * Post to the Token URL with `grant_type=authorization_code` and `code`
    equal to the returned code from the previous step

    * This will return the access token model provided in the model section

    * Subsequent requests to the API are capable by providing the Authorization
    header with the Access Token as the Bearer token


    #### Identity Auth


    This auth flow is similar to the System Auth flow without the need for the
    authorization step. In order to use this Auth Flow the church administration
    will need to authorize the vendor using the System Auth Flow first.


    This is to perform API requests on behalf of the individual authenticated
    through this flow. Any permissions the authenticated individual has will be
    taken into account when API calls are made. This will allow you to add a
    login with Church Community Builder link within your application.


    * Authorization URL: https://oauth.ccbchurch.com/oauth/authorize

    * Token URL: https://api.ccbchurch.com/oauth/token

    * Query String Parameters
      * Same as System Auth Flow
      * resource_owner_auth
        * boolean
        * If provided will perform the Identity Auth instead of the System Auth flow
  termsOfService: https://www.churchcommunitybuilder.com/terms-of-service/
  title: API | Church Community Builder
  version: v2
openapi: 3.0.3
paths:
  /calendar:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getCalendar
      parameters:
        - in: query
          name: start
          schema:
            format: date
            type: string
        - in: query
          name: end
          schema:
            format: date
            type: string
        - in: query
          name: campus_ids
          schema:
            items:
              type: integer
            type: array
        - deprecated: true
          in: query
          name: campus_id
          required: true
          schema:
            type: integer
        - in: query
          name: type
          schema:
            enum:
              - ALL_EVENTS_ADMIN
              - CAMPUS_WIDE
              - PUBLIC
              - FACILITIES
            type: string
        - in: query
          name: include_shared_events
          schema:
            type: boolean
        - in: query
          name: group_type_ids
          schema:
            items:
              type: integer
            type: array
        - in: query
          name: group_name
          schema:
            type: string
        - in: query
          name: attendance_grouping_ids
          schema:
            items:
              type: integer
            type: array
        - in: query
          name: department_ids
          schema:
            items:
              type: integer
            type: array
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/BasicEventOccurrenceSerializer"
                type: array
          description: Get event list
      summary: Get event calendar
      tags:
        - events
  /campuses:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:campuses
      operationId: getCampuses
      parameters:
        - description: Current location latitude
          in: query
          name: location[latitude]
          schema:
            format: float
            type: number
        - description: Current location longitude
          in: query
          name: location[longitude]
          schema:
            format: float
            type: number
        - $ref: "#/components/parameters/UsedByGroupsFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicCampusSerializer"
                type: array
          description: Church Campus Information
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "412":
          $ref: "#/components/responses/NotValid"
      summary: Get campus list
      tags:
        - campuses
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:campuses
      operationId: updateCampus
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateCampusRequestSerializer"
        description: The campus to edit
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicCampusSerializer"
          description: Campus Information
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "412":
          $ref: "#/components/responses/NotValid"
      summary: Update campus information
      tags:
        - campuses
      x-codegen-request-body-name: campus
  /campuses/{id}/leadership_roles:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scoes      | read:leadership_roles
      operationId: getLeadershipRoles
      parameters:
        - description: The campus id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: >-
            Status of the leadership role. If this param is not provided, both
            will be included.
          in: query
          name: status
          schema:
            enum:
              - ENABLED
              - DISABLED
            type: string
        - description: >-
            Include leadership roles that are assigned or unassigned to
            individuals. If this param is not provided, both will be included.
          in: query
          name: assignment
          schema:
            enum:
              - ASSIGNED
              - UNASSIGNED
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicLeadershipRoleSerializer"
                  type: object
                type: array
          description: List of Campus Leadership Roles
      summary: Get campus leadership roles
      tags:
        - church
  /campuses/{id}/service_times:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scoes      | read:service_times
      operationId: getCampusServiceTimes
      parameters:
        - description: The campus id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/CampusServiceSerializer"
                type: array
          description: List of Campus Service Times
      summary: Get campus service times
      tags:
        - church
  /church:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:church
      operationId: getChurch
      responses:
        "200":
          content:
            "*/*":
              schema:
                properties:
                  BasicChurchSerializer:
                    $ref: "#/components/schemas/BasicChurchSerializer"
                type: object
          description: Church Information
      summary: Get current church information
      tags:
        - church
  /church/areas_of_town:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:church
      operationId: getAreasOfTown
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/BasicListSerializer"
                type: array
          description: List of Areas of Town
      summary: Get schools
      tags:
        - church
  /church/attendance_groupings:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:attendance_groupings
      operationId: getAttendanceGroupings
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicListSerializer"
                  type: object
                type: array
          description: List of Attendance Groupings
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
      summary: Get attendance groupings
      tags:
        - church
  /church/countries:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:church
      operationId: getCountries
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicCountrySerializer"
                  type: object
                type: array
          description: List of Countries
      summary: Get countries
      tags:
        - church
  /church/custom_fields:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:custom_fields
      operationId: getCustomFields
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicCustomFieldSerializer"
                  type: object
                type: array
          description: List of Custom Fields
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get custom fields
      tags:
        - church
  /church/envelope_user_options:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:church
      operationId: getEnvelopeUserOptions
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicListSerializer"
                  type: object
                type: array
          description: List of Envelope User Options
      summary: Get envelope user options
      tags:
        - church
  /church/ethnicities:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:church
      operationId: getEthnicities
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicListSerializer"
                  type: object
                type: array
          description: List of Ethnicity Options
      summary: Get ethinicity options
      tags:
        - church
  /church/homebound_ministries:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:church
      operationId: getHomeboundMinistryOptions
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicListSerializer"
                  type: object
                type: array
          description: List of Homebound Ministry Options
      summary: Get homebound ministry options
      tags:
        - church
  /church/membership_types:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:church
      operationId: getMembershipTypes
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicListSerializer"
                  type: object
                type: array
          description: List of Membership Types
      summary: Get membership types
      tags:
        - church
  /church/mobile_carriers:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:church
      operationId: getMobileCarriers
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicMobileCarrierSerializer"
                  type: object
                type: array
          description: List of Mobile Carriers
      summary: Get mobile carriers
      tags:
        - church
  /church/preferred_languages:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:church
      operationId: getPreferredLanguages
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicListSerializer"
                  type: object
                type: array
          description: List of Preferred Language Options
      summary: Get preferred language options
      tags:
        - church
  /church/privacy_defaults:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:privacy_defaults
      operationId: getPrivacyDefaults
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PrivacyDefaultsSerializer"
          description: Privacy defaults
      summary: Get privacy defaults
      tags:
        - church
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:privacy_defaults
      operationId: updatePrivacyDefaults
      requestBody:
        content:
          "*/*":
            schema:
              properties:
                default_address_privacy_level:
                  enum:
                    - LEADERSHIP_ONLY
                    - GROUP_MEMBERS
                    - EVERYONE
                  type: string
                default_admin_created_profile:
                  enum:
                    - LIMITED
                    - BASIC
                  type: string
                default_anniversary_privacy_level:
                  enum:
                    - LEADERSHIP_ONLY
                    - GROUP_MEMBERS
                    - EVERYONE
                  type: string
                default_approved_profile:
                  enum:
                    - LIMITED
                    - BASIC
                  type: string
                default_birthday_privacy_level:
                  enum:
                    - LEADERSHIP_ONLY
                    - GROUP_MEMBERS
                    - EVERYONE
                  type: string
                default_congregant_created_profile:
                  enum:
                    - PENDING
                    - LIMITED
                    - BASIC
                  type: string
                default_email_privacy_level:
                  enum:
                    - LEADERSHIP_ONLY
                    - GROUP_MEMBERS
                    - EVERYONE
                  type: string
                default_listed:
                  type: boolean
                default_phone_privacy_level:
                  enum:
                    - LEADERSHIP_ONLY
                    - GROUP_MEMBERS
                    - EVERYONE
                  type: string
              type: object
        description: The privacy defaults
        required: false
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/PrivacyDefaultsSerializer"
          description: Update privacy defaults
      summary: Update privacy defaults
      tags:
        - church
      x-codegen-request-body-name: privacy_defaults
  /church/reasons_left:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:church
      operationId: getReasonsLeft
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicListSerializer"
                  type: object
                type: array
          description: List of reasons left options
      summary: Get reasons left options
      tags:
        - church
  /church/religions:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:church
      operationId: getReligions
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicListSerializer"
                  type: object
                type: array
          description: List of Religion options
      summary: Get religion options
      tags:
        - church
  /church/school_grades:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:church
      operationId: getSchoolGrades
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicListSerializer"
                  type: object
                type: array
          description: List of School Grades
      summary: Get school grades
      tags:
        - church
  /church/schools:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:church
      operationId: getSchools
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicListSerializer"
                  type: object
                type: array
          description: List of Schools
      summary: Get schools
      tags:
        - church
  /church/services:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:church
      operationId: getServices
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicListSerializer"
                  type: object
                type: array
          description: List of Services
      summary: Get services
      tags:
        - church
  /church/social_networks:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:church
      operationId: getSocialNetworks
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicSocialNetworkSerializer"
                  type: object
                type: array
          description: List of Social Networks
      summary: Get social networks
      tags:
        - church
  /data_import/individuals:
    post:
      description: >-
        Properties | Description ---------- | ----------- Scopes     |
        write:individuals
      operationId: importIndividuals
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  description: File to upload
                  format: binary
                  type: string
              required:
                - file
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportSerializer"
          description: Returns a import serializer
        "400":
          $ref: "#/components/responses/NotValid"
      summary: >-
        Upload a CSV file for import with the following columns of data as
        families of individuals.  Expected columns - First Name, Last Name,
        Email, Phone, Address.  Address must be formatted as - street, city,
        state abbreviation, zip code
      tags:
        - files
  /data_import/sacraments:
    post:
      description: >-
        Properties | Description ---------- | ----------- Scopes     |
        write:individuals
      operationId: importSacraments
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  description: File to upload
                  format: binary
                  type: string
              required:
                - file
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ImportSerializer"
          description: Returns a import serializer
        "400":
          $ref: "#/components/responses/NotValid"
      summary: >-
        Upload a CSV file for importing sacraments for an individual. Expected
        columns - individual id, Name, sacrament data columns...
      tags:
        - files
  /departments:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:departments
      operationId: getDepartments
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/UsedByGroupsFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicDepartmentSerializer"
                type: array
          description: List of Departments
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
      summary: Get Departments
      tags:
        - departments
  /events:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getEvents
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: range_type
          schema:
            $ref: "#/components/schemas/EventRangeTypeFilter"
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/BasicEventOccurrenceSerializer"
                type: array
          description: Get event list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get event list
      tags:
        - events
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:events
      operationId: createEvent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventCreate"
        description: The Event to create
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullEventSerializer"
          description: Returns the full serializer of the Event
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventUnableToCreate"
          description: >-
            Event unable to to be created due to missing parameters or another
            issue
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Create event
      tags:
        - events
      x-codegen-request-body-name: createEvent
  /events/search:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getEventsSearch
      parameters:
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: range_type
          schema:
            $ref: "#/components/schemas/EventRangeTypeFilter"
        - in: query
          name: campus_ids
          schema:
            items:
              type: integer
            type: array
        - in: query
          name: group_ids
          schema:
            items:
              type: integer
            type: array
        - in: query
          name: group_type_ids
          schema:
            items:
              type: integer
            type: array
        - in: query
          name: group_name
          schema:
            type: string
        - in: query
          name: attendance_grouping_ids
          schema:
            items:
              type: integer
            type: array
        - in: query
          name: department_ids
          schema:
            items:
              type: integer
            type: array
        - in: query
          name: organizer_individual_id
          schema:
            type: integer
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/PerPage"
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/FullEventSerializer"
                type: array
          description: Get event list
      summary: Search events
      tags:
        - events
  /events/shared_campuses:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getSharedEvents
      parameters:
        - description: An array of event_ids to filter by
          in: query
          name: event_ids
          schema:
            items:
              type: integer
            type: array
        - description: An array of campus_ids to filter by
          in: query
          name: campus_ids
          schema:
            items:
              type: integer
            type: array
        - description: An array of shared event statuses to filter by
          in: query
          name: status
          schema:
            items:
              $ref: "#/components/schemas/SharedEventStatus"
            type: array
        - description: An array of shared event statuses to sort by, in ascending order
          in: query
          name: sort_by
          schema:
            items:
              $ref: "#/components/schemas/SharedEventStatus"
            type: array
        - in: query
          name: range_type
          schema:
            $ref: "#/components/schemas/EventRangeTypeFilter"
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SharedEventSerializer"
                type: array
          description: List of shared events
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get list of shared events, campuses, statuses
      tags:
        - events
  /events/{eventId}/occurrences/{occurrence}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getEventOccurrence
      parameters:
        - description: The event's id
          in: path
          name: eventId
          required: true
          schema:
            type: integer
        - description: the event's occurrence
          in: path
          name: occurrence
          required: true
          schema:
            format: date
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FullEventOccurrenceType"
                type: array
          description: a specific event occurrence
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get a specific occurrence of an event
      tags:
        - events
  /events/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:events
      operationId: deleteEvent
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Delete event
      tags:
        - events
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getEvent
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The date of the occurance, for example "20201101"
          in: query
          name: occurrence
          schema:
            pattern: /\d{8}/gm
            type: string
        - description: Adds a "attendance" object with basic attendance info for the event
          in: query
          name: attendance_info
          schema:
            type: boolean
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/FullEventSerializer"
          description: The event details
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get event information
      tags:
        - events
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:events
      operationId: updateEvent
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EventUpdate"
        description: The Event to update
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullEventSerializer"
          description: Returns the full serializer of the Event
        "400":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventUnableToUpdate"
          description: Event unable to update due to a conflict or issue
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Update event
      tags:
        - events
      x-codegen-request-body-name: updateEvent
  /events/{id}/attendance/candidates:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:event_attendance
      operationId: getEventCandidates
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: YYYYMMDD ISO-8601
          in: query
          name: occurrence
          schema:
            format: date
            type: string
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/EventCandidateIndividualSerializer"
                type: array
          description: Get event candidate list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get event candidate list
      tags:
        - events
  /events/{id}/attendance/{occurrence}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:event_attendance
      operationId: getEventSummary
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The occurrence date (in YYYYMMDD format)
          in: path
          name: occurrence
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  BasicEventSummarySerializer:
                    $ref: "#/components/schemas/BasicEventSummarySerializer"
                type: object
          description: Get event summary details
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get event summary details
      tags:
        - events
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:event_attendance
      operationId: updateEventSummary
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The occurrence date (in YYYYMMDD format)
          in: path
          name: occurrence
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                notes:
                  type: string
                people_information:
                  type: string
                prayer_requests:
                  type: string
                send_to:
                  enum:
                    - LEADERS
                    - MEMBERS
                    - NONE
                  type: string
                status:
                  enum:
                    - DID_NOT_MEET
                    - MET
                  type: string
                topic:
                  type: string
                visitors:
                  type: integer
              type: object
        description: The new event summary
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  BasicEventSummarySerializer:
                    $ref: "#/components/schemas/BasicEventSummarySerializer"
                type: object
          description: Event summary details
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Create/update event summary details
      tags:
        - events
      x-codegen-request-body-name: updateEventSummary
  /events/{id}/attendance/{occurrence}/attendees:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:event_attendance
      operationId: getEventAttendees
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The occurrence date (in YYYYMMDD format)
          in: path
          name: occurrence
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/EventAttendeesIndividualSerializer"
                type: array
          description: Get event attendees list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get event attendees list
      tags:
        - events
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:event_attendance
      operationId: updateEventAttendees
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The occurrence date (in YYYYMMDD format)
          in: path
          name: occurrence
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                example: ""
                type: string
              type: array
        description: >-
          The numeric, or numeric string, ids of the individuals that were in
          attendance
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/EventAttendeesIndividualSerializer"
                type: array
          description: The event attendees list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Update event attendees
      tags:
        - events
      x-codegen-request-body-name: individual_ids
  /events/{id}/calendar:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getEventCalendar
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: YYYY-MM-DD ISO-8601
          in: query
          name: start
          schema:
            format: date
            type: string
        - description: YYYY-MM-DD ISO-8601
          in: query
          name: end
          schema:
            format: date
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicEventOccurrenceSerializer"
                type: array
          description: List of event occurrences
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get the event calendar
      tags:
        - events
  /events/{id}/guests:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getEventGuests
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - in: query
          name: status
          schema:
            enum:
              - REQUESTING
              - GOING
              - NOT_GOING
              - MAYBE
              - NOT_RESPONDED
            type: string
        - in: query
          name: name
          schema:
            type: string
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: >-
                    #/components/schemas/BasicIndividualEventsProfileWithIndividualSerializer
                type: array
          description: Get event guest list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get event guest list
      tags:
        - events
  /events/{id}/invitation_settings:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:events
      operationId: updateEventInvitationSettings
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                allow_additional_guests:
                  type: boolean
                attend_max_quantity:
                  type: integer
                notify_owner_of_status_changes:
                  type: boolean
                show_guest_list:
                  type: boolean
              type: object
        description: The new event invitation settings
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullEventSerializer"
          description: The event details
      summary: Get event information
      tags:
        - events
      x-codegen-request-body-name: UpdateEventInvitationSettings
  /events/{id}/photo:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:events
      operationId: deleteEventPhoto
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Remove the event photo
      tags:
        - events
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:events
      operationId: updateEventPhoto
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                uploaded_file:
                  description: Event Photo (will crop to a square image)
                  format: binary
                  type: string
              required:
                - uploaded_file
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullEventSerializer"
          description: The event details
      summary: Update the event photo
      tags:
        - events
  /events/{id}/resources:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:event_resources
      operationId: getEventResources
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - in: query
          name: status
          schema:
            enum:
              - PENDING
              - APPROVED
            type: string
        - in: query
          name: exclude_child_resources
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/EventResourceSerializer"
                type: array
          description: Get event resources list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get event resource list
      tags:
        - events
        - resources
  /events/{id}/rooms:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:event_resources
      operationId: getEventRooms
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - in: query
          name: status
          schema:
            enum:
              - PENDING
              - APPROVED
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/EventRoomSerializer"
                type: array
          description: Get event room list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get event room list
      tags:
        - events
        - resources
  /events/{id}/shared_campuses:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getEventSharedCampuses
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SharedEventSerializer"
                type: array
          description: List of event's shared campuses
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get an events's shared campuses
      tags:
        - events
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:events
      operationId: postEventSharedCampuses
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                campus_ids:
                  items:
                    type: integer
                  type: array
              type: object
        description: Array of campus ids
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SharedEventSerializer"
                type: array
          description: List of event's shared campuses
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Share an event with other campuses
      tags:
        - events
  /events/{id}/shared_campuses/{campusId}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getSharedEvent
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The campus' id
          in: path
          name: campus_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SharedEventSerializer"
                type: array
          description: The shared event
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get a shared event
      tags:
        - events
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:events
      operationId: putEventSharedCampus
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The campus' id
          in: path
          name: campus_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SharedEventSerializer"
                type: array
          description: update a specific campus shared event
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Update shared event invite for campus
      tags:
        - events
  /events/{id}/{occurrence}/:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:events
      operationId: deleteEventOccurrence
      parameters:
        - description: The event's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The occurrence date (in YYYYMMDD format)
          in: path
          name: occurrence
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Delete event occurrence
      tags:
        - events
  /families:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals
      operationId: getFamilies
      parameters:
        - description: Partial last name search
          in: query
          name: last_name
          schema:
            type: string
        - description: Partial email search
          in: query
          name: email
          schema:
            type: string
        - description: Partial mobile phone search
          in: query
          name: phone
          schema:
            type: string
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicFamilyProfileSerializer"
                type: array
          description: List of Families
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
      summary: Get families
      tags:
        - families
        - individuals
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individuals
      operationId: createFamily
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateFamilyRequest"
        description: The family to create
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  FamilyProfileSerializer:
                    $ref: "#/components/schemas/FamilyProfileSerializer"
                type: object
          description: The family
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Create family
      tags:
        - families
        - individuals
      x-codegen-request-body-name: createFamilyRequest
  /families/{id}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals
      operationId: getFamily
      parameters:
        - description: The family id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  FamilyProfileSerializer:
                    $ref: "#/components/schemas/FamilyProfileSerializer"
                type: object
          description: Family
      summary: Get family
      tags:
        - families
        - individuals
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individuals
      operationId: updateFamily
      parameters:
        - description: The family id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateFamilyRequest"
        description: The family details to update
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  FamilyProfileSerializer:
                    $ref: "#/components/schemas/FamilyProfileSerializer"
                type: object
          description: Family
      summary: Update family
      tags:
        - families
        - individuals
      x-codegen-request-body-name: updateFamilyRequest
  /families/{id}/metrics/giving:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals_metrics
      operationId: getFamilyMetricsGiving
      parameters:
        - description: The family's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Starting date for data (max range to end date is 12 months)
          in: query
          name: start
          schema:
            format: date
            type: string
        - description: Ending date for data (max range from start date is 12 months)
          in: query
          name: end
          schema:
            format: date
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FamilyGivingMetricSerializer"
                type: array
          description: List of Giving Metrics grouped into month intervals
        "400":
          $ref: "#/components/responses/NotValid"
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get family giving metrics
      tags:
        - families
        - individuals
        - metrics
  /families/{id}/notes:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual_notes
      operationId: getFamilyNotes
      parameters:
        - description: The family's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: The contexts to get notes for
          explode: true
          in: query
          name: context[]
          schema:
            items:
              enum:
                - GROUP
                - DEPARTMENT
                - PROCESS_QUEUE
                - GENERAL
              type: string
            type: array
          style: form
        - description: The sharing level to get notes for
          explode: true
          in: query
          name: sharing_level[]
          schema:
            items:
              enum:
                - PRIVATE
                - CONTEXT_LEADERS
                - ALL_LEADERS
              type: string
            type: array
          style: form
        - description: Include the context
          in: query
          name: include_context
          schema:
            type: boolean
        - description: Include the creator
          in: query
          name: include_creator
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicNoteWithIndividualSerializer"
                type: array
          description: List of individual notes
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
      summary: Get notes for all family members
      tags:
        - families
        - individuals
        - notes
  /families/{id}/photo:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individuals
      operationId: deleteFamilyPhoto
      parameters:
        - description: The family id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Remove family photo
      tags:
        - families
        - individuals
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individuals
      operationId: updateFamilyPhoto
      parameters:
        - description: The family id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                photo:
                  description: Family Photo (will crop to a 16:9 image)
                  format: binary
                  type: string
              required:
                - photo
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FamilyProfileSerializer"
          description: The family details
      summary: Update family photo
      tags:
        - families
        - individuals
  /files:
    post:
      description: >-
        This endpoint creates a temporary file that can be associated to a type
        of file upload. Currently supports form response attachments. |
        Properties | Description ---------- | ----------- Scopes     |
        write:files
      operationId: uploadFile
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                description:
                  description: Description of file
                  type: string
                file:
                  description: File to upload
                  format: binary
                  type: string
                label:
                  description: Label for file
                  type: string
                private:
                  description: Make file private
                  type: boolean
              required:
                - file
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSerializer"
          description: Returns a file serializer
        "400":
          $ref: "#/components/responses/NotValid"
      summary: Upload a file
      tags:
        - files
  /files/{id}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:files
      operationId: getFile
      parameters:
        - description: The file id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSerializer"
          description: Returns a file serializer
        "400":
          $ref: "#/components/responses/NotValid"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get a file
      tags:
        - files
  /form_responses/{id}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:form_responses
      operationId: getFormResponse
      parameters:
        - description: The response id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: >-
            The confirmation_code for the form response. (required if logged
            out)
          in: query
          name: confirmation_code
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullFormResponseSerializer"
          description: Returns the full form response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: get a form response
      tags:
        - forms
  /forms:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:forms
      operationId: getForms
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: Campus ID to match
          in: query
          name: campus_id
          schema:
            type: integer
        - description: Restricts return to forms with questions
          in: query
          name: form_must_have_questions
          schema:
            type: boolean
        - description: Returns forms managed by this user id
          in: query
          name: managed_by
          schema:
            type: integer
        - description: Partial title search
          in: query
          name: title
          schema:
            type: string
        - description: Restricts return to forms that are publicaly listed
          in: query
          name: publicly_listed
          schema:
            type: boolean
        - description: Sort form list response
          in: query
          name: sort_by
          schema:
            $ref: "#/components/schemas/FormSortBy"
        - description: Sort form list direction
          in: query
          name: sort_direction
          schema:
            type: string
        - description: Form status to match
          in: query
          name: status
          schema:
            $ref: "#/components/schemas/FormStatus"
        - description: Returns the form metrics
          in: query
          name: with_metrics
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicFormSerializer"
                    - properties:
                        actions:
                          properties:
                            canRespondToForm:
                              $ref: "#/components/schemas/Action"
                          type: object
                      type: object
                  type: object
                type: array
          description: Get available forms
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "412":
          $ref: "#/components/responses/NotValid"
      summary: Get list of forms
      tags:
        - forms
  /forms/{id}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:forms
      operationId: getForm
      parameters:
        - description: The form id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullFormSerializer"
          description: Form data
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get a specific form
      tags:
        - forms
  /forms/{id}/automation:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:forms
      operationId: createFormAutomation
      parameters:
        - description: The form id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/FormAutomationRequest"
        description: the form automation to create
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FormAutomationSerializer"
          description: Returns Form Automation
        "400":
          $ref: "#/components/responses/NotValid"
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Create form automation
      tags:
        - forms
      x-codegen-request-body-name: CreateFormAutomationRequest
  /forms/{id}/managers:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:forms
      operationId: addFormManager
      parameters:
        - description: The form's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                individual_id:
                  type: integer
              type: object
        description: The new form manager details
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicFormManagerSerializer"
          description: Returns Form Manager
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Add form manager
      tags:
        - forms
      x-codegen-request-body-name: addFormManagerRequest
  /forms/{id}/managers/{manager_id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | delete:forms
      operationId: deleteFormManager
      parameters:
        - description: The form's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The form manager id
          in: path
          name: manager_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Remove form manager
      tags:
        - forms
  /forms/{id}/questions:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:forms
      operationId: getFormQuestions
      parameters:
        - description: The form id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: >-
            Return questions that are on a specific form page (think page
            breaks)
          in: query
          name: form_page
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FormQuestionSerializer"
                type: array
          description: List of form questions
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: get a list of questions for a specific form
      tags:
        - forms
  /forms/{id}/respondents:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:forms
      operationId: getFormRespondents
      parameters:
        - description: The form id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: filters the results by the family_id
          in: query
          name: family_id
          schema:
            type: integer
        - description: filters the results by the family_id of the individual
          in: query
          name: individual_id
          schema:
            type: integer
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/FormRespondentSerializer"
                type: array
          description: List of individuals
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get the list of individuals you can make responses for
      tags:
        - forms
  /forms/{id}/responses:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:forms
      operationId: getFormResponses
      parameters:
        - description: The form id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: The payment id used when making a payment
          in: query
          name: payment_id
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/FullFormResponseSerializer"
                type: array
          description: Returns the list of form responses
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get a list of form responses
      tags:
        - forms
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:form_responses
      operationId: createFormResponse
      parameters:
        - description: The form id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/FormResponseRequest"
        description: the form response to create / edit
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                properties:
                  FormPaymentNeededSerializer:
                    $ref: "#/components/schemas/FormPaymentNeededSerializer"
                  FullFormResponseSerializer:
                    $ref: "#/components/schemas/FullFormResponseSerializer"
                type: object
          description: Returns the full new form response
        "400":
          $ref: "#/components/responses/NotValid"
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Create a new form response
      tags:
        - forms
      x-codegen-request-body-name: form response
  /group_areas:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:groups
      operationId: getGroupAreas
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/UsedByGroupsFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicListSerializer"
                type: array
          description: List of Group Areas of Town
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
      summary: Get Group Areas of Town
      tags:
        - groups
  /group_meet_days:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:groups
      operationId: getGroupMeetDays
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/UsedByGroupsFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicListSerializer"
                type: array
          description: List of Group Meet Days
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
      summary: Get Group Meet Days
      tags:
        - groups
  /group_meet_times:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:groups
      operationId: getGroupMeetTimes
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/UsedByGroupsFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicListSerializer"
                type: array
          description: List of Meet Times
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
      summary: Get Group Meet Times
      tags:
        - groups
  /group_types:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:groups
      operationId: getGroupTypes
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - $ref: "#/components/parameters/UsedByGroupsFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicListSerializer"
                type: array
          description: List of Group Types
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
      summary: Get Group Types
      tags:
        - groups
  /groups:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:groups
      operationId: getGroups
      parameters:
        - description: Partial name search
          in: query
          name: name
          schema:
            type: string
        - description: An array of campus_ids to filter by
          in: query
          name: campus_ids
          schema:
            items:
              type: integer
            type: array
        - description: Show suggested groups (only works for logged in users)
          in: query
          name: show_suggestions
          schema:
            type: boolean
        - description: An individual id to check if can individual join/leave group
          in: query
          name: context_individual_id
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicGroupSerializer"
                type: array
          description: List of Groups (only public groups if not authenticated)
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
      summary: Get groups
      tags:
        - groups
  /groups/admin:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:groups
      operationId: getGroupsAdmin
      parameters:
        - description: Partial name search
          in: query
          name: name
          schema:
            type: string
        - description: The action that will be performed on the groups
          in: query
          name: action
          schema:
            enum:
              - CREATE_EVENT
              - EDIT_EVENT
              - FULL_GROUP
            type: string
        - description: The campus id of the groups
          in: query
          name: campus_id
          schema:
            type: integer
        - description: Show suggested groups (only works for logged in users)
          in: query
          name: show_suggestions
          schema:
            type: boolean
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicGroupSerializer"
                type: array
          description: List of groups for admin actions
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
      summary: Get groups
      tags:
        - groups
  /groups/{id}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:groups
      operationId: getGroup
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  FullGroupSerializer:
                    $ref: "#/components/schemas/FullGroupSerializer"
                type: object
          description: Group Details
      summary: Get group
      tags:
        - groups
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:groups
      operationId: updateGroup
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                main_leader_id:
                  type: integer
              type: object
        description: The updated group properties
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullGroupSerializer"
          description: Returns the full group serializer
      summary: Update group (currently only main leader is implemented)
      tags:
        - groups
      x-codegen-request-body-name: updateGroupRequest
  /groups/{id}/attendance:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getGroupAttendance
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Start date
          in: query
          name: start
          schema:
            format: date
            type: string
        - description: End date
          in: query
          name: end
          schema:
            format: date
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/AttendanceSummarySerializer"
                  type: object
                type: array
          description: List of event occurrences
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get the group events in the timeframe
      tags:
        - groups
        - events
  /groups/{id}/attendance/needed:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getAttendanceNeededCount
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: the start date to filter by
          in: query
          name: start
          schema:
            format: date
            type: string
        - description: the end date to filter by
          in: query
          name: end
          schema:
            format: date
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                type: integer
          description: The count of events with attendance needed
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get the group attendance needed count
      tags:
        - groups
        - events
  /groups/{id}/attendance_groupings:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:groups
      operationId: getGroupAttendanceGroupings
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/GroupAttendanceGroupingsSerializer"
                type: array
          description: List of group's attendance groupings
      summary: Get group's attendance groupings
      tags:
        - groups
  /groups/{id}/attendance_groupings/sync:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:groups
      operationId: syncGroupAttendanceGroupings
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                adds:
                  items:
                    example: 123
                    type: integer
                  type: array
                removes:
                  items:
                    example: 321
                    type: integer
                  type: array
              type: object
        description: Attendance Groupings to add/remove
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/GroupAttendanceGroupingsSerializer"
                type: array
          description: List of group's attendance groupings
      summary: Sync group's attendance groupings
      tags:
        - groups
      x-codegen-request-body-name: syncGroupAttendanceGroupingRequest
  /groups/{id}/calendar:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getGroupCalendar
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Start date
          in: query
          name: start
          schema:
            format: date
            type: string
        - description: End date
          in: query
          name: end
          schema:
            format: date
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicGroupEventOccurrenceSerializer"
                  type: object
                type: array
          description: Get event list for a group
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get the group events in the timeframe
      tags:
        - groups
        - events
  /groups/{id}/event_owner_candidates:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:groups
      operationId: getGroupEventOwnerCandidates
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Partial name search
          in: query
          name: name
          schema:
            type: string
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualProfileSerializer"
                type: array
          description: Group event owner candidates list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
      summary: Get group event owner candidates list
      tags:
        - groups
  /groups/{id}/events:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getGroupEvents
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: event name
          in: query
          name: name
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicGroupEventOccurrenceSerializer"
                  type: object
                type: array
          description: List of groups events
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get list of group events
      tags:
        - groups
        - events
  /groups/{id}/leaders:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:groups
      operationId: getGroupLeaders
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Partial name search
          in: query
          name: name
          schema:
            type: string
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualGroupsProfileSerializer"
                type: array
          description: Group leaders list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
      summary: Get group leaders list
      tags:
        - groups
  /groups/{id}/members:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:group_members
      operationId: deleteGroupMembers
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Partial name search
          in: query
          name: name
          schema:
            type: string
        - description: Status of members
          in: query
          name: status
          schema:
            default: all
            enum:
              - all
              - leader
              - member
            type: string
        - description: Exclude limited access users
          in: query
          name: exclude_lau
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              properties:
                ids:
                  items:
                    type: integer
                  type: array
              type: object
        description: The individual ids and status to update
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: >-
                    #/components/schemas/RemoveBasicIndividualGroupsProfileSerializer
                type: array
          description: The individuals added to the group
      summary: Remove individuals from a group
      tags:
        - groups
      x-codegen-request-body-name: update group member status
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:group_members
      operationId: getGroupMembers
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Partial name search
          in: query
          name: name
          schema:
            type: string
        - description: Status of members
          in: query
          name: status
          schema:
            default: all
            enum:
              - all
              - leader
              - member
            type: string
        - description: Exclude limited access users
          in: query
          name: exclude_lau
          schema:
            type: boolean
        - description: Include group members who were added to the group before this date
          in: query
          name: added_before
          schema:
            format: date-time
            type: string
        - description: Include group members who were added to the group after this date
          in: query
          name: added_after
          schema:
            format: date-time
            type: string
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  allOf:
                    - $ref: >-
                        #/components/schemas/BasicIndividualGroupsProfileSerializer
                    - properties:
                        actions:
                          properties:
                            can_view_individual:
                              $ref: "#/components/schemas/Action"
                          type: object
                      type: object
                  type: object
                type: array
          description: Group members list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
      summary: Get group members list
      tags:
        - groups
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:group_members
      operationId: addGroupMembers
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Partial name search
          in: query
          name: name
          schema:
            type: string
        - description: Status of members
          in: query
          name: status
          schema:
            default: all
            enum:
              - all
              - leader
              - member
            type: string
        - description: Exclude limited access users
          in: query
          name: exclude_lau
          schema:
            type: boolean
        - $ref: "#/components/parameters/IndividualIds"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualGroupsProfileSerializer"
                type: array
          description: The individuals added to the group
      summary: Add individuals to a group
      tags:
        - groups
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:group_members
      operationId: updateGroupMembers
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Partial name search
          in: query
          name: name
          schema:
            type: string
        - description: Status of members
          in: query
          name: status
          schema:
            default: all
            enum:
              - all
              - leader
              - member
            type: string
        - description: Exclude limited access users
          in: query
          name: exclude_lau
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              properties:
                individual_ids:
                  items:
                    type: integer
                  type: array
                status:
                  enum:
                    - INVITED
                    - REQUESTING
                    - MEMBER
                    - LEADER
                  type: string
              type: object
        description: The individual ids and status to update
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualGroupsProfileSerializer"
                type: array
          description: The individuals added to the group
      summary: Update individuals status in a group
      tags:
        - groups
      x-codegen-request-body-name: update group member status
  /groups/{id}/messages:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:messages
      operationId: getGroupMessages
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Type of messages to get
          in: query
          name: leaders_only
          schema:
            type: boolean
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/GroupMessageSerializer"
                type: array
          description: List of Group Messages
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get group messages
      tags:
        - groups
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:messages
      operationId: createGroupMessage
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/GroupMessageRequestSerializer"
        description: The group message to create
        required: false
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GroupMessageSerializer"
          description: Returns the group message serializer
      summary: Add new group message
      tags:
        - groups
      x-codegen-request-body-name: group message
  /groups/{id}/needs:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:needs
      operationId: getGroupNeeds
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicNeedDetailsSerializer"
                type: array
          description: List of group needs
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get group needs
      tags:
        - needs
        - groups
  /groups/{id}/photo:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:groups
      operationId: deleteGroupPhoto
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Remove group's photo
      tags:
        - groups
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:groups
      operationId: updateGroupPhoto
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                photo:
                  description: Group Photo (will crop to a 16:9 image)
                  format: binary
                  type: string
              required:
                - photo
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FullGroupSerializer"
          description: Returns the full group serializer
      summary: Update group's photo
      tags:
        - groups
  /groups/{id}/requesting:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:group_members
      operationId: getIndividualsRequestingToJoinGroup
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualGroupsProfileSerializer"
                type: array
          description: Individuals requesting to join the group
      summary: Get individual's requesting to join the group
      tags:
        - groups
  /groups/{id}/special_days:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:group_members
      operationId: getGroupSpecialDays
      parameters:
        - description: The group's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/GroupSpecialDaysSerializer"
                  type: object
                type: array
          description: List of group special days
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get the group special days
      tags:
        - groups
  /individual_message_replies/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual_messages
      operationId: deleteIndividualMessageReply
      parameters:
        - description: The individual message reply id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Deletes a message reply
      tags:
        - individuals
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual_messages
      operationId: updateIndividualMessageReply
      parameters:
        - description: The individual message reply id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndividualMessageReplyRequestSerializer"
        description: The reply to send to an individual
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualMessageReplySerializer"
          description: Returns the individual message reply serializer
      summary: Edit an individual a message reply
      tags:
        - individuals
      x-codegen-request-body-name: individualMessageReply
  /individual_messages/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual_messages
      operationId: deleteIndividualMessage
      parameters:
        - description: The individual message id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Deletes a message
      tags:
        - individuals
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual_messages
      operationId: updateIndividualMessage
      parameters:
        - description: The individual message id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndividualMessageRequestSerializer"
        description: The message to send an individual
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualMessageSerializer"
          description: Returns the individual message serializer
      summary: Edit an individual a message
      tags:
        - individuals
      x-codegen-request-body-name: individualMessage
  /individual_messages/{id}/replies:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual_messages
      operationId: getIndividualMessageReplies
      parameters:
        - description: The individual message id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndividualMessageReplySerializer"
                type: array
          description: Returns an array of individual message reply serializers
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Gets messages replies for an individual message
      tags:
        - individuals
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual_messages
      operationId: sendIndividualMessageReply
      parameters:
        - description: The individual message id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndividualMessageReplyRequestSerializer"
        description: The reply to send to an individual
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualMessageReplySerializer"
          description: Returns the individual message reply serializer
      summary: Sends a reply to an individual message
      tags:
        - individuals
      x-codegen-request-body-name: individualMessageReply
  /individuals:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals
      operationId: getIndividuals
      parameters:
        - description: Partial search of names, phone numbers, and email addresses
          in: query
          name: name
          schema:
            type: string
        - description: Include inactive individuals in the results
          in: query
          name: include_inactive
          schema:
            type: boolean
        - description: Exclude limited access users in the results
          in: query
          name: exclude_limited_access_user
          schema:
            default: false
            type: boolean
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualProfileSerializer"
                type: array
          description: List of Individuals
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "412":
          $ref: "#/components/responses/NotValid"
      summary: Get individuals
      tags:
        - individuals
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individuals
      operationId: createIndividual
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndividualDetailsRequestSerializer"
        description: The individual to create/edit
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/IndividualDetailsWithCustomFieldsSerializer
          description: Returns the full profile serializer of the individual
      summary: Creates an individual
      tags:
        - individuals
      x-codegen-request-body-name: individual
  /individuals/background_checks:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:background_checks
      operationId: getBackgroundChecks
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BackgroundCheckSerializer"
                type: array
          description: List of background checks
      summary: >-
        Get all background checks uploaded the vendor associated with that
        access token
      tags:
        - individuals
        - background checks
  /individuals/background_checks/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:background_checks
      operationId: deleteBackgroundCheck
      parameters:
        - description: The background check id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Remove background check
      tags:
        - individuals
        - background checks
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:background_checks
      operationId: updateBackgroundCheck
      parameters:
        - description: The background check id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                completed_date:
                  format: date-time
                  type: string
                package_name:
                  type: string
                package_slug:
                  type: string
                report_status:
                  enum:
                    - CLEAR
                    - CONSIDER
                    - DISPUTED
                    - DISPUTED_CONSIDER
                    - ENGAGED
                    - SUSPENDED
                  type: string
              type: object
        description: A background check object or array of background check objects
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackgroundCheckSerializer"
          description: The background check with updated values
      summary: Update an existing background check
      tags:
        - individuals
        - background checks
      x-codegen-request-body-name: createEditBackgroundCheck
  /individuals/duplicates:
    get:
      description: >
        Properties | Description

        ---------- | -----------

        Scopes     | read:individuals


        Matching Scores


        The following table shows how parameters are compared to individual
        fields, and what the resulting score is when they are considered a
        match.


        The soundex comparison is run on the first 4 characters of the two
        values.


        parameter   | individual field | comparison   | score

        ---------   | ---------------- | ------------ | -----

        last name   | last name        | exact match  | 10

        last name   | last name        | soundex      | 7

        first name  | legal name       | exact match  | 5

        first name  | legal name       | soundex      | 4

        first name  | middle name      | exact match  | 5

        first name  | middle name      | soudex       | 4

        first name  | first name       | exact match  | 8

        first name  | first name       | sondex       | 5

        email       | primary email    | exact match  | 16

        phone       | mobile phone     | exact match  | 15

        phone       | mobile phone     | last 7 match | 10

        phone       | home phone       | exact match  | 9

        phone       | home phone       | last 7 match | 6

        phone       | work phone       | exact match  | 9

        phone       | work phone       | last 7 match | 6

        street      | mailing street   | exact match  | 9

        street      | home street      | exact match  | 9

        street      | work street      | exact match  | 9
      operationId: getDuplicateIndividuals
      parameters:
        - description: Match the last name
          in: query
          name: last_name
          schema:
            type: string
        - description: Match the first name
          in: query
          name: first_name
          schema:
            type: string
        - description: Exclude family members in family
          in: query
          name: family_id
          schema:
            type: integer
        - description: Match the email address
          in: query
          name: email
          schema:
            type: string
        - description: Match the primary email address
          explode: false
          in: query
          name: emails
          schema:
            items:
              type: string
            type: array
          style: form
        - description: Match the phone number
          in: query
          name: phone
          schema:
            type: string
        - description: Match the phone numbers
          explode: false
          in: query
          name: phones
          schema:
            items:
              type: string
            type: array
          style: form
        - description: Match the mailing street
          explode: false
          in: query
          name: streets
          schema:
            items:
              type: string
            type: array
          style: form
        - description: >-
            minimum score that will return a matching individual (min is 4,
            default is 16)
          in: query
          name: min_match_score
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DuplicateIndividualProfileSerializer"
                type: array
          description: List of Individuals
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "412":
          $ref: "#/components/responses/NotValid"
      summary: Get potential duplicates matching the giving query parameters
      tags:
        - individuals
  /individuals/events/{event_id}:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:events
      operationId: createIndividualEvents
      parameters:
        - description: The event's id
          in: path
          name: event_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                individual_ids:
                  items:
                    type: integer
                  type: array
                status:
                  enum:
                    - REQUESTING
                    - GOING
                    - NOT_GOING
                    - MAYBE
                    - NOT_RESPONDED
                  type: string
              type: object
        description: The event status and individuals to create
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/CreateIndividualEventsSerializer"
                  type: object
                type: array
          description: Update an individual's event status
        "400":
          content: {}
          description: Invalid event status provided
        "403":
          content: {}
          description: Insufficient permissions to update individual event
        "404":
          content: {}
          description: The event does not exist
      summary: Create a batch of individual's event status
      tags:
        - events
        - individuals
      x-codegen-request-body-name: createIndividualEvents
  /individuals/merge_history:
    get:
      description: |
        Returns a paginated list of merged individual records.

        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals
      operationId: getMergedIndividualHistory
      parameters:
        - description: Return records created since this ISO8601 date (inclusive)
          in: query
          name: since
          required: false
          schema:
            format: date-time
            type: string
        - description: The page number to return
          in: query
          name: page
          required: false
          schema:
            default: 1
            minimum: 1
            type: integer
        - description: The number of records per page
          in: query
          name: perPage
          required: false
          schema:
            default: 25
            maximum: 100
            minimum: 1
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  items:
                    items:
                      $ref: "#/components/schemas/MergedIndividualOutputType"
                    type: array
                  total:
                    type: integer
                type: object
          description: Paginated list of merged individuals
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      security:
        - bearerAuth: []
      summary: Get merged individual history
      tags:
        - individuals
  /individuals/metrics/duplicates:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals_metrics
      operationId: getIndividualMetricsDuplicates
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  possible:
                    description: >-
                      The total number of profiles that have a possible
                      duplicate
                    type: integer
                type: object
          description: Count of individuals who are possible duplicates
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get individual duplicate metrics
      tags:
        - individuals
        - metrics
  /individuals/{id}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals
      operationId: getIndividual
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/IndividualDetailsWithCustomFieldsSerializer
          description: Individual Details
      summary: Get details about an individual
      tags:
        - individuals
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individuals
      operationId: updateIndividual
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndividualDetailsRequestSerializer"
        description: The individual to create/edit
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/IndividualDetailsWithCustomFieldsSerializer
          description: Returns the full profile serializer of the individual
      summary: Updates individual
      tags:
        - individuals
      x-codegen-request-body-name: individual
  /individuals/{id}/abilities:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals
      operationId: getIndividualAbilities
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicListSerializer"
                type: array
          description: The individual's my fit abilities
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get an individual's my fit abilities
      tags:
        - individuals
  /individuals/{id}/admin/events:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getIndividualAdminEvents
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - in: query
          name: name
          schema:
            type: string
        - in: query
          name: range_type
          schema:
            $ref: "#/components/schemas/EventRangeTypeFilter"
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/BasicEventSerializer"
                type: array
          description: Get event list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
      summary: Get individual events they organize
      tags:
        - events
  /individuals/{id}/admin/processes:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:process_queues
      operationId: getIndividualAdminProcesses
      parameters:
        - description: The individual id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: Filter processes on active or archived
          in: query
          name: active
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicProcessSerializer"
                    - properties:
                        actions:
                          properties:
                            can_remove_process_manager:
                              $ref: "#/components/schemas/Action"
                            can_view_process:
                              $ref: "#/components/schemas/Action"
                          type: object
                      type: object
                  type: object
                type: array
          description: Managed Processes list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get a list of a processes the individual manages
      tags:
        - process queues
  /individuals/{id}/admin/queues:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:process_queues
      operationId: getIndividualAdminProcessQueues
      parameters:
        - description: The individual id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: Filter queues on the parent process being active or archived
          in: query
          name: active
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  allOf:
                    - $ref: "#/components/schemas/BasicQueueSerializer"
                    - properties:
                        actions:
                          properties:
                            can_remove_queue_manager:
                              $ref: "#/components/schemas/Action"
                            can_view_process_queue:
                              $ref: "#/components/schemas/Action"
                          type: object
                        assigned_count:
                          type: integer
                      type: object
                  type: object
                type: array
          description: Managed Queues list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get a list of a queues the individual manages
      tags:
        - process queues
  /individuals/{id}/assignments:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getIndividualAssignments
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          "*/*":
            schema:
              properties:
                end_date:
                  format: date
                  type: string
                start_date:
                  format: date
                  type: string
                statuses:
                  items:
                    $ref: "#/components/schemas/AssignmentStatus"
                  type: array
              type: object
        description: Request an individuals assignments
        required: false
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/AssignmentSerializer"
                type: array
          description: Returns the individual's assignments
      summary: Gets an individual's assignments
      tags:
        - scheduling
        - individuals
      x-codegen-request-body-name: individualsAssignmentsRequest
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: writeIndividualAssignments
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          "*/*":
            schema:
              properties:
                status:
                  enum:
                    - ACCEPTED
                    - DECLINED
                  type: string
              type: object
        description: update all pending assignments to status
        required: false
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/AssignmentSerializer"
                type: array
          description: Returns the individual's assignments
      summary: Updates all assignments to given status
      tags:
        - scheduling
        - individuals
      x-codegen-request-body-name: updateAllAssignmentsRequest
  /individuals/{id}/background_checks:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:background_checks
      operationId: getIndividualBackgroundChecks
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BackgroundCheckSerializer"
                type: array
          description: List of background checks
      summary: >-
        Get all background checks for an individual by the vendor associated
        with the access token
      tags:
        - individuals
        - background checks
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:background_checks
      operationId: createBackgroundCheck
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                completed_date:
                  format: date-time
                  type: string
                package_name:
                  type: string
                package_slug:
                  type: string
                report_status:
                  enum:
                    - CLEAR
                    - CONSIDER
                    - DISPUTED
                    - DISPUTED_CONSIDER
                    - ENGAGED
                    - SUSPENDED
                  type: string
              type: object
        description: A background check object or array of background check objects
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BackgroundCheckSerializer"
          description: Upload a background check
      summary: Create a background check for an individual
      tags:
        - individuals
        - background checks
      x-codegen-request-body-name: createEditBackgroundCheck
  /individuals/{id}/calendar:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:events
      operationId: getIndividualCalendar
      parameters:
        - in: query
          name: start
          schema:
            format: date
            type: string
        - in: query
          name: end
          schema:
            format: date
            type: string
        - in: query
          name: campus_ids
          schema:
            items:
              type: integer
            type: array
        - in: query
          name: include_shared_events
          schema:
            type: boolean
        - in: query
          name: group_type_ids
          schema:
            items:
              type: integer
            type: array
        - in: query
          name: group_name
          schema:
            type: string
        - in: query
          name: attendance_grouping_ids
          schema:
            items:
              type: integer
            type: array
        - description: The individual's id
          in: path
          name: context_individual_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/BasicEventSerializer"
                type: array
          description: Get event list
      summary: Get event calendar for an individual
      tags:
        - events
        - individuals
  /individuals/{id}/categorized_timelines:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals
      operationId: getIndividualsCategorizedTimelines
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: Categories of items to return
          explode: true
          in: query
          name: categories[]
          schema:
            items:
              $ref: "#/components/schemas/TimelineCategories"
            type: array
          style: form
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndividualTimelineSerializer"
                type: array
          description: Items on an individual's timeline
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get an individual's timeline by categories.
      tags:
        - individuals
  /individuals/{id}/contact_info:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individuals
      operationId: updateIndividualContactInfo
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndividualContactInfoRequestSerializer"
        description: The individual contact info to edit
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicIndividualProfileSerializer"
          description: Returns the full profile serializer of the individual
      summary: Updates individual's contact info
      tags:
        - individuals
      x-codegen-request-body-name: individual
  /individuals/{id}/departments:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual_departments
      operationId: getIndividualsDepartments
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/IndividualsDepartmentSerializer"
                type: array
          description: List of Individuals Departments
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get the departments the individual is a department admin of
      tags:
        - departments
  /individuals/{id}/duplicates:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals
      operationId: getDuplicateIndividualsForIndividual
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DuplicateIndividualProfileSerializer"
          description: Individual Details
      summary: Get potential duplicates matching the giving query parameters
      tags:
        - individuals
  /individuals/{id}/events/{event_id}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual_events
      operationId: getIndividualEvent
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The event's id
          in: path
          name: event_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/BasicIndividualEventsProfileWithEventSerializer
          description: Get individual event details
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get an individual's event details
      tags:
        - events
        - individuals
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual_events
      operationId: updateIndividualEvent
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The event's id
          in: path
          name: event_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/BaseIndividualEventStatuses"
                - $ref: "#/components/schemas/BaseIndividualEvent"
        description: The new individual event status
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/BasicIndividualEventsProfileWithEventSerializer
          description: Update an individual's event status
        "201":
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/BasicIndividualEventsProfileWithEventSerializer
          description: Create an individual's event status
        "400":
          content: {}
          description: Invalid event status provided
        "403":
          content: {}
          description: Insufficient permissions to update individual event
        "404":
          content: {}
          description: The event does not exist
      summary: Update an individual's event status
      tags:
        - events
        - individuals
      x-codegen-request-body-name: updateIndividualEvent
  /individuals/{id}/files:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual_files
      operationId: getIndividualFiles
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndividualFileSerializer"
                type: array
          description: The individual's profile files
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get an individual's profile files
      tags:
        - files
        - individuals
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual_files
      operationId: uploadIndividualFile
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                description:
                  description: Description of file
                  type: string
                file:
                  description: File to upload
                  format: binary
                  type: string
                label:
                  description: Label for file
                  type: string
                private:
                  description: Make file private
                  type: boolean
              required:
                - file
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndividualFileSerializer"
                type: array
          description: The files added to the individual's profile
        "400":
          content: {}
          description: Invalid file or file type provided
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Upload a file to an individual's profile
      tags:
        - files
        - individuals
  /individuals/{id}/files/{file_id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual_files
      operationId: deleteIndividualFile
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The file's id
          in: path
          name: file_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Deletes file
      tags:
        - files
        - individuals
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual_files
      operationId: updateIndividualFile
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The file's id
          in: path
          name: file_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                description:
                  description: Description of file
                  type: string
                file:
                  description: File to upload
                  format: binary
                  type: string
                label:
                  description: Label for file
                  type: string
                private:
                  description: Make file private
                  type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndividualFileSerializer"
                type: array
          description: Returns the individual file serializer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Updates file
      tags:
        - files
        - individuals
  /individuals/{id}/form_responses:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:form_responses
      operationId: getIndividualFormResponses
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Include forms that the user is a form administrator
          in: query
          name: include_administrated_forms
          schema:
            type: boolean
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: >-
            Order results are returned, created%20desc, created%20asc,
            title%20desc, title%20asc
          in: query
          name: order
          schema:
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/BasicFormResponseSerializer"
                type: array
          description: List of form responses
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get an individual's form responses
      tags:
        - forms
  /individuals/{id}/forms:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual_forms
      operationId: getIndividualForms
      parameters:
        - description: The individuals id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: Filter forms by active status
          in: query
          name: status
          schema:
            default: ALL
            enum:
              - ACTIVE
              - INACTIVE
              - ALL
            type: string
        - description: Partial name search
          in: query
          name: name
          schema:
            type: string
        - description: Include forms that the user is a form administrator
          in: query
          name: include_administrated_forms
          schema:
            type: boolean
      responses:
        "200":
          content:
            "*/*":
              schema:
                properties:
                  BasicFormSerializer:
                    $ref: "#/components/schemas/BasicFormSerializer"
                type: object
          description: List of forms individual manages
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get list of forms individual manages
      tags:
        - forms
  /individuals/{id}/gifts:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals
      operationId: getIndividualGifts
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicListSerializer"
                type: array
          description: The individual's my fit gifts
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get an individual's my fit gifts
      tags:
        - individuals
  /individuals/{id}/groups:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual_groups
      operationId: getIndividualsGroups
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: groups with a specific interaction type
          explode: true
          in: query
          name: interaction_type[]
          schema:
            items:
              $ref: "#/components/schemas/GroupInteractionType"
            type: array
          style: form
        - description: individual status in groups, defaults to MEMBER and LEADER
          explode: true
          in: query
          name: status[]
          schema:
            items:
              $ref: "#/components/schemas/IndividualGroupStatus"
            type: array
          style: form
        - description: restrict group list to only those in the provided ids
          explode: true
          in: query
          name: ids[]
          schema:
            items:
              type: integer
            type: array
          style: form
        - description: get inactive groups or not
          in: query
          name: inactive
          schema:
            type: boolean
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: >-
                    #/components/schemas/BasicIndividualGroupsProfileWithGroupSerializer
                type: array
          description: List of Groups
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get individuals groups
      tags:
        - groups
  /individuals/{id}/groups/bulk:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual_groups
      operationId: updateIndividualGroups
      parameters:
        - description: The individual's id
          example: 8
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/UpdateIndividualGroupsRequest"
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UpdateIndividualGroupsOutputSerializer"
          description: >-
            The results of the remove action. The response contains the result
            for every requested `groupId`.
        "400":
          content: {}
          description: >-
            Validation of the input data has failed, for example an invalid
            `action` or a non-existent `groupId` is provided
        "404":
          content: {}
          description: The individual is not found
      summary: Mass remove individual from multiple groups
      tags:
        - groups
        - individuals
  /individuals/{id}/groups/{group_id}:
    delete:
      description: >
        Properties | Description

        ---------- | -----------

        Scopes     | write:individual_groups


        If you need to remove an individual from multiple groups at once, use
        the [`/individuals/{id}/groups/bulk`](#/groups/updateIndividualGroups)
        API instead.
      operationId: leaveGroup
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The group's id
          in: path
          name: group_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Leave a group
      tags:
        - groups
        - individuals
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual_groups
      operationId: getIndividualsGroup
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The group's id
          in: path
          name: group_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: >-
                  #/components/schemas/BasicIndividualGroupsProfileWithGroupSerializer
          description: The group
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get individual's group membership details
      tags:
        - groups
        - individuals
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual_groups
      operationId: joinGroup
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The group's id
          in: path
          name: group_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: >-
                  #/components/schemas/BasicIndividualGroupsProfileWithGroupSerializer
          description: The group
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Join a group
      tags:
        - groups
        - individuals
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual_groups
      operationId: updateIndividualsGroup
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The group's id
          in: path
          name: group_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          "*/*":
            schema:
              properties:
                receive_sms:
                  type: boolean
              type: object
        description: The individuals communication preferences
        required: false
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: >-
                  #/components/schemas/BasicIndividualGroupsProfileWithGroupSerializer
          description: The group
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Update individual's group membership details
      tags:
        - groups
        - individuals
      x-codegen-request-body-name: update individuals group request
  /individuals/{id}/history:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual
      operationId: getIndividualHistory
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndividualHistorySerializer"
                type: array
          description: Returns an array of individual history serializers
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Gets recent edits associated with the individual
      tags:
        - individuals
  /individuals/{id}/history/groups:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual_groups
      operationId: getIndividualsGroupsHistory
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/IndividualGroupsHistorySerializer"
                type: array
          description: List of Groups
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get individuals groups history
      tags:
        - groups
  /individuals/{id}/ignored:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals
      operationId: getIgnoredIndividualsForIndividual
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DuplicateIndividualProfileSerializer"
          description: Individual ignored profile
      summary: Get profiles ingnored by an individual
      tags:
        - individuals
  /individuals/{id}/messages:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual_messages
      operationId: getIndividualMessages
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: >-
                    #/components/schemas/IndividualMessageWithRecentRepliesSerializer
                type: array
          description: Returns an array of individual message serializers
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Gets messages sent or received by an individual
      tags:
        - individuals
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual_messages
      operationId: sendIndividualMessage
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndividualMessageRequestSerializer"
        description: The message to send an individual
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualMessageSerializer"
          description: Returns the individual message serializer
      summary: Sends an individual a message
      tags:
        - individuals
      x-codegen-request-body-name: individualMessage
  /individuals/{id}/metrics/attendance:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals_metrics
      operationId: getIndividualMetricsAttendance
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Starting date for data (max range to end date is 12 months)
          in: query
          name: start
          schema:
            format: date
            type: string
        - description: Ending date for data (max range from start date is 12 months)
          in: query
          name: end
          schema:
            format: date
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualMetricSerializer"
                type: array
          description: List of Attendance Metrics grouped into month intervals
        "400":
          $ref: "#/components/responses/NotValid"
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get individual attendance metrics
      tags:
        - individuals
        - metrics
  /individuals/{id}/metrics/attendance/summary:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals_metrics
      operationId: getIndividualMetricsAttendanceRange
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualMetricSummarySerializer"
                type: array
          description: Details of individual's first and latest attendance metrics
        "400":
          $ref: "#/components/responses/NotValid"
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get occurrence of first and latest individual attendance metrics
      tags:
        - individuals
        - metrics
  /individuals/{id}/metrics/form_responses:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals_metrics
      operationId: getIndividualMetricsFormResponses
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: >-
            Form responses are considered "recent" if they were created within
            this many days of the current date
          in: query
          name: recent_range
          schema:
            default: 90
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  recent:
                    description: The number of recent form responses
                    type: integer
                  recent_range:
                    description: >-
                      The recent responses are those created within this many
                      days of the current date
                    type: integer
                  total:
                    description: The total form responses for the individual
                    type: integer
                  unpaid:
                    description: The number of unpaid form responses for the individual
                    type: integer
                type: object
          description: Individual's form metrics
        "400":
          $ref: "#/components/responses/NotValid"
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get aggregate information about an individual's form response history
      tags:
        - individuals
        - metrics
        - forms
  /individuals/{id}/metrics/giving:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals_metrics
      operationId: getIndividualMetricsGiving
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Starting date for data (max range to end date is 12 months)
          in: query
          name: start
          schema:
            format: date
            type: string
        - description: Ending date for data (max range from start date is 12 months)
          in: query
          name: end
          schema:
            format: date
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualMetricSerializer"
                type: array
          description: List of Giving Metrics grouped into month intervals
        "400":
          $ref: "#/components/responses/NotValid"
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get individual giving metrics
      tags:
        - individuals
        - metrics
  /individuals/{id}/metrics/giving/summary:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals_metrics
      operationId: getIndividualMetricsGivingRange
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualMetricSummarySerializer"
                type: array
          description: Details of individual's first and latest giving metrics
        "400":
          $ref: "#/components/responses/NotValid"
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get occurrence of first and latest individual giving metrics
      tags:
        - individuals
        - metrics
  /individuals/{id}/metrics/groups:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals_metrics
      operationId: getIndividualMetricsGroups
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/GroupMetricSerializer"
          description: Details of individual's group statistics
        "400":
          $ref: "#/components/responses/NotValid"
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get statistics about the individual's groups
      tags:
        - individuals
        - metrics
        - groups
  /individuals/{id}/metrics/groups_history:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals_metrics
      operationId: getIndividualMetricsGroupsHistory
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The number of months to return. Always includes the current month.
          in: query
          name: months_ago
          schema:
            default: 12
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/GroupsHistoryMetricSerializer"
                type: array
          description: List of individual's group statistics by month for the past X months
        "400":
          $ref: "#/components/responses/NotValid"
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get the individual's group totals for the past X months
      tags:
        - individuals
        - metrics
        - groups
  /individuals/{id}/metrics/process_queues:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals_metrics
      operationId: getIndividualMetricsProcessQueues
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The queue ids to filter for metrics
          explode: false
          in: query
          name: queue_ids
          schema:
            items:
              type: integer
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessQueueMetricSerializer"
          description: Details of individual's process queue activity
        "400":
          $ref: "#/components/responses/NotValid"
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get information about the individual's process queue activity
      tags:
        - individuals
        - metrics
        - process queues
  /individuals/{id}/metrics/serving:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals_metrics
      operationId: getIndividualMetricsServing
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Starting date for data (max range to end date is 12 months)
          in: query
          name: start
          schema:
            format: date
            type: string
        - description: Ending date for data (max range from start date is 12 months)
          in: query
          name: end
          schema:
            format: date
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualMetricSerializer"
                type: array
          description: List of Serving Metrics grouped into month intervals
        "400":
          $ref: "#/components/responses/NotValid"
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get individual serving metrics
      tags:
        - individuals
        - metrics
  /individuals/{id}/metrics/serving/summary:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals_metrics
      operationId: getIndividualMetricsServingRange
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualMetricSummarySerializer"
                type: array
          description: Details of individual's first and latest serving metrics
        "400":
          $ref: "#/components/responses/NotValid"
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get occurrence of first and latest individual serving metrics
      tags:
        - individuals
        - metrics
  /individuals/{id}/needs:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual_needs
      operationId: getIndividualNeeds
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - in: query
          name: range_type
          schema:
            enum:
              - ALL
              - FUTURE
              - PAST
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicNeedSerializer"
                type: array
          description: List of needs an individual coordinates
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get list of needs an individual coordinates
      tags:
        - needs
        - individuals
  /individuals/{id}/notes:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual_notes
      operationId: getIndividualNotes
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: The contexts to get notes for
          explode: true
          in: query
          name: context[]
          schema:
            items:
              enum:
                - GROUP
                - DEPARTMENT
                - PROCESS_QUEUE
                - GENERAL
              type: string
            type: array
          style: form
        - description: The context ids to filte notes for
          in: query
          name: context_id
          schema:
            type: integer
        - description: The sharing level to get notes for
          explode: true
          in: query
          name: sharing_level[]
          schema:
            items:
              enum:
                - PRIVATE
                - CONTEXT_LEADERS
                - ALL_LEADERS
              type: string
            type: array
          style: form
        - description: Include the context
          in: query
          name: include_context
          schema:
            type: boolean
        - description: Include the creator
          in: query
          name: include_creator
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicNoteSerializer"
                type: array
          description: Individual note details
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get notes for an individual
      tags:
        - individuals
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual_notes
      operationId: createIndividualNote
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                context:
                  enum:
                    - GROUP
                    - DEPARTMENT
                    - PROCESS_QUEUE
                    - GENERAL
                  type: string
                context_id:
                  type: integer
                note:
                  type: string
                sharing_level:
                  enum:
                    - PRIVATE
                    - CONTEXT_LEADERS
                    - ALL_LEADERS
                  type: string
              type: object
        description: The new note
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoteDetailsSerializer"
          description: Returns the new note
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Create note
      tags:
        - individuals
      x-codegen-request-body-name: note
  /individuals/{id}/notes/leaders:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual_notes
      operationId: getIndividualNoteLeaders
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: The contexts to get notes for
          explode: true
          in: query
          name: context[]
          schema:
            items:
              enum:
                - GROUP
                - DEPARTMENT
                - PROCESS_QUEUE
                - GENERAL
              type: string
            type: array
          style: form
        - description: The sharing level to get notes for
          explode: true
          in: query
          name: sharing_level[]
          schema:
            items:
              enum:
                - PRIVATE
                - CONTEXT_LEADERS
                - ALL_LEADERS
              type: string
            type: array
          style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualProfileSerializer"
                type: array
          description: List of Note Leaders
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get the sharing level leaders associated to an individual's notes
      tags:
        - notes
  /individuals/{id}/passions:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals
      operationId: getIndividualPassions
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicListSerializer"
                type: array
          description: The individual's my fit passions
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get an individual's my fit passions
      tags:
        - individuals
  /individuals/{id}/photo:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individuals
      operationId: deleteIndividualPhoto
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Remove individual's photo
      tags:
        - individuals
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individuals
      operationId: updateIndividualPhoto
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                photo:
                  description: Profile Photo (will crop to a square image)
                  format: binary
                  type: string
              required:
                - photo
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualDetailsSerializer"
          description: Returns the full profile serializer of the individual
      summary: Update individual's photo
      tags:
        - individuals
  /individuals/{id}/pledges:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual_pledges
      operationId: getIndividualPledges
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicPledgeSerializer"
                type: array
          description: The individual's pledges
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get an individual's pledges
      tags:
        - individuals
  /individuals/{id}/privacy_settings:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals_privacy_settings
      operationId: getIndividualPrivacySettings
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualPrivacySettingsSerializer"
          description: The individual's privacy settings
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get an individual's privacy settings
      tags:
        - individuals
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individuals_privacy_settings
      operationId: updateIndividualPrivacySettings
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          "*/*":
            schema:
              properties:
                address_privacy_level:
                  enum:
                    - LEADERSHIP_ONLY
                    - GROUP_MEMBERS
                    - EVERYONE
                  type: string
                anniversary_privacy_level:
                  enum:
                    - LEADERSHIP_ONLY
                    - GROUP_MEMBERS
                    - EVERYONE
                  type: string
                birthday_privacy_level:
                  enum:
                    - LEADERSHIP_ONLY
                    - GROUP_MEMBERS
                    - EVERYONE
                  type: string
                email_privacy_level:
                  enum:
                    - LEADERSHIP_ONLY
                    - GROUP_MEMBERS
                    - EVERYONE
                  type: string
                listed:
                  type: boolean
                phone_privacy_level:
                  enum:
                    - LEADERSHIP_ONLY
                    - GROUP_MEMBERS
                    - EVERYONE
                  type: string
              type: object
        description: The individual's privacy settings
        required: false
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/IndividualPrivacySettingsSerializer"
          description: The individual's privacy settings
      summary: Update an individual's privacy settings
      tags:
        - individuals
      x-codegen-request-body-name: privacy_settings
  /individuals/{id}/sacraments:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual
      operationId: getSacrament
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SacramentSerializer"
        description: A sacrament object or array of sacrament objects
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SacramentSerializer"
          description: Returns the individuals sacrament
      summary: gets individual sacraments
      tags:
        - sacraments
      x-codegen-request-body-name: GetSacramentRequest
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual
      operationId: createSacrament
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SacramentSerializer"
        description: A sacrament object or array of sacrament objects
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SacramentSerializer"
          description: Returns the sacrament
      summary: Create individual sacrament
      tags:
        - sacraments
      x-codegen-request-body-name: CreateSacramentRequest
  /individuals/{id}/scheduled_gifts:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individual_scheduled_gifts
      operationId: getIndividualScheduledGifts
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: Filter repeating gifts by active status
          in: query
          name: status
          schema:
            default: ALL
            enum:
              - ACTIVE
              - INACTIVE
              - ALL
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicScheduledGiftSerializer"
                type: array
          description: The individual's scheduled gifts
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get an individual's scheduled gifts
      tags:
        - individuals
  /individuals/{id}/scheduled_gifts/{gift_id}:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual_scheduled_gifts
      operationId: updateIndividualScheduledGift
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The scheduled gift's id
          in: path
          name: gift_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                merchant_status:
                  enum:
                    - CANCELLED
                  type: string
              type: object
        description: The updated scheduled gift
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicScheduledGiftSerializer"
          description: The scheduled gift details
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Update an individual's scheduled gift
      tags:
        - individuals
      x-codegen-request-body-name: updateScheduledGift
  /individuals/{id}/social_networks:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals
      operationId: getIndividualSocialNetworks
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndividualsSocialNetworkSerializer"
                type: array
          description: The individual's social networks
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get an individual's social networks
      tags:
        - individuals
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individuals
      operationId: updateIndividualSocialNetworks
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IndividualsSocialNetworkRequest"
        description: Update an individuals social networks
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndividualsSocialNetworkSerializer"
                type: array
          description: The individual's social networks
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Update an individual's social networks
      tags:
        - individuals
      x-codegen-request-body-name: updateIndividualsSocialNetworks
  /individuals/{id}/timelines:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals
      operationId: getIndividualsTimeline
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: Types of items to return
          explode: true
          in: query
          name: types[]
          schema:
            items:
              $ref: "#/components/schemas/TimelineTypes"
            type: array
          style: form
        - description: when an item has peers, only return it if it is the latest peer
          in: query
          name: latest_peer_only
          schema:
            default: false
            type: boolean
        - description: include family members in timeline entries
          in: query
          name: include_family
          schema:
            default: false
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndividualTimelineSerializer"
                type: array
          description: Items on an individual's timeline
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get an individual's timeline
      tags:
        - individuals
  /individuals/{id}/timelines/{context_type}/{context_id}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals
      operationId: getIndividualsContextualTimelines
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - in: path
          name: context_type
          required: true
          schema:
            $ref: "#/components/schemas/TimelineTypes"
        - description: The context's id
          in: path
          name: context_id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndividualTimelineSerializer"
                type: array
          description: Items on an individual's timeline
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get an individual's timeline by context
      tags:
        - individuals
  /individuals/{individual_id}/favorite_campuses/{campus_id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individuals
      operationId: removeIndividualFavoriteCampus
      parameters:
        - description: The current user's individual id
          in: path
          name: individual_id
          required: true
          schema:
            type: integer
        - description: The campus id to remove from favorites
          in: path
          name: campus_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: >-
        Remove a favorite campus from an individual. Must be the currently
        logged in user.
      tags:
        - church
        - individuals
        - campuses
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes      | write:individuals
      operationId: addIndividualFavoriteCampus
      parameters:
        - description: The current user's individual id
          in: path
          name: individual_id
          required: true
          schema:
            type: integer
        - description: The campus id to mark as favorite
          in: path
          name: campus_id
          required: true
          schema:
            type: integer
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualFavoriteCampusSerializer"
          description: The individual favorite campus
      summary: >-
        Mark a campus as a favorite for an individual. Must be the currently
        logged in user.
      tags:
        - church
        - individuals
        - campuses
  /individuals/{individual_id}/sacraments/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual
      operationId: deleteIndividualSacrament
      parameters:
        - description: The individual's id
          in: path
          name: individual_id
          required: true
          schema:
            type: integer
        - description: The sacrament id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Delete an individual sacrament
      tags:
        - sacraments
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individual
      operationId: updateIndividualSacrament
      parameters:
        - description: The individual's id
          in: path
          name: individual_id
          required: true
          schema:
            type: integer
        - description: The sacrament id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SacramentSerializer"
        description: Update a sacrament object or array of sacrament objects
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SacramentSerializer"
          description: Returns the sacrament
      summary: Update individual sacrament
      tags:
        - sacraments
      x-codegen-request-body-name: UpdateIndividualSacramentRequest
  /individuals/{winner_id}/merge:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:individuals
      operationId: mergeIndividuals
      parameters:
        - description: The winner individual's id
          in: path
          name: winner_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MergeMultipleIndividualsRequestSerializer"
        description: The losers and override params for the merge
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualDetailsSerializer"
          description: Returns the full profile serializer of the individual
      summary: Merge the loser individual profile into the winner's
      tags:
        - individuals
      x-codegen-request-body-name: merge
  /integrations/checkr:
    get:
      operationId: getCheckrIntegrations
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CheckrOrganizationSerializer"
                type: array
          description: List of Third-Party Integrations
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get all Checkr integrations for all campuses in an organization
      tags:
        - integrations
  /me:
    get:
      description: Returns the individual associated with the access token
      operationId: getMe
      responses:
        "200":
          content:
            "*/*":
              schema:
                properties:
                  MeDetailsSerializer:
                    $ref: "#/components/schemas/MeDetailsSerializer"
                type: object
          description: Current Individual Information
      summary: Get information about the current logged in individual
      tags:
        - session
  /merge/individuals:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:individuals
      operationId: getMergeIndividuals
      parameters:
        - description: Partial first and last name search
          in: query
          name: name
          schema:
            type: string
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndividualDetailsSerializer"
                type: array
          description: List of Individuals
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Find profiles to merge with another profile
      tags:
        - individuals
  /messages/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | delete:messages
      operationId: deleteMessage
      parameters:
        - description: The message id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Remove group message
      tags:
        - groups
        - messages
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:messages
      operationId: getMessage
      parameters:
        - description: The message id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GroupMessageSerializer"
          description: The message details
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get the group message details
      tags:
        - groups
        - messages
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:messages
      operationId: updateMessage
      parameters:
        - description: The message id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/UpdateGroupMessageRequest"
        description: The group message details
        required: false
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GroupMessageSerializer"
          description: The message details
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Update group message
      tags:
        - groups
        - messages
      x-codegen-request-body-name: updateGroupMessageRequest
  /messages/{id}/comments:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:messages
      operationId: getMessageComments
      parameters:
        - description: The message id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The sort direction
          in: query
          name: sort_by
          schema:
            default: OLDEST
            enum:
              - NEWEST
              - OLDEST
            type: string
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/GroupMessageCommentSerializer"
                type: array
          description: The message comments list
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get the group message comments
      tags:
        - groups
        - messages
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:messages
      operationId: createMessageComment
      parameters:
        - description: The message id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The sort direction
          in: query
          name: sort_by
          schema:
            default: OLDEST
            enum:
              - NEWEST
              - OLDEST
            type: string
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/CreateGroupMessageCommentRequest"
        description: The group message comment details
        required: false
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GroupMessageCommentSerializer"
          description: The message comment details
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Create group message comment
      tags:
        - groups
        - messages
      x-codegen-request-body-name: createGroupMessageCommentRequest
  /messages/{id}/comments/{comment_id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | delete:messages
      operationId: deleteMessageComment
      parameters:
        - description: The message id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The comment id
          in: path
          name: comment_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Remove group message comment
      tags:
        - groups
        - messages
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:messages
      operationId: updateMessageComment
      parameters:
        - description: The message id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The comment id
          in: path
          name: comment_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          "*/*":
            schema:
              $ref: "#/components/schemas/UpdateGroupMessageCommentRequest"
        description: The group message comment details
        required: false
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/GroupMessageCommentSerializer"
          description: The message comment details
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Update group message comment
      tags:
        - groups
        - messages
      x-codegen-request-body-name: updateGroupMessageCommentRequest
  /need_items/{id}/assigned_to:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:needs
      operationId: deleteNeedItemAssignee
      parameters:
        - description: The need item's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Remove need item's assignee
      tags:
        - needs
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:needs
      operationId: updateNeedItemAssignee
      parameters:
        - description: The need item's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                individual_id:
                  type: integer
              type: object
        description: The need item's new assignee
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NeedItemDetailsSerializer"
          description: The need item
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Update need item's assignee
      tags:
        - needs
      x-codegen-request-body-name: updateNeedItemAssigneeRequest
  /needs:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:needs
      operationId: createNeed
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UpdateNeedRequestProperties"
                - properties:
                    items:
                      items:
                        properties:
                          date:
                            format: date
                            type: string
                          name:
                            type: string
                        type: object
                      type: array
                  type: object
        description: The new need details
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NeedDetailsSerializer"
          description: The need
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Create need
      tags:
        - needs
      x-codegen-request-body-name: createNeedRequest
  /needs/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | delete:needs
      operationId: deleteNeed
      parameters:
        - description: The need's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Remove a need
      tags:
        - needs
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:needs
      operationId: updateNeed
      parameters:
        - description: The need's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              allOf:
                - $ref: "#/components/schemas/UpdateNeedRequestProperties"
        description: The updated need details
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicNeedDetailsSerializer"
          description: The need
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Update a need
      tags:
        - needs
      x-codegen-request-body-name: updateNeedRequest
  /needs/{id}/coordinator:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:needs
      operationId: reassignNeedCoordinator
      parameters:
        - description: The need's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                coordinator_id:
                  type: integer
              type: object
        description: The new need coordinator
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicNeedDetailsSerializer"
          description: The need
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Reassign need coordinator
      tags:
        - needs
      x-codegen-request-body-name: reassignNeedCoordinatorRequest
  /needs/{id}/inform:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:needs
      operationId: sendNeedInformEmail
      parameters:
        - description: The need's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                message:
                  type: string
                send_to:
                  description: Individual ids to send the email to
                  items:
                    type: integer
                  type: array
              type: object
        description: The need inform message
        required: false
      responses:
        "200":
          content: {}
          description: Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Send need inform emails
      tags:
        - needs
      x-codegen-request-body-name: informNeedRequest
  /needs/{id}/items:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:needs
      operationId: getNeedItems
      parameters:
        - description: The need's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/NeedItemDetailsSerializer"
                type: array
          description: List of need items
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Get need items
      tags:
        - needs
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:needs
      operationId: createNeedItem
      parameters:
        - description: The need's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                date:
                  format: date
                  type: string
                name:
                  type: string
              type: object
        description: The need item details
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NeedItemDetailsSerializer"
          description: The need item
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Create need item
      tags:
        - needs
      x-codegen-request-body-name: createNeedItemRequest
  /needs/{id}/items/{item_id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | delete:needs
      operationId: deleteNeedItem
      parameters:
        - description: The need's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The need item's id
          in: path
          name: item_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Remove need item
      tags:
        - needs
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:needs
      operationId: updateNeedItem
      parameters:
        - description: The need's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The need item's id
          in: path
          name: item_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                assignee_id:
                  type: integer
                date:
                  format: date
                  type: string
                name:
                  type: string
                order_by:
                  type: integer
              type: object
        description: The need item details
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NeedItemDetailsSerializer"
          description: The need item
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Update need item
      tags:
        - needs
      x-codegen-request-body-name: updateNeedItemRequest
  /notes:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:notes
      operationId: getNotes
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: The contexts to get notes for
          explode: true
          in: query
          name: context[]
          schema:
            items:
              enum:
                - GROUP
                - DEPARTMENT
                - PROCESS_QUEUE
                - GENERAL
              type: string
            type: array
          style: form
        - description: The sharing level to get notes for
          explode: true
          in: query
          name: sharing_level[]
          schema:
            items:
              enum:
                - PRIVATE
                - CONTEXT_LEADERS
                - ALL_LEADERS
              type: string
            type: array
          style: form
        - description: Only show notes I have created OR shared with me
          in: query
          name: show
          schema:
            enum:
              - CREATED_BY_ME
              - SHARED_WITH_ME
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicNoteWithIndividualSerializer"
                type: array
          description: List of Notes
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get notes
      tags:
        - notes
  /notes/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | delete:notes
      operationId: deleteNote
      parameters:
        - description: The note's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Delete note
      tags:
        - notes
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:notes
      operationId: getNote
      parameters:
        - description: The note's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoteDetailsSerializer"
          description: Note Details
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get note
      tags:
        - notes
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:notes
      operationId: updateNote
      parameters:
        - description: The note's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                note:
                  type: string
                sharing_level:
                  enum:
                    - PRIVATE
                    - CONTEXT_LEADERS
                    - ALL_LEADERS
                  type: string
              type: object
        description: The updated note
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoteDetailsSerializer"
          description: Note Details
      summary: Updates note
      tags:
        - notes
      x-codegen-request-body-name: note
  /oauth/token:
    post:
      operationId: getAccessToken
      requestBody:
        content:
          application/json:
            examples:
              authorization_code:
                value:
                  client_id: "{your client id}"
                  client_secret: "{your client secret}"
                  code: "{code parameter from redirect}"
                  grant_type: authorization_code
                  redirect_uri: "{your redirect uri}"
                  subdomain: "{subdomain}"
              refresh_token:
                value:
                  client_id: "{your client id}"
                  client_secret: "{your client secret}"
                  grant_type: refresh_token
                  refresh_token: "{refresh token}"
                  subdomain: "{subdomain}"
            schema:
              properties:
                client_id:
                  description: OAuth client id
                  type: string
                client_secret:
                  description: OAuth client secret
                  type: string
                code:
                  description: Required for authorization_code grant type
                  type: string
                grant_type:
                  description: oAuth Grant Type
                  enum:
                    - authorization_code
                    - refresh_token
                  type: string
                redirect_uri:
                  description: >-
                    Required for authorization_code grant type if provided
                    during authorization.  Must EXACTLY match the redirect used
                    during the authorization code flow, including the protocol.
                  example: https://localhost:8000/redirect/url
                  type: string
                refresh_token:
                  description: >-
                    Required for refresh_token grant type.  Do not pass in for
                    authorization_code flow.
                  type: string
                subdomain:
                  description: Church subdomain
                  type: string
              required:
                - client_id
                - client_secret
                - grant_type
                - subdomain
        required: true
      responses:
        "200":
          content:
            application/json:
              example:
                access_token: "{access token}"
                expires_in: 7200
                refresh_token: "{refresh token}"
                scope: "{scopes}"
                token_type: bearer
              schema:
                $ref: "#/components/schemas/AccessTokenSerializer"
          description: Get Access Token
      summary: Get oauth access token
      tags:
        - authentication
  /processes:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:process_queues
      operationId: getProcesses
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: Process name to search by
          in: query
          name: name
          schema:
            type: string
        - description: Include processes with no queues (default is false)
          in: query
          name: exclude_empty
          schema:
            default: false
            type: boolean
        - description: Campus ids to filter processes
          in: query
          name: campus_ids
          schema:
            items:
              type: number
            type: array
        - description: Status to filter processes
          in: query
          name: statuses
          schema:
            $ref: "#/components/schemas/ProcessStatusType"
        - description: Sort process list response
          in: query
          name: sort_by
          schema:
            $ref: "#/components/schemas/ProcessSortBy"
        - description: Sort process list direction
          in: query
          name: sort_direction
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicProcessSerializer"
                type: array
          description: Processes list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get a list of processes
      tags:
        - process queues
  /processes/{id}/managers/{manager_id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:process_queues
      operationId: deleteProcessManager
      parameters:
        - description: The process id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The id of the process manager
          in: path
          name: manager_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Remove a process manager
      tags:
        - process queues
  /processes/{id}/queues:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:process_queues
      operationId: getProcessQueues
      parameters:
        - description: The process id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: Queue name to search by
          in: query
          name: name
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicQueueSerializer"
                type: array
          description: Process queues list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get a list of a queues in a process
      tags:
        - process queues
  /queues/{id}/individuals:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:queue_individuals
      operationId: addQueueIndividual
      parameters:
        - description: The queue's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateQueueIndividualRequest"
        description: The individual queue
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessQueueIndividualDetail"
          description: The individuals in the queue
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Add an individual to a process queue
      tags:
        - process queues
      x-codegen-request-body-name: createQueueIndividualRequest
  /queues/{id}/managers:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:process_queues
      operationId: getQueueManagers
      parameters:
        - description: The queue's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: Partial first and last name search
          in: query
          name: name
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualProfileSerializer"
                type: array
          description: Queue managers list
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get the queue's managers
      tags:
        - process queues
  /queues/{id}/managers/{manager_id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:process_queues
      operationId: deleteQueueManager
      parameters:
        - description: The queue's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The id of the process manager
          in: path
          name: manager_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Remove a queue manager
      tags:
        - process queues
  /queues/{queueId}/individuals/{individualId}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:queue_individuals
      operationId: getQueueIndividualByQueueId
      parameters:
        - description: The queue's id
          in: path
          name: queueId
          required: true
          schema:
            type: integer
        - description: The individuals's id
          in: path
          name: individualId
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessQueueIndividualDetail"
          description: The queue individual
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: View queue individual details by queue and individual ids
      tags:
        - process queues
  /queues_individuals:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:queue_individuals
      operationId: getQueueIndividuals
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: Statuses of individuals in queue
          explode: true
          in: query
          name: statuses[]
          schema:
            items:
              $ref: "#/components/schemas/ProcessQueueStatuses"
            type: array
          style: form
        - description: >-
            Include individuals assigned to me or unassigned individuals. If
            this param is not provided, both will be included
          in: query
          name: assignment
          schema:
            enum:
              - ASSIGNED_TO_ME
              - UNASSIGNED
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ProcessQueueIndividualDetail"
                type: array
          description: List of queue individuals
        "401":
          $ref: "#/components/responses/NotAuthenticated"
      summary: get a list of queue individuals
      tags:
        - process queues
  /queues_individuals/{queueIndividualId}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:queue_individuals
      operationId: deleteQueueIndividual
      parameters:
        - description: The queue individual's id
          in: path
          name: queueIndividualId
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Remove an individual from a queue
      tags:
        - process queues
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:queue_individuals
      operationId: getQueueIndividual
      parameters:
        - description: The queue individual's id
          in: path
          name: queueIndividualId
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessQueueIndividualDetail"
          description: The queue individual
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: View queue individual details
      tags:
        - process queues
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:queue_individuals
      operationId: updateQueueIndividual
      parameters:
        - description: The queue individual's id
          in: path
          name: queueIndividualId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdateQueueIndividualRequest"
        description: The individual queue updates
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessQueueIndividualDetail"
          description: The queue individual
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Updates queue individual
      tags:
        - process queues
      x-codegen-request-body-name: updateQueueIndividualRequest
  /queues_individuals/{queueIndividualId}/done:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:queue_individuals
      operationId: completeQueueIndividual
      parameters:
        - description: The queue individual's id
          in: path
          name: queueIndividualId
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CompleteQueueIndividualRequest"
        description: The automations to perform when completing a queue individual
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProcessQueueIndividualDetail"
          description: The completed queue individual
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
        "404":
          $ref: "#/components/responses/NotFound"
      summary: Complete the queue individual and perform automations
      tags:
        - process queues
      x-codegen-request-body-name: completeQueueIndividual
  /reset_password:
    post:
      description: Available with client_credential auth type
      operationId: resetPassword
      requestBody:
        content:
          "*/*":
            schema:
              properties:
                email:
                  description: The email of the individual for the password reset
                  format: email
                  type: string
              type: object
        required: false
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Generates reset password email
      tags:
        - session
      x-codegen-request-body-name: ""
  /saved_searches/duplicate/{id}:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:advanced_searches
      operationId: duplicateSavedAdvancedSearch
      parameters:
        - description: The saved search's id to duplicate
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: The saved search name
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: |
            Details of the duplicated saved search
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Create a duplicate of a saved search
      tags:
        - saved searches
      x-codegen-request-body-name: name
  /saved_searches/search/{id}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:advanced_searches
      operationId: getSavedAdvancedSearch
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: The id of the saved search
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: |
            The details of the saved search for the given search id
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for an advanced search.
      tags:
        - saved searches
  /saved_searches/search/{search_id}/individual/{individual_id}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:advanced_searches
      operationId: getSavedAdvancedSearchIndividual
      parameters:
        - description: The search's id
          in: path
          name: search_id
          required: true
          schema:
            type: integer
        - description: The individual's id
          in: path
          name: individual_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  BasicIndividualProfileSerializer:
                    $ref: "#/components/schemas/BasicIndividualProfileSerializer"
                  IndividualSavedSearchDetails:
                    $ref: "#/components/schemas/IndividualSavedSearchDetails"
                type: object
          description: |
            Details about the individual and individual saved search
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get the individual associated with the saved search
      tags:
        - saved searches
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:advanced_searches
      operationId: addUpdateSavedAdvancedSearchIndividual
      parameters:
        - description: The search's id
          in: path
          name: search_id
          required: true
          schema:
            type: integer
        - description: The individual's id
          in: path
          name: individual_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                can_edit:
                  description: >-
                    Whether or not the individual will be allowed to edit the
                    saved search
                  type: boolean
                is_owner:
                  description: Whether the individual is the owner of the saved search
                  type: boolean
                is_starred:
                  description: Whether the individual has starred the saved search
                  type: boolean
                remove:
                  description: Remove the individual's association with this saved search
                  type: boolean
              type: object
        description: Individual saved search fields
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: ""
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Update and share individual saved searches
      tags:
        - saved searches
      x-codegen-request-body-name: IndividualSavedSearchParams
  /saved_searches/search/{search_id}/individual/{individual_id}/star:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:advanced_searches
      operationId: updateSavedSearchIndividualStar
      parameters:
        - description: The search's id
          in: path
          name: search_id
          required: true
          schema:
            type: integer
        - description: The individual's id
          in: path
          name: individual_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: Whether the saved search is starred or not
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: |
            Details about the individual and individual saved search
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Update whether a saved search is starred or not.
      tags:
        - saved searches
      x-codegen-request-body-name: is_starred
  /saved_searches/search/{search_id}/individuals:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:advanced_searches
      operationId: getSavedAdvancedSearchIndividuals
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: The saved search's id
          in: path
          name: search_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: |
            Details about the indivdual and individual saved search
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Get the individuals associated with the saved search
      tags:
        - saved searches
  /saved_searches/{individual_id}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:advanced_searches
      operationId: getSavedAdvancedSearches
      parameters:
        - description: The individual's id
          in: path
          name: individual_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: |
            Saved search details associated with the given individual id
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for the user's saved searches
      tags:
        - saved searches
  /saved_searches/{individual_id}/list:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:advanced_searches
      operationId: getSavedAdvancedSearchesList
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: The individual's id
          in: path
          name: individual_id
          required: true
          schema:
            type: integer
        - description: The id of the insight domain
          in: query
          name: insight_id
          required: true
          schema:
            type: integer
        - description: The string to search for within saved search names
          in: query
          name: search_term
          schema:
            type: string
        - description: Denotes if the individual is the owner of a saved search
          in: query
          name: is_owner
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: |
            Individual saved search details
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for a user's list of saved advanced searches
      tags:
        - saved searches
  /saved_searches/{individual_id}/search/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:advanced_searches
      operationId: deleteSavedSearch
      parameters:
        - description: The individual id associated with the saved search
          in: path
          name: individual_id
          required: true
          schema:
            type: integer
        - description: The saved search's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: |
            Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Delete an advanced search
      tags:
        - saved searches
  /saved_searches/{individual_id}/search/{saved_search_id}/leave:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:advanced_searches
      operationId: leaveSavedSearch
      parameters:
        - description: The individual's id
          in: path
          name: individual_id
          required: true
          schema:
            type: integer
        - description: The saved search's id
          in: path
          name: saved_search_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: |
            Empty response
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Removes an individual's association with a saved search.
      tags:
        - saved searches
  /scheduling/assignment_swaps/{id}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getAssignmentSwap
      parameters:
        - description: The assignment_swap_id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentSwapSerializer"
          description: Returns the assignment swap record
      summary: get an assignment swap record
      tags:
        - scheduling
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateAssignmentSwap
      parameters:
        - description: The assignment_swap_id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignmentSwapRequestBody"
        description: The new status for the assignment swap
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentSwapSerializer"
          description: Returns the assignment swap record
      summary: Update an assignment swap
      tags:
        - scheduling
      x-codegen-request-body-name: assignmentSwapRequest
  /scheduling/assignments:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: deleteAssignments
      requestBody:
        content:
          application/json:
            schema:
              properties:
                event_ids:
                  items:
                    minimum: 1
                    type: integer
                  type: array
                include_notified:
                  default: false
                  type: boolean
                statuses:
                  items:
                    $ref: "#/components/schemas/AssignmentStatus"
                  type: array
              required:
                - event_ids
              type: object
        required: true
      responses:
        "200":
          content: {}
          description: Empty response
        "400":
          content: {}
          description: Events not specified or not found, or invalid statuses
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Delete all assignments of the given events
      tags:
        - scheduling
  /scheduling/assignments/{assignment_id}/associated_times/{associated_time_id}:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:schedules
      operationId: updateAssignmentsAssociatedTimes
      parameters:
        - description: The assignment id
          in: path
          name: assignment_id
          required: true
          schema:
            type: integer
        - description: The associated time's id
          in: path
          name: associated_time_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                is_required:
                  type: boolean
              type: object
        description: Updates to an assignment associated time
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AssignmentAssociatedTimeSerializer"
                type: array
          description: Returns the updated assignment associated times
      summary: Updates an assignment associated time
      tags:
        - scheduling
      x-codegen-request-body-name: assignmentAssociatedTimeRequest
  /scheduling/assignments/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: deleteAssignment
      parameters:
        - description: The assignment's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Delete an assignment
      tags:
        - scheduling
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getAssignment
      parameters:
        - description: The assignment's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  AssignmentSerializer:
                    $ref: "#/components/schemas/AssignmentSerializer"
                type: object
          description: Returns the assignment
      summary: Get an assignment
      tags:
        - scheduling
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateAssignment
      parameters:
        - description: The assignment's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AssignmentRequestBody"
        description: The new status for the assignment
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentSerializer"
          description: Returns the assignment
        "400":
          content: {}
          description: Invalid status
      summary: Update an assignment
      tags:
        - scheduling
      x-codegen-request-body-name: assignmentRequest
  /scheduling/assignments/{id}/assignment_swaps:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createAssignmentSwap
      parameters:
        - description: The assignment's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                individual_ids:
                  items:
                    type: integer
                  type: array
              type: object
        description: The ids of assignments to create swap requests for
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssignmentSwapSerializer"
          description: Returns the created assignments
      summary: Creates requests to swap serving assignments
      tags:
        - scheduling
      x-codegen-request-body-name: createAssignmentSwapRequest
  /scheduling/assignments/{id}/associated_times:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getAssignmentAssociatedTimes
      parameters:
        - description: The assignment id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AssociatedTimeSerializer"
          description: Returns the assignment
      summary: Get associated times for an assignment
      tags:
        - scheduling
  /scheduling/assignments/{id}/available_swaps:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getAvailableAssignmentSwaps
      parameters:
        - description: The assignment id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AvailableAssignmentSwapSerializer"
          description: Returns a list of assignments
      summary: >-
        Get list of assignments that could possibly swap with the supplied
        assignment
      tags:
        - scheduling
  /scheduling/auto_schedule:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
                   | write:auto_schedule
      operationId: autoScheduleAssignments
      requestBody:
        content:
          application/json:
            schema:
              properties:
                event_ids:
                  type: array
                filter_preferences:
                  items:
                    enum:
                      - BLOCKOUT_DATE
                      - SPECIFIC_WEEKS_SERVING_PREFERENCE
                      - FREQUENCY_SERVING_PREFERENCE
                      - SERVING_PREFERENCE_TIMES
                      - FAMILY_SERVING_PREFERENCE
                    type: string
                  type: array
                position_ids:
                  type: array
              type: object
        required: true
      responses:
        "200":
          $ref: "#/components/responses/AutoScheduleSuccessResponse"
          description: Auto schedule completed successfully
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Creates as many assignments as possible for the given scheduling events
      tags:
        - scheduling
  /scheduling/auto_schedule/needed_volunteers:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
                   | read:auto_schedule
      operationId: getAutoScheduleNeededVolunteers
      requestBody:
        content:
          application/json:
            schema:
              properties:
                event_ids:
                  items:
                    type: integer
                  type: array
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  needed:
                    type: integer
                  teams:
                    items:
                      properties:
                        id:
                          type: integer
                        name:
                          type: string
                        needed:
                          type: integer
                        positions:
                          items:
                            properties:
                              id:
                                type: integer
                              name:
                                type: string
                              needed:
                                type: integer
                            type: object
                          type: array
                      type: object
                    type: array
                type: object
          description: The needed volunteers grouped by teams and positions
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Gets the number of needed volunteers for auto schedule
      tags:
        - scheduling
  /scheduling/blockout_dates/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: deleteIndividualBlockoutDate
      parameters:
        - description: The blockout date's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Delete an individual blockout date
      tags:
        - scheduling
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateIndividualBlockoutDate
      parameters:
        - description: The blockout date's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                end:
                  format: date-time
                  type: string
                reason:
                  type: string
                start:
                  format: date-time
                  type: string
              type: object
        description: The individual's blockout date range
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualBlockoutDateSerializer"
          description: Returns the updated blockout date
      summary: Update an individual blockout date
      tags:
        - scheduling
      x-codegen-request-body-name: individualBlockoutDate
  /scheduling/categories:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getScheduleCategories
      requestBody:
        content:
          "*/*":
            schema:
              properties:
                search_term:
                  description: Search team used to search categories by name
                  type: string
                status:
                  enum:
                    - ACTIVE
                    - ARCHIVED
                    - ACTIVE_AND_ARCHIVED
                  type: string
              type: object
        description: filters the categories
        required: false
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/CategorySerializer"
          description: Returns the list of categories
      summary: Gets all categories
      tags:
        - scheduling
      x-codegen-request-body-name: category
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createScheduleCategory
      requestBody:
        content:
          application/json:
            schema:
              properties:
                associated_times:
                  items:
                    $ref: "#/components/schemas/ScheduleEventRequestBody"
                  type: array
                campus_id:
                  type: integer
                default_assignment_status:
                  enum:
                    - PENDING
                    - ASSIGNED
                  type: string
                events:
                  items:
                    $ref: "#/components/schemas/ScheduleEventRequestBody"
                  type: array
                name:
                  type: string
                recurrence_pattern:
                  enum:
                    - DAILY
                    - WEEKLY
                    - DOES_NOT_REPEAT
                  type: string
                teams:
                  items:
                    $ref: "#/components/schemas/TeamRequestBody"
                  type: array
              type: object
        description: The category
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategorySerializer"
          description: Returns the category
      summary: Creates a new category e.g. Children's Ministry
      tags:
        - scheduling
      x-codegen-request-body-name: category
  /scheduling/categories/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: deleteScheduleCategory
      parameters:
        - description: The category's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/CategorySerializer"
          description: Deletes the category
      summary: Deletes a category
      tags:
        - scheduling
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getScheduleCategory
      parameters:
        - description: The category's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/CategorySerializer"
          description: Returns the category
      summary: Gets a category
      tags:
        - scheduling
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateScheduleCategory
      parameters:
        - description: The category's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                allowed_replacement_type:
                  enum:
                    - NONE
                    - CATEGORY
                    - TEAM
                    - POSITION
                  type: string
                archived:
                  type: boolean
                child_work_approved_required:
                  type: boolean
                default_assignment_status:
                  enum:
                    - PENDING
                    - ASSIGNED
                  type: string
                name:
                  type: string
                week_starts_on_day:
                  enum:
                    - SUNDAY
                    - MONDAY
                    - TUESDAY
                    - WEDNESDAY
                    - THURSDAY
                    - FRIDAY
                    - SATURDAY
                  type: string
              type: object
        description: The category
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategorySerializer"
          description: Returns the updated category
      summary: Updates a category
      tags:
        - scheduling
      x-codegen-request-body-name: category
  /scheduling/categories/{id}/available_schedule_dates:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getScheduleDates
      parameters:
        - description: Category id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AvailableScheduleDateSerializer"
                type: array
          description: Returns available schedule dates
      summary: Get available schedule dates for a category
      tags:
        - scheduling
  /scheduling/categories/{id}/events:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: deleteScheduleEvents
      parameters:
        - description: The category's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                event_ids:
                  items:
                    minimum: 1
                    type: integer
                  type: array
              required:
                - event_ids
              type: object
        required: true
      responses:
        "200":
          content: {}
          description: Empty response
        "400":
          content: {}
          description: Schedule events not specified or not found
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Delete multiple schedule events
      tags:
        - scheduling
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getCategoryEvents
      parameters:
        - description: The category's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: The ending date for the event
          in: query
          name: end_date
          schema:
            format: date
            type: string
        - description: Exclude events with empty assignments
          in: query
          name: exclude_empty
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SchedulingEventSerializer"
                type: array
          description: Returns the events
      summary: Gets events in the category
      tags:
        - scheduling
  /scheduling/categories/{id}/files:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createCategoryFile
      parameters:
        - description: Category id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  description: File to upload
                  format: binary
                  type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FileSerializer"
          description: Returns a file serializer
      summary: Upload file for category
      tags:
        - scheduling
  /scheduling/categories/{id}/individuals:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getCategoryIndividuals
      parameters:
        - description: The category's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                has_been_notified:
                  description: >-
                    do they have at least one assignment there they have or have
                    not been notified
                  type: boolean
                has_email:
                  type: boolean
                has_mobile_phone:
                  type: boolean
                position_ids:
                  description: the position ids to filter individuals by
                  items:
                    type: integer
                  type: array
                schedule_ids:
                  description: the schedule ids to filter individuals by
                  items:
                    type: integer
                  type: array
                statuses:
                  description: the statuses to filter individuals by
                  items:
                    enum:
                      - PENDING
                      - ACCEPTED
                      - DECLINED
                      - CHECKED_IN
                    type: string
                  type: array
              type: object
        description: filters the individuals serving in a category
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualProfileSerializer"
                type: array
          description: Returns the individuals
      summary: Gets individuals serving in a category
      tags:
        - scheduling
      x-codegen-request-body-name: categoryIndividualsRequest
  /scheduling/categories/{id}/messages:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: messageVolunteers
      parameters:
        - description: The category's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                body:
                  description: the body of the message
                  type: string
                dry_run:
                  description: whether the message should actually be sent or not
                  type: boolean
                files:
                  description: the files to attach to the message
                  items:
                    format: binary
                    type: string
                  type: array
                position_ids:
                  description: the position ids to filter volunteers by
                  items:
                    type: integer
                  type: array
                schedule_ids:
                  description: the schedule ids to filter volunteers by
                  items:
                    type: integer
                  type: array
                serving_rotation_ids:
                  description: the serving rotation ids to filter volunteers by
                  items:
                    type: integer
                  type: array
                serving_rotation_position_ids:
                  description: the serving rotation position ids to filter volunteers by
                  items:
                    type: integer
                  type: array
                statuses:
                  description: the statuses to filter volunteers by
                  items:
                    enum:
                      - PENDING
                      - ACCEPTED
                      - DECLINED
                      - CHECKED_IN
                    type: string
                  type: array
                subject:
                  description: the subject of the message
                  type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolunteerMessageSerializer"
          description: Returns the count of messages sent
      summary: Sends notifications
      tags:
        - scheduling
  /scheduling/categories/{id}/notifications:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: sendScheduleCategoryNotifications
      parameters:
        - description: The category's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          "*/*":
            schema:
              properties:
                dry_run:
                  type: boolean
                message:
                  type: string
                notified_status:
                  enum:
                    - NOTIFIED
                    - NOT_NOTIFIED
                    - NOTIFIED_AND_NOT_NOTIFIED
                  type: string
                schedule_ids:
                  items:
                    type: integer
                  type: array
              type: object
        description: Schedule ids to notify
        required: false
      responses:
        "200":
          content: {}
          description: Returns empty response
      summary: Sends notifications
      tags:
        - scheduling
      x-codegen-request-body-name: schedulingNotificationRequest
  /scheduling/categories/{id}/notifications/metrics:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getNotificationMetrics
      parameters:
        - description: The category's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The context of the notification
          in: query
          name: notification_context
          required: true
          schema:
            enum:
              - ALERT_VOLUNTEERS
              - MESSAGE_VOLUNTEERS
              - SEND_REQUESTS
            type: string
        - description: The schedule ids to filter by
          in: query
          name: schedule_ids
          schema:
            type: integer
        - description: The event ids to filter by
          in: query
          name: event_ids
          schema:
            type: integer
        - description: The individual ids to exclude from the notification
          in: query
          name: excluded_individual_ids
          schema:
            type: integer
        - description: The notification statuses to filter by
          in: query
          name: notification_statuses
          schema:
            enum:
              - NOTIFIED
              - NOT_NOTIFIED
              - ALL
            type: string
      responses:
        "200":
          $ref: "#/components/responses/GetScheduleNotificationMetricsResponse"
          description: Returns the notification metrics
      summary: Gets notification metrics
      tags:
        - scheduling
      x-feature-flag: schedule_email_modal
  /scheduling/categories/{id}/organizers:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getCategoryOrganizers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualProfileSerializer"
                type: array
          description: Returns category's organizers
      summary: Get category's organizers
      tags:
        - scheduling
    parameters:
      - description: Category id
        in: path
        name: id
        required: true
        schema:
          type: integer
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createCategoryOrganizer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                individual_id:
                  type: integer
              type: object
        description: The individual id to add as a category's organizer
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicIndividualProfileSerializer"
          description: Returns category's organizers
      summary: Create new category organizer
      tags:
        - scheduling
  /scheduling/categories/{id}/plan_organizers:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: getPlanOrganizers
      parameters:
        - description: Category Id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualProfileSerializer"
                type: array
          description: Returns plan organizers
      summary: Get plan organizers
      tags:
        - scheduling
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createScheduleOrganizer
      parameters:
        - description: Category Id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                individual_id:
                  type: integer
              type: object
        description: the plan organizer
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicIndividualProfileSerializer"
          description: Returns the created plan organizer
      summary: Create a plan organizer
      tags:
        - scheduling
      x-codegen-request-body-name: planOrganizer
  /scheduling/categories/{id}/plan_organizers/{individualId}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: deletePlanOrganizer
      parameters:
        - description: Category Id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Id of the Individual
          in: path
          name: individualId
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Remove a plan organizer
      tags:
        - scheduling
  /scheduling/categories/{id}/schedules:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: deleteSchedules
      parameters:
        - description: Category id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                schedule_ids:
                  items:
                    minimum: 1
                    type: integer
                  type: array
              required:
                - schedule_ids
              type: object
        required: true
      responses:
        "200":
          content: {}
          description: Empty response
        "400":
          content: {}
          description: Schedules not specified or not found
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Delete multiple schedules
      tags:
        - scheduling
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getSchedules
      parameters:
        - description: Category id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: list of ids
          in: query
          name: schedule_ids
          schema:
            type: string
        - description: sort order of schedule dates
          in: query
          name: sort
          schema:
            default: DESC
            enum:
              - DESC
              - ASC
            type: string
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: Will return schedules with an end date after given date
          in: query
          name: after
          schema:
            format: date
            type: string
        - description: >-
            Will return schedules with an end date before given date and sort by
            descending
          in: query
          name: before
          schema:
            format: date
            type: string
        - description: >-
            Weill return schedules with an end date after the given start date
            and schedules with a start date before the given end date
          in: query
          name: between
          schema:
            properties:
              end:
                format: date
                type: string
              start:
                format: date
                type: string
            type: object
        - description: >-
            Will return event teams for each scheduling event as well as
            assignments and associated times.
          in: query
          name: getFullSchedules
          schema:
            default: false
            type: boolean
        - description: >-
            Will attach assignment metrics to the schedule entity and also each
            event in the schedule.
          in: query
          name: withMetrics
          schema:
            default: false
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ScheduleSerializer"
                type: array
          description: Returns schedules with scheduling events.
      summary: Get schedules for a category
      tags:
        - scheduling
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createCategorySchedules
      parameters:
        - description: Category id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                count:
                  description: the count of new schedules to create
                  type: integer
                schedule_dates:
                  items:
                    format: date
                    type: string
                  type: array
              type: object
        description: The new schedules options
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchedulesSerializer"
          description: Returns schedules
      summary: Create new schedules
      tags:
        - scheduling
      x-codegen-request-body-name: options
  /scheduling/categories/{id}/service_plans:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: getScheduleServicePlan
      parameters:
        - description: Category id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ServicePlanSerializer"
                type: array
          description: Returns the created service plan
      summary: Get category service plans
      tags:
        - scheduling
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createScheduleServicePlan
      parameters:
        - description: Category id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                category_id:
                  type: integer
                event_starttime_offset:
                  type: integer
                name:
                  type: string
              type: object
        description: The service plan
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicePlanSerializer"
          description: Returns the created service plan
      summary: Create a service plan
      tags:
        - scheduling
      x-codegen-request-body-name: servicePlan
  /scheduling/categories/{id}/serving_rotations:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: deleteServingRotationPlan
      parameters:
        - description: Category id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
              type: object
        description: The serving rotation
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServingRotationSerializer"
          description: Returns empty response
      summary: Delete a serving rotation
      tags:
        - scheduling
      x-codegen-request-body-name: servingRotation
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getServingRotations
      parameters:
        - description: Category id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Get the full rotation or only the base data
          in: query
          name: get_full_serving_rotations
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ServingRotationSerializer"
                type: array
          description: Returns the serving rotations for a category
      summary: Get serving rotations for a category
      tags:
        - scheduling
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createServingRotationPlan
      parameters:
        - description: Category id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
              type: object
        description: The serving rotation
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServingRotationSerializer"
          description: Returns the created serving rotation
      summary: Create a serving rotation
      tags:
        - scheduling
      x-codegen-request-body-name: servingRotation
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateServingRotationPlan
      parameters:
        - description: Category id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
              type: object
        description: The serving rotation
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServingRotationSerializer"
          description: Returns the updated serving rotation
      summary: Update a serving rotation
      tags:
        - scheduling
      x-codegen-request-body-name: servingRotation
  /scheduling/event_positions/{event_position_id}/associated_times/{associated_time_id}:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:schedules
      operationId: updateEventPositionAssociatedTimes
      parameters:
        - description: The event position's id
          in: path
          name: event_position_id
          required: true
          schema:
            type: integer
        - description: The associated time's id
          in: path
          name: associated_time_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                is_required:
                  type: boolean
              type: object
        description: Updates to an assignment associated time
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AssignmentAssociatedTimeSerializer"
                type: array
          description: Returns the updated assignment associated times
      summary: Updates all associated time associated times in an event position
      tags:
        - scheduling
      x-codegen-request-body-name: assignmentAssociatedTimeRequest
  /scheduling/event_positions/{id}:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateEventPosition
      parameters:
        - description: The event position id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                quantity:
                  type: integer
              type: object
        description: Quantity needed for the event position
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicEventPositionSerializer"
          description: Returns the event position
      summary: Updates the quantity required for an event position
      tags:
        - scheduling
      x-codegen-request-body-name: eventPositionRequest
  /scheduling/event_positions/{id}/assignments:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createEventPositionAssignment
      parameters:
        - description: The event position's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                individual_ids:
                  items:
                    type: integer
                  type: array
                update_existing_status:
                  type: boolean
              type: object
        description: The individual ids to create assignments for
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AssignmentSerializer"
                type: array
          description: Returns the event position assignments created
      summary: Creates a event position assignment
      tags:
        - scheduling
      x-codegen-request-body-name: createAssignmentRequest
  /scheduling/event_positions/{id}/candidates:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getEventPositionCandidates
      parameters:
        - description: The serving rotation position id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/VolunteerSerializer"
                type: array
          description: Returns the candidates
      summary: Returns candidates for an event position
      tags:
        - scheduling
  /scheduling/event_positions/{source_id}/copy_to/{target_id}:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: copyEventPositionAssignments
      parameters:
        - description: The source event position to copy the assignments from
          in: path
          name: source_id
          required: true
          schema:
            type: integer
        - description: The target event position to copy the assignments to
          in: path
          name: target_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/EventPositionSerializer"
          description: Returns the updated target event position
      summary: Copy assignments from a source to a target
      tags:
        - scheduling
  /scheduling/event_teams/{event_team_id}/associated_times/{associated_time_id}:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:schedules
      operationId: updateEventTeamAssociatedTimes
      parameters:
        - description: The event team's id
          in: path
          name: event_team_id
          required: true
          schema:
            type: integer
        - description: The associated time's id
          in: path
          name: associated_time_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                is_required:
                  type: boolean
              type: object
        description: Updates to an assignment associated time
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AssignmentAssociatedTimeSerializer"
                type: array
          description: Returns the updated assignment associated times
      summary: Updates all assignment associated times in an event team
      tags:
        - scheduling
      x-codegen-request-body-name: assignmentAssociatedTimeRequest
  /scheduling/events/{event_id}/event_position_associated_times:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:schedules
      operationId: updateEventPositionsAssociatedTimes
      parameters:
        - description: The event's id
          in: path
          name: event_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  associated_time_id:
                    type: integer
                  event_position_id:
                    type: integer
                  is_required:
                    type: boolean
                type: object
              type: array
        description: Updates to an event positions associated time
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchedulingEventSerializer"
          description: Returns the updated assignment associated times
      summary: Updates all event position associated times in an event
      tags:
        - scheduling
      x-codegen-request-body-name: eventPositionAssociatedTimeRequest
  /scheduling/events/{event_id}/serving_rotations/{serving_rotation_id}:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: assignServingRotationToEvent
      parameters:
        - description: Schedule Event id
          in: path
          name: event_id
          required: true
          schema:
            type: integer
        - description: Schedule serving rotation id
          in: path
          name: serving_rotation_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: integer
              type: array
        description: Individuals to exlude from the assignment
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchedulingEventSerializer"
          description: Returns the updated event
      summary: Assign a serving rotation to an event
      tags:
        - scheduling
      x-codegen-request-body-name: exclude_individual_ids
  /scheduling/events/{event_id}/serving_rotations/{serving_rotation_id}/conflicts:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: conflictsServingRotationToEvent
      parameters:
        - description: Schedule Event id
          in: path
          name: event_id
          required: true
          schema:
            type: integer
        - description: Schedule serving rotation id
          in: path
          name: serving_rotation_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/VolunteerSerializer"
                type: array
          description: Returns the assignment conflicts
      summary: Get event assignment conflicts with serving rotation
      tags:
        - scheduling
  /scheduling/events/{id}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getSchedulingEvent
      parameters:
        - description: Schedule Event id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Get full event details
          in: query
          name: get_full_event
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchedulingEventSerializer"
          description: Returns the event
      summary: Get scheduling event
      tags:
        - scheduling
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateSchedulingEvent
      parameters:
        - description: Schedule Event id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchedulingEventSerializer"
          description: Returns the updated event
      summary: Update an event
      tags:
        - scheduling
  /scheduling/events/{id}/copy_assignments:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: copyEventsAssignmentsEvent
      parameters:
        - description: Source schedule event id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: integer
              type: array
        description: Schedule event ids to copy assignments to
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SchedulingEventSerializer"
                type: array
          description: Returns the updated event
      summary: Update multiple events with assignments from another event
      tags:
        - scheduling
  /scheduling/events/{id}/copy_assignments/{copyFromEventId}:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: copyEventAssignmentsEvent
      parameters:
        - description: Schedule Event id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Schedule Event id to copy from
          in: path
          name: copyFromEventId
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SchedulingEventSerializer"
          description: Returns the updated event
      summary: Update an event with assignments from another event
      tags:
        - scheduling
  /scheduling/events/{id}/files:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createEventFile
      parameters:
        - description: Schedule Event id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  description: File to upload
                  format: binary
                  type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/EventFileSerializer"
                type: array
          description: Returns a file serializer
      summary: Upload file for event
      tags:
        - scheduling
  /scheduling/events/{id}/set_checkin_labels:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: setCheckinLabels
      parameters:
        - description: The event id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  position_id:
                    type: integer
                  should_print_checkin_label:
                    type: boolean
                type: object
              type: array
        description: The positions and their checkin label values
        required: false
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/BasicEventPositionSerializer"
                type: array
          description: Empty body
      summary: Sets event checkin labels status
      tags:
        - scheduling
      x-codegen-request-body-name: checkinLabelEventPositionsRequest
  /scheduling/families/{id}/assignments:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getFamilyAssignments
      parameters:
        - description: The family's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          "*/*":
            schema:
              properties:
                end_date:
                  format: date
                  type: string
                exclude_individuals:
                  items:
                    type: integer
                  type: array
                start_date:
                  format: date
                  type: string
                statuses:
                  items:
                    $ref: "#/components/schemas/AssignmentStatus"
                  type: array
              type: object
        description: Request a family's assignments
        required: false
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/AssignmentSerializer"
                type: array
          description: Returns the family's assignments
      summary: Gets a family's assignments
      tags:
        - scheduling
        - families
      x-codegen-request-body-name: FamilyAssignmentsRequest
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: writeFamilyAssignments
      parameters:
        - description: The family's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          "*/*":
            schema:
              properties:
                excluded_individual_ids:
                  items:
                    type: integer
                  type: array
                status:
                  enum:
                    - ACCEPTED
                    - DECLINED
                  type: string
              type: object
        description: update all of a family's pending assignments to status
        required: false
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/AssignmentSerializer"
                type: array
          description: Returns the family's updated assignments
      summary: Updates all assignments to given status for a family
      tags:
        - scheduling
        - individuals
      x-codegen-request-body-name: updateAllFamilyRequest
  /scheduling/families/{id}/blockout_dates:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getFamilyBlockoutDates
      parameters:
        - description: The family's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The date to start getting blockout dates for
          in: query
          name: start_date
          schema:
            format: date
            type: string
        - description: The end date to getting blockout dates
          in: query
          name: end_date
          schema:
            format: date
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndividualBlockoutDateSerializer"
                type: array
          description: Returns the family's blockout dates
      summary: Get a familiy's blockout dates for a date range
      tags:
        - scheduling
  /scheduling/families/{id}/open_event_positions:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getFamilyOpenEventPositions
      parameters:
        - description: The individuals's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: start date of open positions to search for
          in: query
          name: after
          schema:
            type: string
        - description: Family individual ids to not include
          explode: false
          in: query
          name: exclude_individual_id
          schema:
            items:
              type: integer
            type: array
          style: form
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualEventPositionSerializer"
                type: array
          description: Returns the family's open event positions
      summary: Get a family's open event positions
      tags:
        - scheduling
  /scheduling/individual/{id}/positions:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createVolunteerPosition
      parameters:
        - description: The individual's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                positions_ids:
                  items:
                    type: integer
                  type: array
              type: object
        description: The position ids to create volunteer records for
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/VolunteerSerializer"
                type: array
          description: Returns the volunteer records created
      summary: Adds an individual to positions
      tags:
        - scheduling
      x-codegen-request-body-name: createVolunteersRequest
  /scheduling/individuals/{id}/blockout_dates:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getIndividualBlockoutDates
      parameters:
        - description: The individuals's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The date to start getting blockout dates for
          in: query
          name: start_date
          schema:
            format: date
            type: string
        - description: The end date to getting blockout dates
          in: query
          name: end_date
          schema:
            format: date
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndividualBlockoutDateSerializer"
                type: array
          description: Returns the individual's blockout dates
      summary: Get an individuals blockout dates for a date range
      tags:
        - scheduling
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createIndividualBlockoutDate
      parameters:
        - description: The individuals's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                end:
                  format: date-time
                  type: string
                reason:
                  type: string
                start:
                  format: date-time
                  type: string
              type: object
        description: The individual's blockout date range
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualBlockoutDateSerializer"
          description: Returns the new blockout date
      summary: Create a blockout date range
      tags:
        - scheduling
      x-codegen-request-body-name: individualBlockoutDate
  /scheduling/individuals/{id}/open_event_positions:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getIndividualOpenEventPositions
      parameters:
        - description: The individuals's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualEventPositionSerializer"
                type: array
          description: Returns the individual's open event positions
      summary: Get an individual's open event positions
      tags:
        - scheduling
  /scheduling/individuals/{id}/open_event_positions/{event_position_id}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getIndividualOpenEventPosition
      parameters:
        - description: The individuals's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: The event position's id
          in: path
          name: event_position_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualEventPositionSerializer"
          description: Returns the individual's open event positions
      summary: Get an individual's open event position
      tags:
        - scheduling
  /scheduling/individuals/{id}/positions:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getIndividualPositions
      parameters:
        - description: The individuals's id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Return 'ALL', 'ACTIVE' or 'INACTIVE' positions for an individual.
          in: query
          name: status
          schema:
            default: ACTIVE
            enum:
              - ALL
              - ACTIVE
              - INACTIVE
            type: string
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndividualPositionSerializer"
                type: array
          description: Returns the individual's positions
      summary: Get an individual's filled positions
      tags:
        - scheduling
  /scheduling/individuals/{id}/preferences:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: deleteIndividualServingPreferences
      parameters:
        - description: The individuals's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Delete an individual's serving preferences
      tags:
        - scheduling
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getIndividualServingPreferences
      parameters:
        - description: The individuals's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualServingPreferencesSerializer"
          description: Returns the individual's serving preferences
      summary: Get an individuals serving preferences
      tags:
        - scheduling
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateIndividualServingPreferences
      parameters:
        - description: The individuals's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                preference:
                  items:
                    type: integer
                  type: array
                preference_type:
                  enum:
                    - UNLIMITED
                    - WEEKS_PER_MONTH
                    - WEEKS_OF_MONTH
                  type: string
                serve_with_family:
                  type: boolean
              type: object
        description: The individual's serving preferences
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualServingPreferencesSerializer"
          description: Returns the individual's serving preferences
      summary: Update an individual's serving preferences
      tags:
        - scheduling
      x-codegen-request-body-name: individualServingPreferences
  /scheduling/individuals/{individual_id}/preference_times:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getIndividualServingPreferenceTimes
      parameters:
        - description: the individual that the preference time is for
          in: path
          name: individual_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualServingPreferenceTimeSerializer"
          description: Returns the preference times
      summary: retrieves preference times for an individual
      tags:
        - scheduling
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createIndividualServingPreferenceTimes
      parameters:
        - description: the individual that the preference time is for
          in: path
          name: individual_id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                end:
                  format: date-time
                  type: string
                position_id:
                  type: integer
                start:
                  format: date-time
                  type: string
              type: object
        description: create a serving time preference for an individual
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualServingPreferenceTimeSerializer"
          description: creates a new preference time for an individual
      summary: creates a preference time per position for an individual
      tags:
        - scheduling
      x-codegen-request-body-name: createIndividualServingPreferenceTimesRequest
  /scheduling/position/{id}:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updatePosition
      parameters:
        - description: The position's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                background_check_type_ids:
                  description: >-
                    Array of background check type IDs required for this
                    position
                  items:
                    type: integer
                  type: array
                description:
                  description: Position description
                  type: string
                needed:
                  description: Number of volunteers needed for this position
                  type: integer
              type: object
        description: Position data to update
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PositionSerializer"
          description: Returns the updated position
      summary: Update a position
      tags:
        - scheduling
  /scheduling/positions:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: searchPositions
      parameters:
        - description: Search term used to search position by name
          in: query
          name: search_term
          schema:
            type: string
        - description: Used to filter positions by ACTIVE and INACTIVE
          in: query
          name: status_filter
          schema:
            enum:
              - ACTIVE
              - INACTIVE
            type: string
        - description: >-
            Individual Id to filter out positions where they are already a
            member
          in: query
          name: exclude_member_id
          schema:
            type: integer
        - description: >-
            Show positions that can be added (requires
            involvement_tab_permissions feature)
          in: query
          name: show_positions_to_add
          schema:
            type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PositionSerializer"
                type: array
          description: Returns the positions matching search criteria
      summary: Search for positions
      tags:
        - scheduling
  /scheduling/positions/{id}/volunteer-migrations:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: migrateVolunteer
      parameters:
        - description: The position's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                from_group_id:
                  type: integer
                from_position_ids:
                  items:
                    type: integer
                  type: array
              type: object
        description: The group and optionally some positions to migrate group members from
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/VolunteerMigrationSerializer"
                type: array
          description: Returns the number of volunteers created
      summary: Pulls group members into a position
      tags:
        - scheduling
      x-codegen-request-body-name: migrateVolunteersRequest
  /scheduling/positions/{id}/volunteers:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createVolunteer
      parameters:
        - description: The position's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                individual_ids:
                  items:
                    type: integer
                  type: array
              type: object
        description: The individual ids to create volunteers for
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/VolunteerSerializer"
                type: array
          description: Returns the volunteers created
      summary: Adds a volunteer to the position
      tags:
        - scheduling
      x-codegen-request-body-name: createVolunteersRequest
  /scheduling/preference_times/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: deleteIndividualServingPreferenceTimes
      parameters:
        - description: unique id for preference time
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: deletes an existing preference time for an individual
      summary: Updates a preference time per position for an individual
      tags:
        - scheduling
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateIndividualServingPreferenceTimes
      parameters:
        - description: unique id for preference time
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                end:
                  format: date-time
                  type: string
                start:
                  format: date-time
                  type: string
              type: object
        description: update an existing serving preference time
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IndividualServingPreferenceTimeSerializer"
          description: updates an existing preference time for an individual
      summary: updates a preference time per position for an individual
      tags:
        - scheduling
      x-codegen-request-body-name: updateIndividualServingPreferenceTimesRequest
  /scheduling/schedules/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: deleteSchedule
      parameters:
        - description: The schedule id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Delete a schedule
      tags:
        - scheduling
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getSchedule
      parameters:
        - description: The schedule id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ScheduleSerializer"
          description: Returns schedules
      summary: Get a schedule
      tags:
        - scheduling
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateSchedule
      parameters:
        - description: The schedule id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: >-
            whether or not the settings of the target schedule should be applied
            to all future schedules
          in: query
          name: apply_settings_to_all
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              properties:
                associated_times:
                  items:
                    $ref: "#/components/schemas/ScheduleEventRequestBody"
                  type: array
                events:
                  items:
                    $ref: "#/components/schemas/ScheduleEventRequestBody"
                  type: array
                same_people_serve_all_times:
                  type: boolean
                serving_reminder_message:
                  type: string
                serving_reminder_times:
                  items:
                    $ref: >-
                      #/components/schemas/ScheduleServingReminderTimesRequestBody
                  type: array
              type: object
        description: Schedule details
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduleSerializer"
          description: Returns the updated schedule
      summary: Updates the schedule
      tags:
        - scheduling
      x-codegen-request-body-name: scheduleRequest
  /scheduling/schedules/{id}/assignment_metrics:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getScheduleAssignmentMetrics
      parameters:
        - description: Schedule Id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Category Id
          in: query
          name: categoryId
          required: false
          schema:
            type: integer
        - description: Whether we should include past events
          in: query
          name: includePastEvents
          required: false
          schema:
            type: boolean
        - description: Event Ids to filter the metrics
          in: query
          name: eventIds
          required: false
          schema:
            items:
              type: integer
            type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ScheduleAssignmentMetric"
                type: array
          description: Returns the schedule assignmentMetrics
      summary: Get schedule assignment metrics
      tags:
        - scheduling
  /scheduling/schedules/{id}/message_schedulers:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: messageSchedulers
      parameters:
        - description: The schedule id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                assignment_id:
                  type: string
                event_position_id:
                  type: string
                message:
                  type: string
              type: object
        description: message the schedulers for a schedule
        required: false
      responses:
        "200":
          content: {}
          description: Empty body
      summary: Sends a message to the schedule's schedulers
      tags:
        - scheduling
      x-codegen-request-body-name: messageSchedulersRequest
  /scheduling/schedules/{id}/open_event_positions:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: openEventPositions
      parameters:
        - description: The schedule id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              items:
                properties:
                  is_open:
                    type: boolean
                  position_id:
                    type: integer
                type: object
              type: array
        description: The positions and their open values
        required: false
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/BasicEventPositionSerializer"
                type: array
          description: Empty body
      summary: Sets event positions as open or closed
      tags:
        - scheduling
      x-codegen-request-body-name: openEventPositionsRequest
  /scheduling/schedules/{id}/open_schedule_notifications:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: openScheduleNotification
      parameters:
        - description: The schedule id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                dry_run:
                  default: true
                  description: >-
                    If this is set to true the emails will not be sent. This is
                    useful to determine how many recipients would receive an
                    email
                  type: boolean
                excluded_individual_ids:
                  default: []
                  description: >-
                    Pass in an array of individual ids that represent who should
                    not be included in the recipient list.
                  items:
                    type: integer
                  type: array
                message:
                  default: ""
                  description: >-
                    The message that will be sent to volunteers in the recipient
                    list.
                  type: string
              type: object
        description: >-
          Configuration for sending as a dry run, excluding individual ids, and
          the message that should be sent.
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolunteerMessageSerializer"
          description: Returns the count of messages sent
        "400":
          content: {}
          description: Schedule must be opened to notify volunteers
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Sends schedule notification for open positions
      tags:
        - scheduling
      x-codegen-request-body-name: sendOpenScheduleNotificationRequest
  /scheduling/schedules/{id}/open_schedule_notifications/recipients:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: openScheduleNotificationRecipients
      parameters:
        - description: The schedule id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualProfileSerializer"
                type: array
          description: >-
            Returns the recipient information for sending open schedule
            notifications
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Gets recipient info
      tags:
        - scheduling
  /scheduling/schedules/{id}/organizers:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: deleteScheduleOrganizer
      parameters:
        - description: Schedule Id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Remove a schedule organizer
      tags:
        - scheduling
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: getScheduleOrganizer
      parameters:
        - description: Schedule Id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualProfileSerializer"
                type: array
          description: Returns the schedule organizer
      summary: Get schedule organizers
      tags:
        - scheduling
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: getScheduleOrganizer
      parameters:
        - description: Schedule Id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                individual_id:
                  type: integer
                schedule_id:
                  type: integer
              type: object
        description: the schedule organizers
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicIndividualProfileSerializer"
          description: Returns the created service plan
      summary: Create a schedule organizer
      tags:
        - scheduling
      x-codegen-request-body-name: scheduleOrganizer
  /scheduling/schedules/{id}/serving_reminder_times:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: getServingReminderTimes
      parameters:
        - description: The schedule id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            "*/*":
              schema:
                items:
                  $ref: "#/components/schemas/ServingReminderTimeSerializer"
                type: array
          description: Returns the serving reminder time
      summary: Get the serving reminder times for the schedule
      tags:
        - scheduling
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createServingReminderTime
      parameters:
        - description: The schedule id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                days_before:
                  description: An integer from 1 to 7
                  type: integer
                time_of_day:
                  description: The time of day in HH:MM format
                  type: string
              type: object
        description: The serving reminder time
        required: false
      responses:
        "200":
          content:
            "*/*":
              schema:
                $ref: "#/components/schemas/ServingReminderTimeSerializer"
          description: Returns the serving reminder time
      summary: Create a serving reminder time
      tags:
        - scheduling
      x-codegen-request-body-name: servingReminderTimeRequest
  /scheduling/search_individuals:
    post:
      deprecated: true
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: searchForSchedulingIndividuals
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - $ref: >-
            #/components/parameters/PerformUnsavedAdvancedSearchRequestDeprecated
        - description: event position to get projected alerts for
          in: query
          name: event_position_id
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SchedulingIndividualSerializer"
                type: array
          description: The search results
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Use `POST /search/scheduling_individuals/results` instead
      tags:
        - scheduling
  /scheduling/service_plan_items/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: deleteScheduleServicePlanItem
      parameters:
        - description: Service plan item id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Returns empty
      summary: delete a service plan item
      tags:
        - scheduling
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateScheduleServicePlanItem
      parameters:
        - description: Service plan item id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                duration:
                  type: integer
                fileIds:
                  items:
                    type: integer
                  type: array
                item_type:
                  enum:
                    - ITEM
                    - SECTION_HEADER
                  type: string
                links:
                  items:
                    $ref: "#/components/schemas/ServicePlanItemLinkRequest"
                  type: array
                name:
                  type: string
              type: object
        description: The service plan item
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicePlanItemSerializer"
          description: Returns the service plan item
      summary: Update a service plan item
      tags:
        - scheduling
      x-codegen-request-body-name: servicePlanItem
  /scheduling/service_plans/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: deleteScheduleServicePlan
      parameters:
        - description: Service plan id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Delete a service plan
      tags:
        - scheduling
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateScheduleServicePlan
      parameters:
        - description: Service plan id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                name:
                  type: string
              type: object
        description: The service plan
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ServicePlanSerializer"
                type: array
          description: Returns the updated service plan
      summary: Update a service plan
      tags:
        - scheduling
      x-codegen-request-body-name: servicePlan
  /scheduling/service_plans/{id}/items:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createScheduleServicePlanItem
      parameters:
        - description: Service plan id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                description:
                  type: string
                duration:
                  type: integer
                fileIds:
                  items:
                    type: integer
                  type: array
                item_type:
                  enum:
                    - ITEM
                    - SECTION_HEADER
                  type: string
                links:
                  items:
                    $ref: "#/components/schemas/ServicePlanItemLinkRequest"
                  type: array
                name:
                  type: string
              type: object
        description: The service plan item
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicePlanSerializer"
          description: Returns the service plan
      summary: Create a service plan item
      tags:
        - scheduling
      x-codegen-request-body-name: servicePlanItem
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateBulkServicePlanItems
      parameters:
        - description: Service plan id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                count_before:
                  type: integer
                order:
                  items:
                    type: integer
                  type: array
              type: object
        description: The bulk service plan item request
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServicePlanSerializer"
          description: Returns the service plan
      summary: Update bulk service plan items
      tags:
        - scheduling
      x-codegen-request-body-name: bulkServicePlanItems
  /scheduling/serving_reminder_times/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: deleteServingReminderTime
      parameters:
        - description: The serving reminder time's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Delete a serving reminder time
      tags:
        - scheduling
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateServingReminderTime
      parameters:
        - description: The serving reminder time's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                days_before:
                  description: An integer from 1 to 7
                  type: integer
                time_of_day:
                  description: The time of day in HH:MM format
                  type: string
              type: object
        description: The serving reminder time
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServingReminderTimeSerializer"
          description: Returns the updated serving reminder time
      summary: Update serving reminder time
      tags:
        - scheduling
      x-codegen-request-body-name: servingReminderTimeRequest
  /scheduling/serving_rotation_positions/{id}:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateServingRotationPosition
      parameters:
        - description: The serving rotation position id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                quantity:
                  type: integer
              type: object
        description: Quantity needed for the serving rotation position
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ServingRotationPositionSerializer"
          description: Returns the serving rotation position
      summary: Updates the quantity required for a serving rotation position
      tags:
        - scheduling
      x-codegen-request-body-name: servingRotationPosition
  /scheduling/serving_rotation_positions/{id}/assignments:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createServingRotationPositionAssignment
      parameters:
        - description: The serving rotation position's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                individual_ids:
                  items:
                    type: integer
                  type: array
                update_existing_status:
                  type: boolean
              type: object
        description: The individual ids to create assignments for
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ServingRotationAssignmentSerializer"
                type: array
          description: Returns the created serving rotation assignments
      summary: Creates serving rotation position assignments
      tags:
        - scheduling
      x-codegen-request-body-name: createAssignmentRequest
  /scheduling/serving_rotation_positions/{id}/candidates:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getServingRotationPositionCandidates
      parameters:
        - description: The serving rotation position id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/VolunteerSerializer"
                type: array
          description: Returns the candidates
      summary: Get serving rotation position candidates
      tags:
        - scheduling
  /scheduling/song_versions/{version_id}/links:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getVersionLinks
      parameters:
        - description: The song version id
          in: path
          name: version_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SongVersionLinkSerializer"
          description: Returns links for the song version
      summary: Get song version links
      tags:
        - scheduling
  /scheduling/songs/{song_id}:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: getSongDetail
      parameters:
        - description: The song description
          in: path
          name: song_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SongSerializer"
          description: Returns the detail of the song
      summary: Get song detail
      tags:
        - scheduling
  /scheduling/teams:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:scheduling
      operationId: searchTeams
      parameters:
        - description: Search term to filter teams by name
          in: query
          name: search_term
          required: false
          schema:
            type: string
        - description: Filter teams by status
          in: query
          name: status_filter
          required: false
          schema:
            $ref: "#/components/schemas/TeamStatusFilter"
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/TeamSerializer"
                type: array
          description: Returns the list of teams matching the search criteria
      summary: Search teams
      tags:
        - scheduling
  /scheduling/teams/{id}/organizers:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: getTeamOrganizers
      parameters:
        - description: Team Id
          in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicIndividualProfileSerializer"
                type: array
          description: Returns the team organizers
      summary: Get team organizers
      tags:
        - scheduling
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: createTeamOrganizer
      parameters:
        - description: Team Id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                individual_id:
                  type: integer
              type: object
        description: the team organizer
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicIndividualProfileSerializer"
          description: The individual that was added
      summary: Create a team organizer
      tags:
        - scheduling
      x-codegen-request-body-name: teamOrganizer
  /scheduling/teams/{id}/organizers/{individual_id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: removeTeamOrganizer
      parameters:
        - description: Team Id
          in: path
          name: id
          required: true
          schema:
            type: integer
        - description: Individual Id
          in: path
          name: individual_id
          required: true
          schema:
            type: integer
      responses:
        "200":
          content: {}
          description: Empty response
      summary: Remove a team organizer
      tags:
        - scheduling
  /scheduling/volunteers/{volunteerId}:
    parameters:
      - description: unique id for the volunteer
        in: path
        name: id
        required: true
        schema:
          type: integer
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:scheduling
      operationId: updateVolunteer
      requestBody:
        content:
          application/json:
            schema:
              properties:
                status:
                  enum:
                    - ACTIVE
                    - HIDDEN
                    - INACTIVE
                  type: string
              type: object
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/VolunteerSerializer"
          description: The updated volunteer
      summary: updates a volunteer
      tags:
        - scheduling
  /search/assignments/results:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: getSchedulingAssignmentAdvancedSearchResults
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/SearchConfiguration"
                filters:
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/AssignmentAdvanceSearchSerializer"
                type: array
          description: Returns the list of assignments
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for scheduling assignments
      tags:
        - search
      x-codegen-request-body-name: searchRequest
  /search/categories/results:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: getSchedulingCategoriesAdvancedSearchResults
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/SearchConfiguration"
                filters:
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CategorySerializer"
                type: array
          description: Returns the list of categories
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for scheduling categories
      tags:
        - search
      x-codegen-request-body-name: searchRequest
  /search/criteria/{domain}:
    get:
      deprecated: true
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:advanced_searches
      operationId: getAdvancedSearchCriteria
      parameters:
        - description: the domain for which to get criteria
          in: path
          name: domain
          required: true
          schema:
            type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicCriteriaSerializer"
                type: array
          description: Comma separated list of allowed criteria
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Use `GET /search/{domain}` instead
      tags:
        - search
  /search/department_detail/results:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: getDepartmentDetailAdvancedSearchResults
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/SearchConfiguration"
                filters:
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/DepartmentDetailsSerializer"
                type: array
          description: Returns the list of department details
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for department details
      tags:
        - search
      x-codegen-request-body-name: searchRequest
  /search/groups/results:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: getGroupAdvancedSearchResults
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/SearchConfiguration"
                filters:
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicGroupSerializer"
                type: array
          description: Returns the list of groups
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for groups
      tags:
        - search
      x-codegen-request-body-name: searchRequest
  /search/individual_event_attendance/results:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: getEventAttendanceAdvancedSearchResults
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/SearchConfiguration"
                filters:
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/EventAttendanceSummarySerializer"
                type: array
          description: Returns the list of event attendance records
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for event attendance
      tags:
        - search
      x-codegen-request-body-name: searchRequest
  /search/individual_groups/results:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: getIndividualGroupAdvancedSearchResults
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/SearchConfiguration"
                filters:
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: >-
                    #/components/schemas/BasicIndividualGroupsProfileWithGroupSerializer
                type: array
          description: Returns the list of groups
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for groups associated to an individual
      tags:
        - search
      x-codegen-request-body-name: searchRequest
  /search/individuals/actions/mass_edit_sacraments:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: performMassEditSacraments
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/IndividualSearchConfiguration"
                filters:
                  description: >
                    You can see the individual params
                    [here](/documentation/documents/search_params_individuals.html).

                    You can see an overview of search filters
                    [here](/documentation/documents/search_overview.html)
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicResultsActionSerializer"
                type: array
          description: Returns the list of updated sacrament individuals
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: mass edit sacraments for individuals
      tags:
        - search
      x-codegen-request-body-name: individualSearchRequest
  /search/individuals/results:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: getIndividualAdvancedSearchResults
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/IndividualSearchConfiguration"
                filters:
                  description: >
                    You can see the individual params
                    [here](/documentation/documents/search_params_individuals.html).

                    You can see an overview of search filters
                    [here](/documentation/documents/search_overview.html)
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/IndividualDetailsSerializer"
                type: array
          description: Returns the list of individuals
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for individuals
      tags:
        - search
      x-codegen-request-body-name: individualSearchRequest
  /search/organizers/results:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: getSchedulingOrganizerAdvancedSearchResults
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/SearchConfiguration"
                filters:
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/OrganizerAdvanceSearchSerializer"
                type: array
          description: Returns the list of scheduling organizers
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for scheduling organizers
      tags:
        - search
      x-codegen-request-body-name: searchRequest
  /search/positions/results:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: getSchedulingPositionAdvancedSearchResults
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/SearchConfiguration"
                filters:
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PositionAdvanceSearchSerializer"
                type: array
          description: Returns the list of scheduling positions
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for scheduling positions
      tags:
        - search
      x-codegen-request-body-name: searchRequest
  /search/results:
    post:
      deprecated: true
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:advanced_searches
      operationId: performUnsavedAdvancedSearch
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/PerformUnsavedAdvancedSearchRequestDeprecated
        description: >
          The individuals advanced search __filters__ can be found
          [here](/documentation/documents/search_params_individuals.html)

          The groups advanced search __filters__ can be found
          [here](/documentation/documents/search_params_groups.html)
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SearchResultsSerializer"
                type: array
          description: >
            The search result object will be different for each domain.

            * When the setting output - csv is added, the data is run through
            the CsvOutputAdvancedSearchSerializer to return a CSV file.
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Use `POST /search/{domain}/results` instead
      tags:
        - search
      x-codegen-request-body-name: performUnsavedAdvancedSearchRequestDeprecated
  /search/save:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:advanced_searches
      operationId: saveAdvancedSearch
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        $ref: "#/components/requestBodies/SavedSearchParams"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: >
            The search result object will be different for each domain.

            * When the setting output - csv is added, the data is run through
            the CsvOutputAdvancedSearchSerializer to return a CSV file.
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Save an advanced search
      tags:
        - search
  /search/save/{id}:
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:advanced_searches
      operationId: updateAdvancedSearch
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
        - description: The search's id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/SavedSearchParams"
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: >
            The search result object will be different for each domain.

            * When the setting output - csv is added, the data is run through
            the CsvOutputAdvancedSearchSerializer to return a CSV file.
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Update an advanced search
      tags:
        - search
  /search/schedules/results:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: getScheduleAdvancedSearchResults
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/SearchConfiguration"
                filters:
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ScheduleAdvanceSearchSerializer"
                type: array
          description: Returns the list of schedules
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for schedules
      tags:
        - search
      x-codegen-request-body-name: searchRequest
  /search/schedules_totals/results:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: getScheduleTotalAdvancedSearchResults
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/SearchConfiguration"
                filters:
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ScheduleTotalsAdvanceSearchSerializer"
          description: Returns the of schedule totals
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for totals for schedule results
      tags:
        - search
      x-codegen-request-body-name: searchRequest
  /search/scheduling_files/results:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: getScheduleFileAdvancedSearchResults
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/SearchConfiguration"
                filters:
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SearchFileDetailSerializer"
                type: array
          description: Returns the list of scheduling files
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for scheduling files
      tags:
        - search
      x-codegen-request-body-name: searchRequest
  /search/scheduling_individuals/results:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: getSchedulingIndividualAdvancedSearchResults
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/SearchConfiguration"
                filters:
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SchedulingIndividualSerializer"
                type: array
          description: Returns the list of individuals
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for individuals under a scheduling context
      tags:
        - search
      x-codegen-request-body-name: searchRequest
  /search/songs/results:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: getSongAdvancedSearchResults
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/SearchConfiguration"
                filters:
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/SongSearchSerializer"
                type: array
          description: Returns the list of songs
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for songs
      tags:
        - search
      x-codegen-request-body-name: searchRequest
  /search/volunteers/results:
    post:
      description: |
        | Properties | Description            |
        | ---------- | -----------            |
        | Scopes     | read:advanced_searches |
      operationId: getSchedulingVolunteerAdvancedSearchResults
      parameters:
        - $ref: "#/components/parameters/PerPage"
        - $ref: "#/components/parameters/Page"
      requestBody:
        content:
          application/json:
            schema:
              properties:
                configuration:
                  $ref: "#/components/schemas/SearchConfiguration"
                filters:
                  properties: {}
                  type: object
              type: object
        description: search filters and configuration
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/VolunteerAdvanceSearchSerializer"
                type: array
          description: Returns the list of volunteers
          headers:
            X-Offset:
              schema:
                type: integer
            X-Page:
              schema:
                type: integer
            X-Per-Page:
              schema:
                type: integer
            X-Total-Pages:
              schema:
                type: integer
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Search for scheduling volunteers
      tags:
        - search
      x-codegen-request-body-name: searchRequest
  /settings/financial:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:settings_financial
      operationId: getFinancialSettings
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/BasicFinancialSettingsSerializer"
                type: array
          description: Financial Settings
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Returns organization financial settings
      tags:
        - settings
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:settings_financial
      operationId: updateFinancialSettings
      requestBody:
        content:
          application/json:
            schema:
              properties:
                allow_credit_card:
                  type: boolean
                allow_public_giving:
                  type: boolean
                system_wide_financials:
                  enum:
                    - ADMIN
                  type: string
              type: object
        description: Financial settings that can be updated
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicFinancialSettingsSerializer"
          description: Update organization financial settings
        "401":
          $ref: "#/components/responses/NotAuthenticated"
        "403":
          $ref: "#/components/responses/NotAuthorized"
      summary: Update organization financial settings
      tags:
        - settings
      x-codegen-request-body-name: financial settings
  /templates:
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:templates
      operationId: getTemplates
      parameters:
        - description: array of campus ids the template has been shared to
          in: query
          name: shared_with_campus_ids
          schema:
            items:
              type: integer
            type: array
        - description: array of individual ids who created template
          in: query
          name: creator_ids
          schema:
            items:
              type: integer
            type: array
        - description: array of different entity types
          in: query
          name: entity_types
          schema:
            items:
              $ref: "#/components/schemas/TemplateEntityType"
            type: array
        - in: query
          name: is_system_defined
          schema:
            type: boolean
        - description: sort templates by name, last used by date, or last modified date
          in: query
          name: sort_by
          schema:
            format: enum - NAME - LAST_USED - LAST_MODIFIED
            type: string
        - description: sort templates in ascending or descending in order
          in: query
          name: sort_direction
          schema:
            format: enum - ASC - DESC
            type: string
        - description: query page number
          in: query
          name: page
          schema:
            type: integer
        - description: number of results per page
          in: query
          name: perPage
          schema:
            type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/Template"
                type: array
          description: Templates list
      summary: Search and filter templates
      tags:
        - templates
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:templates
      operationId: createTemplate
      requestBody:
        $ref: "#/components/requestBodies/CreateTemplateRequest"
      responses:
        "201":
          $ref: "#/components/responses/TemplateDetailsResponse"
      summary: create a new template
      tags:
        - templates
  /templates/{id}:
    delete:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:templates
      operationId: deleteTemplate
      responses:
        "200":
          content: {}
          description: Empty response
      summary: delete a template
      tags:
        - templates
    get:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | read:templates
      operationId: getTemplate
      responses:
        "200":
          $ref: "#/components/responses/TemplateDetailsResponse"
      summary: get a single template
      tags:
        - templates
    parameters:
      - description: The template id
        in: path
        name: id
        required: true
        schema:
          type: integer
    put:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:templates
      operationId: updateTemplate
      requestBody:
        $ref: "#/components/requestBodies/UpdateTemplateRequest"
      responses:
        "200":
          $ref: "#/components/responses/TemplateDetailsResponse"
      summary: edit a template
      tags:
        - templates
  /templates/{id}/entities:
    post:
      description: |
        Properties | Description
        ---------- | -----------
        Scopes     | write:templates
      operationId: useTemplateToCreateEntity
      parameters:
        - description: The template id
          in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        $ref: "#/components/requestBodies/UseTemplateRequest"
      responses:
        "200":
          content:
            application/json:
              schema:
                properties:
                  id:
                    type: integer
                type: object
          description: entity id
      summary: Use a template to create a new entity, such as a form or mail merge
      tags:
        - templates
security:
  - BearerTokenHeader: []
servers:
  - url: https://api.ccbchurch.com
tags:
  - description: Actions associated with authentication
    name: authentication
  - description: Actions associated with campuses
    name: campuses
  - description: Actions associated with the current church
    name: church
  - description: Actions associated with the departments
    name: departments
  - description: Actions associated with events
    name: events
  - description: Actions associated with families
    name: families
  - description: Actions associated to files
    name: files
  - description: Actions associated with forms
    name: forms
  - description: Actions associated with groups
    name: groups
  - description: Actions associated with individuals
    name: individuals
  - description: Actions associated with metrics
    name: metrics
  - description: Actions associated with the current identity
    name: session
  - description: Actions associated with the process queues
    name: process queues
  - description: Actions associated with rooms and resources
    name: resources
  - description: Actions associated with scheduling
    name: scheduling
  - description: Actions associated with advanced search
    name: search
  - description: Actions associated with saved advanced search
    name: saved searches
  - description: Actions associated with needs
    name: needs
  - description: Actions associated with permissions
    name: permissions
  - description: Actions associated with settings
    name: settings
